<?xml version="1.0" encoding="utf-8"?>
<nugget name="Daily build with class ZSAPLINK_CLASS as last object">
 <CLAS CLSNAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" VARCL="X" UNICODE="X" RSTAT="S" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CX_STATIC_CHECK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="ERROR_MESSAGE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="&amp;MSG&amp;"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="EXISTING" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="A new object that you want to create already exists"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="INCORRECT_FILE_FORMAT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="File is not a valid nugget/slinkee file"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="LOCKED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Object &amp;OBJECT&amp; is locked"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="MSG" VERSION="1" LANGU="E" DESCRIPT="Error message variable" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTVALUE="&apos;44F7518323DB08BC02000000A7E42BB6&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="NOT_AUTHORIZED" VERSION="1" LANGU="E" DESCRIPT="Error message variable" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="The user does not have the required authorization"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="NOT_FOUND" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Unable to find the requested object &amp;OBJECT&amp;"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="NO_PLUGIN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="The plugin &amp;MSG&amp; is not available on this system"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="OBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="SYSTEM_ERROR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Internal error - you need to debug to identify the problem"/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SAPLINK" CMPNAME="ZCX_SAPLINK" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="11 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="&amp;MSG&amp;"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_SAPLINK" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink main class" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZSAPLINK" CMPNAME="T_OBJECTTABLE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="4 " SRCCOLUMN1="4 " SRCROW2="8 " SRCCOLUMN2="28 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF t_objecttable,
           classname TYPE string,
           object TYPE ko100-object,
           text TYPE ko100-text,
         END OF t_objecttable
"/>
  <types CLSNAME="ZSAPLINK" CMPNAME="GTS_VERSION_INFO" VERSION="1" LANGU="E" DESCRIPT="Version information" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="33 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF  gts_version_info,
*     Change this if import or export is incompatible to older major versions or if enhancements are so important to force the new version of the plugin
*     Please comment changes in major version in class documentation
             zsaplink_plugin_major_version TYPE i,
*     Change this if bugfixes are being done but the basic structure and im- and exportbehaviour don&apos;t change.  Reset to 0 when incrementing major version
*     Please comment changes in minor version in class documentation
             zsaplink_plugin_minor_version TYPE i,
*     Change this if cosmetic changes are being done or if internal handling changed but no change to import- or exportbehaviour
*    ( i.e. speeding up the plugin will fall into this ).  Reset to 0 when incrementeing major or minor version
             zsaplink_plugin_build_version TYPE i,
*
             zsaplink_plugin_info1  TYPE string,  &quot; Plugin info - part 1    -  See demoimplementation how this may be used
             zsaplink_plugin_info2  TYPE string,  &quot; Plugin info - part 2
             zsaplink_plugin_info3  TYPE string,  &quot; Plugin info - part 3
             zsaplink_plugin_info4  TYPE string,  &quot; Plugin info - part 4
             zsaplink_plugin_info5  TYPE string,  &quot; Plugin info - part 5
           END OF gts_version_info
"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes

  TYPES: BEGIN OF t_objecttable,
           classname TYPE string,
           object TYPE ko100-object,
           text TYPE ko100-text,
         END OF t_objecttable.</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class
*    .-&quot;-.
*  .&apos;=^=^=&apos;.
* /=^=^=^=^=\
*:^=SAPLINK=^;
*|^ EASTER  ^|
*:^=^EGG^=^=^:
* \=^=^=^=^=/
*  `.=^=^=.&apos;
*    `~~~`
* Wow, you made it!
* Thanks for actually LOOKING at the source code to this, simply
* by doing so you may keep this project alive.  It&apos;s up to all of
* us now to make sure we can help SAP Code Exchange grow by
* sharing code and collaborating on projects.</localMacros>
  <localTestClasses>*----------------------------------------------------------------------*
*       CLASS lc_Zsaplink_Test DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lc_zsaplink_test DEFINITION FOR TESTING
  &quot; DURATION SHORT
  &quot; RISK LEVEL HARMLESS
  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
.
*?&lt;asx:abap xmlns:asx=&quot;http://www.sap.com/abapxml&quot; version=&quot;1.0&quot;&gt;
*?&lt;asx:values&gt;
*?&lt;TESTCLASS_OPTIONS&gt;
*?&lt;TEST_CLASS&gt;lc_Zsaplink_Test
*?&lt;/TEST_CLASS&gt;
*?&lt;TEST_MEMBER&gt;f_Cut
*?&lt;/TEST_MEMBER&gt;
*?&lt;OBJECT_UNDER_TEST&gt;ZSAPLINK
*?&lt;/OBJECT_UNDER_TEST&gt;
*?&lt;OBJECT_IS_LOCAL/&gt;
*?&lt;GENERATE_FIXTURE/&gt;
*?&lt;GENERATE_CLASS_FIXTURE/&gt;
*?&lt;GENERATE_INVOCATION/&gt;
*?&lt;GENERATE_ASSERT_EQUAL/&gt;
*?&lt;/TESTCLASS_OPTIONS&gt;
*?&lt;/asx:values&gt;
*?&lt;/asx:abap&gt;
  PRIVATE SECTION.
* ================
    DATA:
      f_cut TYPE REF TO zsaplink.  &quot;class under test

    METHODS: convertixmldoctostring FOR TESTING.
ENDCLASS.       &quot;lc_Zsaplink_Test


*----------------------------------------------------------------------*
*       CLASS lc_Zsaplink_Test IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lc_zsaplink_test IMPLEMENTATION.
* ======================================

  METHOD convertixmldoctostring.
    CONSTANTS value TYPE string VALUE &apos;German - Umlaute: öäü ÖÄÜ ß, Special characters - slowenian: ##### #####&apos;.
    DATA ixml     TYPE REF TO if_ixml.
    DATA ixmldoc  TYPE REF TO if_ixml_document.
    DATA rootnode TYPE REF TO if_ixml_element.
    DATA xmlstring TYPE string.
    DATA value_from_xml TYPE string.

    &quot; Instanciate ixml
    ixml = cl_ixml=&gt;create( ).
    ixmldoc = ixml-&gt;create_document( ).
    &quot; Add content
    rootnode = ixmldoc-&gt;create_element( &apos;test&apos; ).
    rootnode-&gt;set_value( value ).
    ixmldoc-&gt;append_child( rootNode ).

    &quot; Convert to String
    xmlstring = zsaplink=&gt;convertixmldoctostring( ixmldoc ).

    &quot; Convert back
    FREE: ixmldoc, rootnode.
    ixmldoc = zsaplink=&gt;convertstringtoixmldoc( xmlstring ).

    rootnode = ixmldoc-&gt;get_root_element( ).
    value_from_xml = rootnode-&gt;get_value( ).
    cl_aunit_assert=&gt;assert_equals(
      EXPORTING
        exp                  = value          &quot; Data Object with Expected Type
        act                  = value_from_xml &quot; Data Object with Current Value
        msg                  = &apos;XML Input and Output not equal&apos;    &quot; Message in Case of Error
    ).
  ENDMETHOD.       &quot;convertixmldoctostring




ENDCLASS.       &quot;lc_Zsaplink_Test</localTestClasses>
  <classDocumentation OBJECT="ZSAPLINK">
   <language SPRAS="E">
    <textLine TDFORMAT="U1" TDLINE="&amp;FUNCTIONALITY&amp;"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;RELATIONS&amp;"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;EXAMPLE&amp;"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;HINTS&amp;"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;FURTHER_SOURCES_OF_INF&amp;"/>
    <textLine TDFORMAT="AS" TDLINE="Version 1.0.0:  Added functionality to pass version information"/>
   </language>
  </classDocumentation>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="IXML" VERSION="1" LANGU="E" DESCRIPT="IF_IXML" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="NUGGET_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Nugget create sequence" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTVALUE="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="INT4" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="OBJECTTABLE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="13 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="42 " TYPESRC_LENG="40 " TYPESRC="objecttable TYPE TABLE OF t_objecttable
"/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="OBJNAME" VERSION="1" LANGU="E" DESCRIPT="IF_IXML" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="STREAMFACTORY" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_STREAM_FACTORY" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_STREAM_FACTORY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="XMLDATA" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_STREAM_FACTORY" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="XMLDOC" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" SCONAME="SOURCETABLE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSWSOURCET" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" SCONAME="PAGETABLE" VERSION="1" LANGU="E" DESCRIPT="O2: Oxygen Page Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2PAGELINE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" SCONAME="SOURCESTRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method BUILDSOURCESTRING.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data sTemp type string.
data pageLine type O2PAGELINE.

  if sourceTable is not initial.
    loop at sourceTable into sTemp.
      concatenate sourceString sTemp CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
        into sourceString.
    endloop.
  elseif pageTable is not initial.
    loop at pageTable into pageLine.
      concatenate sourceString pageLine-line
        CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
        into sourceString.
    endloop.
  endif.

* remove extra newline characters for conversion comparison consistency
  shift sourceString left deleting leading
    CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
  shift sourceString right deleting trailing
    CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
  shift sourceString left deleting leading space.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="BUILDTABLEFROMSTRING" VERSION="1" LANGU="E" DESCRIPT="Build a table" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDTABLEFROMSTRING" SCONAME="SOURCE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDTABLEFROMSTRING" SCONAME="SOURCETABLE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <source>method BUILDTABLEFROMSTRING.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  split source at CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
    into table sourceTable.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="1" LANGU="E" DESCRIPT="Check if object exists" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" SCONAME="EXISTS" VERSION="1" LANGU="E" DESCRIPT="object exists flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKOBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKOBJECT" SCONAME="I_IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKOBJECT" SCONAME="E_OBJTYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKOBJECT" SCONAME="E_OBJNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKOBJECT" SCONAME="E_PLUGINEXISTS" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKOBJECT" SCONAME="E_OBJECTEXISTS" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKOBJECT" SCONAME="E_TARGETOBJECT" VERSION="1" LANGU="E" DESCRIPT="SAPlink main class" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="3" TYPE="ZSAPLINK"/>
   <source>METHOD checkobject.
  DATA l_objtable LIKE objecttable.
  DATA l_objline  LIKE LINE OF objecttable.

  CLEAR: e_objtype, e_objname, e_pluginexists, e_objectexists.
  TRY.
      CALL METHOD zsaplink=&gt;getobjectinfofromixmldoc
        EXPORTING
          ixmldocument = i_ixmldocument
        IMPORTING
          objtypename  = e_objtype
          objname      = e_objname.
    CATCH zcx_saplink.
  ENDTRY.

  CALL METHOD zsaplink=&gt;getplugins( CHANGING objecttable = l_objtable ).

  READ TABLE l_objtable INTO l_objline WITH KEY object = e_objtype.

  IF sy-subrc = 0.
    e_pluginexists = &apos;X&apos;.
    CREATE OBJECT e_targetobject
      TYPE
        (l_objline-classname)
      EXPORTING
        name                  = e_objname.

    e_objectexists = e_targetobject-&gt;checkexists( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONSTRUCTOR" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method CONSTRUCTOR.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/

*  data meTypeDescr type ref to CL_ABAP_TYPEDESCR.
*  clear className.
*
*  objName = name.
*  meTypeDescr = CL_ABAP_TYPEDESCR=&gt;DESCRIBE_BY_OBJECT_REF( me ).
*  className = meTypeDescr-&gt;get_relative_name( ).

  objName = name.
  translate objName to upper case.

  ixml = cl_ixml=&gt;create( ).
  xmlDoc = ixml-&gt;create_document( ).
  streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CONVERTIXMLDOCTOSTRING" VERSION="1" LANGU="E" DESCRIPT="Converts any IF_IXML_DOCUMENT to a String" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTIXMLDOCTOSTRING" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTIXMLDOCTOSTRING" SCONAME="XMLSTRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method CONVERTIXMLDOCTOSTRING.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data _ixml type ref to if_ixml.
  data _encoding   type ref to if_ixml_encoding.
  data _streamFactory type ref to IF_IXML_STREAM_FACTORY.
  data _outputStream type ref to IF_IXML_OSTREAM.
  data _renderer type ref to IF_IXML_RENDERER.
  data _tempString  type string.
  data _tempStringx type xstring.
  data _printXMLDoc type ref to cl_xml_document.
  data _rc type sysubrc.

  _ixml = cl_ixml=&gt;create( ).
  _encoding = _ixml-&gt;create_encoding(
      byte_order    = if_ixml_encoding=&gt;co_none
      character_set = &apos;utf-8&apos; ).
  _streamFactory = _ixml-&gt;CREATE_STREAM_FACTORY( ).
  _outputStream = _streamFactory-&gt;create_ostream_xstring( _tempStringx ).
  _outputstream-&gt;set_encoding( encoding = _encoding ).
  _renderer = _ixml-&gt;CREATE_RENDERER(
                DOCUMENT = ixmlDocument
                OSTREAM  = _outputStream
              ).
  _renderer-&gt;SET_NORMALIZING( ).
  _rc = _renderer-&gt;render( ).
  create object _printXMLDoc.
  _rc = _printXMLDoc-&gt;parse_string( _tempString ).

  CALL FUNCTION &apos;ECATT_CONV_XSTRING_TO_STRING&apos;
    EXPORTING
      im_xstring  = _tempstringx
      im_encoding = &apos;UTF-8&apos;
    IMPORTING
      ex_string   = _tempstring.

  xmlString = _tempString.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CONVERTSTRINGTOIXMLDOC" VERSION="1" LANGU="E" DESCRIPT="Converts any String into an IF_IXML_DOCUMENT" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTSTRINGTOIXMLDOC" SCONAME="XMLSTRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTSTRINGTOIXMLDOC" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method CONVERTSTRINGTOIXMLDOC.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data ixml type ref to if_ixml.
  data streamFactory type ref to IF_IXML_STREAM_FACTORY.
  data iStream type ref to if_ixml_istream.
  data ixmlParser type ref to if_ixml_parser.
  data xmlDoc type ref to if_ixml_document.

  &quot; Make sure to convert Windows Line Break to Unix as
  &quot; this linebreak is used to get a correct import
  REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=&gt;cr_lf
    IN xmlString WITH cl_abap_char_utilities=&gt;newline.

  ixml = cl_ixml=&gt;create( ).
  xmlDoc = ixml-&gt;create_document( ).
  streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  iStream = streamFactory-&gt;CREATE_ISTREAM_STRING( xmlString ).
  iXMLParser = iXML-&gt;create_parser(  stream_factory = streamFactory
                                     istream        = iStream
                                     document       = xmlDoc ).
  iXMLParser-&gt;parse( ).
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="1" LANGU="E" DESCRIPT="Creates an IF_IXML_DOCUMENT from the OBJNAME Attribute" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATENODEFROMOTR" VERSION="1" LANGU="E" DESCRIPT="Creates an XML node from an OTR object" EXPOSURE="1" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATENODEFROMOTR" SCONAME="OTRGUID" VERSION="1" LANGU="E" DESCRIPT="Key for Logical Object in the OTR" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SOTR_CONC"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATENODEFROMOTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATENODEFROMOTR.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA txtnode TYPE REF TO if_ixml_element.
  DATA rc TYPE sysubrc.

  DATA sotrheader TYPE sotr_head.
  DATA sotrtextline TYPE sotr_text.
  DATA sotrtexttable TYPE TABLE OF sotr_text.

  DATA _ixml TYPE REF TO if_ixml.
  DATA _xmldoc TYPE REF TO if_ixml_document.

  CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
    EXPORTING
      concept        = otrguid
    IMPORTING
      header         = sotrheader
    TABLES
      entries        = sotrtexttable
    EXCEPTIONS
      no_entry_found = 1
      OTHERS         = 2.
  IF sy-subrc &lt;&gt; 0.
    EXIT.
  ENDIF.

  sotrheader-paket = &apos;$TMP&apos;. &quot;change devclass to $TMP for exports

* Create xml doc
*  _ixml = cl_ixml=&gt;create( ).
*  _xmldoc = _ixml-&gt;create_document( ).
*  streamfactory = _ixml-&gt;create_stream_factory( ).

* Create parent node
  rootnode = xmldoc-&gt;create_element( zsaplink_oo=&gt;c_xml_key_sotr ). &quot;OTR object type
  CLEAR sotrheader-concept.                                 &quot;ewH:33
  setattributesfromstructure( node = rootnode structure = sotrheader ).

* Create nodes for texts
  LOOP AT sotrtexttable INTO sotrtextline.
    txtnode = xmldoc-&gt;create_element( zsaplink_oo=&gt;c_xml_key_sotrtext ).
    CLEAR: sotrtextline-concept, sotrtextline-object.       &quot;ewH:33
    setattributesfromstructure(
      node = txtnode structure = sotrtextline ).
    rc = rootnode-&gt;append_child( txtnode ).
  ENDLOOP.

  node = rootnode.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="1" LANGU="E" DESCRIPT="Creates Object on System from IXMLDocument passed in" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="OVERWRITE" VERSION="1" LANGU="E" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Installed object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" VERSION="1" LANGU="E" DESCRIPT="Get an OTR object from XML node" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="CONCEPT" VERSION="1" LANGU="E" DESCRIPT="Key for Logical Object in the OTR" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SOTR_TEXT-CONCEPT"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEOTRFROMNODE.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA txtnode TYPE REF TO if_ixml_element.
  DATA filter TYPE REF TO if_ixml_node_filter.
  DATA iterator TYPE REF TO if_ixml_node_iterator.

  DATA sotrheader TYPE sotr_head.
  DATA sotrtextline TYPE sotr_text.
  DATA sotrtexttable TYPE TABLE OF sotr_text.
  DATA sotrpaket TYPE sotr_pack.

* get OTR header info
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = node
    CHANGING
      structure = sotrheader.

* get OTR text info
  filter = node-&gt;create_filter_name( zsaplink_oo=&gt;c_xml_key_sotrText ).
  iterator = node-&gt;create_iterator_filtered( filter ).
  txtnode ?= iterator-&gt;get_next( ).

  WHILE txtnode IS NOT INITIAL.
    CLEAR sotrtextline.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = txtnode
      CHANGING
        structure = sotrtextline.
    CLEAR: sotrtextline-concept, sotrtextline-object.       &quot;ewH:33
    APPEND sotrtextline TO sotrtexttable.
    txtnode ?= iterator-&gt;get_next( ).
  ENDWHILE.

* ewH:issue 33--&gt; in 6.40 and above, you cannot pass a default concept
*  (otr) guid, so we will always create new
*  CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
*    EXPORTING
*      concept              = sotrHeader-concept
**   IMPORTING
**     HEADER               =
**   TABLES
**     ENTRIES              =
*   EXCEPTIONS
*     NO_ENTRY_FOUND       = 1
*     OTHERS               = 2
*            .
*  IF sy-subrc &lt;&gt; 1.
**   delete OTR if exists already
*    CALL FUNCTION &apos;SOTR_DELETE_CONCEPT&apos;
*      EXPORTING
*        concept                     = sotrHeader-concept
*     EXCEPTIONS
*       NO_AUTHORIZATION            = 1
*       NO_ENTRY_FOUND              = 2. &quot;who cares
**       CONCEPT_USED                = 3
**       NO_MASTER_LANGUAGE          = 4
**       NO_SOURCE_SYSTEM            = 5
**       NO_TADIR_ENTRY              = 6
**       ERROR_IN_CORRECTION         = 7
**       USER_CANCELLED              = 8
**       OTHERS                      = 9
**              .
*    if sy-subrc = 1.
*      raise exception type zcx_saplink
*        exporting textid = zcx_saplink=&gt;not_authorized.
*    endif.
*  ENDIF.


  DATA objecttable TYPE sotr_objects.
  DATA objecttype TYPE LINE OF sotr_objects.
* Retrieve object type of OTR
  CALL FUNCTION &apos;SOTR_OBJECT_GET_OBJECTS&apos;
    EXPORTING
      object_vector    = sotrheader-objid_vec
    IMPORTING
      OBJECTS          = objecttable
    EXCEPTIONS
      object_not_found = 1
      OTHERS           = 2.

  READ TABLE objecttable INTO objecttype INDEX 1.

* create OTR
  sotrpaket-paket = devclass.
  CALL FUNCTION &apos;SOTR_CREATE_CONCEPT&apos;
    EXPORTING
      paket                               = sotrpaket
      crea_lan                            = sotrheader-crea_lan
      alias_name                          = sotrheader-alias_name
*      CATEGORY                            =
      object                              = objecttype
      entries                             = sotrtexttable
*     FLAG_CORRECTION_ENTRY               =
*     IN_UPDATE_TASK                      =
*      CONCEPT_DEFAULT                     = sotrHeader-concept &quot;ewH:33
    IMPORTING
      concept                             = concept         &quot;ewH:33
    EXCEPTIONS
      package_missing                     = 1
      crea_lan_missing                    = 2
      object_missing                      = 3
      paket_does_not_exist                = 4
      alias_already_exist                 = 5
      object_type_not_found               = 6
      langu_missing                       = 7
      identical_context_not_allowed       = 8
      text_too_long                       = 9
      error_in_update                     = 10
      no_master_langu                     = 11
      error_in_concept_id                 = 12
      alias_not_allowed                   = 13
      tadir_entry_creation_failed         = 14
      internal_error                      = 15
      error_in_correction                 = 16
      user_cancelled                      = 17
      no_entry_found                      = 18
      OTHERS                              = 19
            .
  IF sy-subrc &lt;&gt; 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATESTRINGFROMOBJECT" VERSION="1" LANGU="E" DESCRIPT="Creates a String from the OBJNAME Attribute" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATESTRINGFROMOBJECT" SCONAME="STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="CREATESTRINGFROMOBJECT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATESTRINGFROMOBJECT.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEXMLSTRING" VERSION="1" LANGU="E" DESCRIPT="converts data stored in iXML to a string" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDFINAL="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEXMLSTRING" SCONAME="XML" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method CREATEXMLSTRING.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data streamFactory type ref to IF_IXML_STREAM_FACTORY.
data outputStream type ref to IF_IXML_OSTREAM.
data renderer type ref to IF_IXML_RENDERER.
data tempString type string.
data printXMLDoc type ref to cl_xml_document.
data rc type sysubrc.

  streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  outputStream = streamFactory-&gt;CREATE_OSTREAM_CSTRING( tempString ).
  renderer = ixml-&gt;CREATE_RENDERER(
    DOCUMENT = xmlDoc OSTREAM = outputStream ).
  rc = renderer-&gt;render( ).
  create object printXMLDoc.
  rc = printXMLDoc-&gt;parse_string( tempString ).
  xml = tempString.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="1" LANGU="E" DESCRIPT="Delete object" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" VERSION="1" LANGU="E" DESCRIPT="Gets the info of the Object that the XMLDOCUMENT describes" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" SCONAME="OBJTYPENAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" SCONAME="OBJNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD getobjectinfofromixmldoc.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA rootnode TYPE REF TO if_ixml_node.
  DATA rootattr TYPE REF TO if_ixml_named_node_map.
  DATA attrnode TYPE REF TO if_ixml_node.
  DATA nodename TYPE string.

  rootnode ?= ixmldocument-&gt;get_root_element( ).
* Check whether got a valid ixmldocument
  IF rootnode IS NOT BOUND.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;incorrect_file_format.
  ENDIF.

* get object type
  objtypename = rootnode-&gt;get_name( ).
  TRANSLATE objtypename TO UPPER CASE.

* get object name
  rootattr = rootnode-&gt;get_attributes( ).
  attrnode = rootattr-&gt;get_item( 0 ).
  objname = attrnode-&gt;get_value( ).
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="1" LANGU="E" DESCRIPT="Get object type of plugin" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" SCONAME="OBJECTTYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETPLUGINS" VERSION="1" LANGU="E" DESCRIPT="Get installed saplink plugins" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETPLUGINS" SCONAME="OBJECTTABLE" VERSION="1" LANGU="E" DESCRIPT="Installed Plugin Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="TABLE"/>
   <source>method GETPLUGINS.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA classlist TYPE seo_inheritances.
  DATA classline TYPE vseoextend.
  DATA classobject TYPE REF TO zsaplink.
  DATA objectline TYPE t_objecttable.
  DATA tabletypeline TYPE ko105.
  DATA tabletypesin TYPE TABLE OF ko105.
  DATA tabletypesout TYPE tr_object_texts.
  DATA tabletypeoutline TYPE ko100.
  DATA clsname TYPE string.
  DATA objtype TYPE trobjtype.

  REFRESH objecttable.

  SELECT * FROM vseoextend INTO TABLE classlist
    WHERE refclsname like &apos;ZSAPLINK%&apos;
    AND version = &apos;1&apos;.

  LOOP AT classlist INTO classline.
    clsname = classline-clsname.
    TRY.
        CREATE OBJECT classobject
          TYPE
            (clsname)
          EXPORTING
            name      = &apos;foo&apos;.
        objtype = classobject-&gt;getobjecttype( ).
      CATCH cx_root.
        CONTINUE.
    ENDTRY.
    CLEAR tabletypeline.
    REFRESH tabletypesin.

    tabletypeline-object = objtype.
    APPEND tabletypeline TO tabletypesin.

    CALL FUNCTION &apos;TRINT_OBJECT_TABLE&apos;
      TABLES
        tt_types_in  = tabletypesin
        tt_types_out = tabletypesout.

    LOOP AT tabletypesout INTO tabletypeoutline.
      objectline-classname = clsname.
      MOVE-CORRESPONDING tabletypeoutline TO objectline.
      APPEND objectline TO objecttable.
    ENDLOOP.
  ENDLOOP.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Updates a structure with node attributes" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="PRESERVEVERSION" VERSION="1" LANGU="E" DESCRIPT="Preserve version field" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method GETSTRUCTUREFROMATTRIBUTES.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data attributeList type ref to IF_IXML_NAMED_NODE_MAP.
data nodeIterator type ref to IF_IXML_NODE_ITERATOR.
data attributeNode type ref to if_ixml_node.
data value type string.
data name type string.
field-symbols &lt;value&gt; type any.

  clear structure.
  attributeList = node-&gt;GET_ATTRIBUTES( ).
  nodeIterator = attributeList-&gt;create_iterator( ).
  attributeNode = nodeIterator-&gt;get_next( ).
  while attributeNode is not initial.
    name = attributeNode-&gt;get_name( ).
    if name = &apos;VERSION&apos; and preserveVersion is initial. &quot;ewh:issue 45
*    if name = &apos;VERSION&apos;.
      value = &apos;0&apos;.
    else.
      value = attributeNode-&gt;get_value( ).
    endif.
    assign component name of structure structure to &lt;value&gt;.
    if sy-subrc = 0.
      &lt;value&gt; = value.
    endif.
    attributeNode = nodeIterator-&gt;get_next( ).
  endwhile.















*    .-&quot;-.
*  .&apos;=^=^=&apos;.
* /=^=^=^=^=\
*:^=SAPLINK=^;
*|^ EASTER  ^|
*:^=^EGG^=^=^:
* \=^=^=^=^=/
*  `.=^=^=.&apos;
*    `~~~`
* Don&apos;t like the way we did something?
* Help us fix it!  Tell us what you think!
* http://saplink.org
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GET_VERSION_INFO" VERSION="1" LANGU="E" DESCRIPT="Get version info for this class - redefinable by child class" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GET_VERSION_INFO" SCONAME="RS_VERSION_INFO" VERSION="1" LANGU="E" DESCRIPT="Version informatino" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="GTS_VERSION_INFO"/>
   <source>METHOD GET_VERSION_INFO.

*--------------------------------------------------------------------*
* Please use the following 6 lines of code when versioning a
* SAPLINK-Plugin.  See documentation of Type GTS_VERSION_INFO
* what should be put here
*--------------------------------------------------------------------*
  rs_version_info-zsaplink_plugin_major_version = 0.  &quot; Default for all child classes, that have not been updated to return a version info.
  rs_version_info-zsaplink_plugin_minor_version = 0.  &quot; Default for all child classes, that have not been updated to return a version info.
  rs_version_info-zsaplink_plugin_build_version = 0.  &quot; Default for all child classes, that have not been updated to return a version info.

  rs_version_info-zsaplink_plugin_info1         = &apos;&apos;. &quot; Sufficient to set this the first time a child class is being updated
  rs_version_info-zsaplink_plugin_info2         = &apos;&apos;. &quot; Sufficient to set this the first time a child class is being updated
  rs_version_info-zsaplink_plugin_info3         = &apos;&apos;. &quot; Sufficient to set this the first time a child class is being updated
  rs_version_info-zsaplink_plugin_info4         = &apos;&apos;. &quot; Sufficient to set this the first time a child class is being updated
  rs_version_info-zsaplink_plugin_info5         = &apos;&apos;. &quot; Sufficient to set this the first time a child class is being updated

* Hint - see redefinition of this class in ZSAPLINK_CLASS how information may be set
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GET_VERSION_INFO_STATIC" VERSION="1" LANGU="E" DESCRIPT="Get version info for this class" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GET_VERSION_INFO_STATIC" SCONAME="IV_CLASSNAME" VERSION="1" LANGU="E" DESCRIPT="Name of class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GET_VERSION_INFO_STATIC" SCONAME="RS_VERSION_INFO" VERSION="1" LANGU="E" DESCRIPT="Version informatino" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="GTS_VERSION_INFO"/>
   <source>METHOD get_version_info_static.

  DATA: lo_zsaplink TYPE REF TO zsaplink.

  TRY.
      CREATE OBJECT lo_zsaplink TYPE (iv_classname)
         EXPORTING
           name = &apos;Not needed for versio info&apos;.
      rs_version_info = lo_zsaplink-&gt;get_version_info( ).
    CATCH cx_root.  &quot; Don&apos;t pass version info for unknown or abstract classes
  ENDTRY.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="SETATTRIBUTESFROMSTRUCTURE" VERSION="1" LANGU="E" DESCRIPT="Creates an XML Attribute list from any structure" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="SETATTRIBUTESFROMSTRUCTURE" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="SETATTRIBUTESFROMSTRUCTURE" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method SETATTRIBUTESFROMSTRUCTURE.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data int type i.
  int = int.
  data structDescr type ref to cl_abap_structDescr.
  data aComponent type abap_compdescr.
  field-symbols &lt;fieldValue&gt; type any.
  data rc type sysubrc.
  data sName type string.
  data sValue type string.

  structDescr ?= cl_abap_structDescr=&gt;describe_by_data( structure ).
  loop at structDescr-&gt;components into aComponent.
    assign component aComponent-name of structure
      structure to &lt;fieldValue&gt;.
    if sy-subrc = 0.
      sName = aComponent-name.
*      sValue = &lt;fieldValue&gt;.
*     for certain attributes, set to a standard for exporting
      case sName.
*        when &apos;VERSION&apos;. &quot;version should always export as inactive
*          sValue = &apos;0&apos;. &quot;commented by ewH: issue 45
        when &apos;DEVCLASS&apos;. &quot;development class should always be $TMP
          sValue = &apos;$TMP&apos;.
        &quot; Developer, Date and Time Metadata has to be removed to
        &quot; not clutter diffs
        &quot;
        &quot; Meta Attributes for DDIC Types
        when &apos;AS4USER&apos;.
          clear sValue.
        when &apos;AS4DATE&apos;.
          clear sValue.
        when &apos;AS4TIME&apos;.
          clear sValue.
        &quot; Meta Attributes for PROG
        when &apos;CNAM&apos;.
          clear sValue.
        when &apos;CDAT&apos;.
          clear sValue.
        when &apos;UNAM&apos;.
          clear sValue.
        when &apos;UDAT&apos;.
          clear sValue.
        when &apos;VERN&apos;.
          clear sValue.
        when &apos;SDATE&apos;.
          clear sValue.
        when &apos;STIME&apos;.
          clear sValue.
        when &apos;IDATE&apos;.
          clear sValue.
        when &apos;ITIME&apos;.
          clear sValue.
        &quot; Meta Attributes for CLAS
        when &apos;AUTHOR&apos;.
          clear sValue.
        when &apos;CREATEDON&apos;.
          clear sValue.
        when &apos;CHANGEDBY&apos;.
          clear sValue.
        when &apos;CHANGEDON&apos;.
          clear sValue.
        when &apos;CHANGETIME&apos;.
          clear sValue.
        when &apos;CHGDANYON&apos;.
          clear sValue.
        when &apos;R3RELEASE&apos;.
          clear sValue.
        when &apos;UUID&apos;.
          clear sValue.
        &quot; SOTR
        when &apos;CREA_NAME&apos;.
          clear sValue.
        when &apos;CHAN_NAME&apos;.
          clear sValue.
        when &apos;CREA_TSTUT&apos;.
          clear sValue.
        when &apos;CHAN_TSTUT&apos;.
          clear sValue.
        &quot; MSAG
        when &apos;LASTUSER&apos;.
          clear sValue.
        when &apos;LDATE&apos;.
          clear sValue.
        when &apos;LTIME&apos;.
          clear sValue.
        when &apos;DGEN&apos;.
          clear sValue.
        when &apos;TGEN&apos;.
          clear sValue.
        when &apos;GENDATE&apos;.
          clear sValue.
        when &apos;GENTIME&apos;.
          clear sValue.
        &quot; BSP
        when &apos;IMPLCLASS&apos;.
          clear sValue.
        when others.
          sValue = &lt;fieldValue&gt;.
      endcase.
      if sValue is not initial.
        rc = Node-&gt;set_attribute( name = sName value = sValue ).
      endif.
    else.
* WHAT?&gt;!??
    endif.
  endloop.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="UPLOADXML" VERSION="1" LANGU="E" DESCRIPT="Upload XML" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDFINAL="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="UPLOADXML" SCONAME="XMLDATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method UPLOADXML.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data iStream type ref to if_ixml_istream.
data ixmlParser type ref to if_ixml_parser.

  iStream = streamFactory-&gt;CREATE_ISTREAM_STRING( xmlData ).
  iXMLParser = iXML-&gt;create_parser(  stream_factory = streamFactory
                                     istream        = iStream
                                     document       = XMLdoc ).
  iXMLParser-&gt;parse( ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="VALUEHELP" VERSION="1" LANGU="E" DESCRIPT="Get Value help..default is DDIC types...over Wright for BI" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="VALUEHELP" SCONAME="I_OBJTYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="VALUEHELP" SCONAME="E_OBJNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method VALUEHELP.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
DATA l_object_type type  euobj-id.
data objname(40) type c.

l_object_type = i_objType.


  CALL FUNCTION &apos;REPOSITORY_INFO_SYSTEM_F4&apos;
     EXPORTING
       object_type           = l_object_type
       object_name           = objname
       suppress_selection    = &apos;X&apos;
       use_alv_grid          = &apos;&apos;
       without_personal_list = &apos;&apos;
     IMPORTING
       object_name_selected  = objname
     EXCEPTIONS
       cancel                = 1.

  e_objname = objname.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_NUGGET" VERSION="1" LANGU="E" DESCRIPT="SAPlink Nugget" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature
TYPES: BEGIN OF ts_objects,
         nugget_level TYPE int4,
         sort         TYPE sy-tabix,
         xmldocument  TYPE REF TO if_ixml_document,
       END OF ts_objects,
       tt_objects TYPE SORTED TABLE OF ts_objects WITH UNIQUE KEY nugget_level sort.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes</localTestClasses>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ITERATOR" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_NODE_ITERATOR" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_NODE_ITERATOR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="IXML" VERSION="1" LANGU="E" DESCRIPT="IF_IXML" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="NUGGNAME" VERSION="1" LANGU="E" DESCRIPT="Nugget Name" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="STREAMFACTORY" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_STREAM_FACTORY" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_STREAM_FACTORY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="WT_OBJECTS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TT_OBJECTS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="W_INDEX" VERSION="1" LANGU="E" DESCRIPT="Table index of WT_OBJECTS" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SY-TABIX" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="XMLDATA" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="XMLDOC" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="OBJNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="XMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" PAROPTIONL="X"/>
   <exception CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method ADDOBJECTTONUGGET.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  types: begin of t_objectTable,
           classname type string,
           object type ko100-object,
           text type ko100-text,
         end of t_objectTable.
  data rootNode type ref to if_ixml_element.
  data saplink type ref to zsaplink.
  data objectTable type table of t_objectTable.
  data objectLine type t_objectTable.
  data ixmlDocument type ref to if_ixml_document.
  data rval type i.
  data objElement type ref to if_ixml_element.

  rootNode = xmlDoc-&gt;GET_ROOT_ELEMENT( ).

* create new object
  if xmlDocument is initial.
    call method zsaplink=&gt;getplugins( changing objectTable = objectTable ).

    read table objectTable into objectLine with key object = ObjType.
    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
            exporting textid = zcx_saplink=&gt;no_plugin.
    endif.
    create object saplink type (objectLine-classname) exporting name =
    objName.
    ixmlDocument = saplink-&gt;CREATEIXMLDOCFROMOBJECT( ).
  else.
    ixmlDocument = xmlDocument.
  endif.
  objElement = ixmlDocument-&gt;get_root_element( ).
* Search and delete same object(s) in nugget
  data: docFilter   type ref to if_ixml_node_filter,
        docIterator type ref to if_ixml_node_iterator,
        currentNode type ref to if_ixml_node,
        rootAttr    type ref to IF_IXML_NAMED_NODE_MAP,
        AttrNode    type ref to IF_IXML_NODE,
        nodeName    type string.

* create a filter to traverse the nugget by object type like CLAS or PROG
  docFilter = xmlDoc-&gt;create_filter_name_ns( objType ).
* apply the filter to the iterator
  docIterator = xmlDoc-&gt;create_iterator_filtered( docFilter ).
* get the first object of that type in the nugget
  currentNode = docIterator-&gt;get_next( ).

*  if this node is not blank proceed to check the attributes
  while currentNode is not initial.
*   get object name
    rootAttr = currentNode-&gt;GET_ATTRIBUTES( ).
    AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
    nodeName = AttrNode-&gt;GET_VALUE( ).
*   if the name of the node is the same as the passed parameter, delete the node
    if nodeName = objname.
      currentNode-&gt;remove_node( ).
      rval = sy-subrc.
*      exit. &quot; let&apos;s remove duplicate entries as well (otherwise we could replace_child as well)
    endif.
    currentNode = docIterator-&gt;get_next( ).
  endwhile.

* append new object to nugget
* get rood node of nugget
  rootNode = xmlDoc-&gt;GET_ROOT_ELEMENT( ).
* append new object to nugget
  rval = rootNode-&gt;append_Child( objElement ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" SCONAME="OBJNAME" VERSION="1" LANGU="E" DESCRIPT="object name to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" SCONAME="OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="object type to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" SCONAME="RETVAL" VERSION="1" LANGU="E" DESCRIPT="Return Value, Return Value After ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-SUBRC"/>
   <source>method CHECKOBJECTEXISTS.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data: docFilter   type ref to if_ixml_node_filter,
        docIterator type ref to if_ixml_node_iterator,
        currentNode type ref to if_ixml_node,
        rootAttr    type ref to IF_IXML_NAMED_NODE_MAP,
        AttrNode    type ref to IF_IXML_NODE,

        nodeName    type string,
        existsFlag  type flag.

* create a filter to traverse the nugget by object type like CLAS or PROG
  docFilter = xmlDoc-&gt;create_filter_name_ns( objType ).
* apply the filter to the iterator
  docIterator = xmlDoc-&gt;create_iterator_filtered( docFilter ).
* get the first object of that type in the nugget
  currentNode = docIterator-&gt;get_next( ).

*  if this node is not blank proceed to check the attributes
  while currentNode is not initial.
* get object name
    rootAttr = currentNode-&gt;GET_ATTRIBUTES( ).
    AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
    nodeName = AttrNode-&gt;GET_VALUE( ).
*   if the name of the node is the same as the passed parameter, set the flag
    if nodeName = objname.
      existsFlag = &apos;X&apos;.
    endif.
    currentNode = docIterator-&gt;get_next( ).
  endwhile.
  if existsFlag = &apos;X&apos;.
    retval = 0.
  else.
    retval = 4.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CONSTRUCTOR" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CONSTRUCTOR" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" PAROPTIONL="X"/>
   <exception CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CONSTRUCTOR" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="2" EDITORDER="1 "/>
   <source>METHOD constructor.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA rval TYPE i.
*data xmlDoc type ref to if_ixml_document.

  IF name IS NOT INITIAL.
    nuggname = name.
    ixml = cl_ixml=&gt;create( ).
    xmldoc = ixml-&gt;create_document( ).
*  may need this from create empty nugget
*dan this was commented out, any ideas why??  Uncommented for Zake.
    rootnode = xmldoc-&gt;create_element( &apos;nugget&apos; ).
    rval = rootnode-&gt;set_attribute( name = &apos;name&apos; value = nuggname ).
    rval = xmldoc-&gt;append_child( rootnode ).

    streamfactory = ixml-&gt;create_stream_factory( ).
  ELSEIF ixmldocument IS NOT INITIAL.
    TRY.
        ixml = cl_ixml=&gt;create( ).
        xmldoc = ixmldocument.
        rootnode = xmldoc-&gt;get_root_element( ).
        nuggname = rootnode-&gt;get_attribute( &apos;name&apos; ).
        streamfactory = ixml-&gt;create_stream_factory( ).
      CATCH cx_root. &quot; May happen if someone passed a file that is no nugget
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDTRY.
  ELSE.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEEMPTYXML" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEEMPTYXML" SCONAME="NUGGETNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEEMPTYXML" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method CREATEEMPTYXML.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data ixml type ref to if_IXML.
data rootNode type ref to if_ixml_element.
data rval type i.
data xmlDoc type ref to if_ixml_document.

  ixml = cl_ixml=&gt;create( ).
  xmlDoc = ixml-&gt;create_document( ).
  rootNode = xmlDoc-&gt;create_element( &apos;nugget&apos; ).
  rval = rootNode-&gt;SET_ATTRIBUTE( name = &apos;name&apos; value = nuggetName ).
  rval = xmlDoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEIXMLDOCFROMNUGGET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEIXMLDOCFROMNUGGET" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method CREATEIXMLDOCFROMNUGGET.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" SCONAME="OBJNAME" VERSION="1" LANGU="E" DESCRIPT="object name to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" SCONAME="OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="object type to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" SCONAME="RETVAL" VERSION="1" LANGU="E" DESCRIPT="Return Value, Return Value After ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-SUBRC"/>
   <source>method DELETEOBJECTFROMNUGGET.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data: docFilter   type ref to if_ixml_node_filter,
        docIterator type ref to if_ixml_node_iterator,
        currentNode type ref to if_ixml_node,
        rootAttr    type ref to IF_IXML_NAMED_NODE_MAP,
        AttrNode    type ref to IF_IXML_NODE,

        nodeName    type string.

* create a filter to traverse the nugget by object type like CLAS or PROG
  docFilter = xmlDoc-&gt;create_filter_name_ns( objType ).
* apply the filter to the iterator
  docIterator = xmlDoc-&gt;create_iterator_filtered( docFilter ).
* get the first object of that type in the nugget
  currentNode = docIterator-&gt;get_next( ).

*  if this node is not blank proceed to check the attributes
  while currentNode is not initial.
* get object name
    rootAttr = currentNode-&gt;GET_ATTRIBUTES( ).
    AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
    nodeName = AttrNode-&gt;GET_VALUE( ).
*   if the name of the node is the same as the passed parameter, delete the node
    if nodeName = objname.
      currentNode-&gt;remove_node( ).
      retVal = sy-subrc.
      return.
    endif.
    currentNode = docIterator-&gt;get_next( ).
  endwhile.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNEXTOBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNEXTOBJECT" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method GETNEXTOBJECT.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA anode TYPE REF TO if_ixml_node.
  DATA stemp TYPE string.
  DATA rootnode TYPE REF TO if_ixml_node.
  DATA namefilter TYPE REF TO if_ixml_node_filter.
  DATA parentfilter TYPE REF TO if_ixml_node_filter.
  DATA currentnode TYPE REF TO if_ixml_node.
  DATA newnode TYPE REF TO if_ixml_node.
  DATA: rval TYPE i,
        lo_object TYPE REF TO  zsaplink,
        l_tabix TYPE i,
        ls_objects TYPE ts_objects.

  IF wt_objects IS INITIAL.
    IF iterator IS  INITIAL.
      namefilter = xmldoc-&gt;create_filter_name_ns( name = &apos;nugget&apos; ).
      parentfilter = xmldoc-&gt;create_filter_parent( namefilter ).
      iterator = xmldoc-&gt;create_iterator_filtered( parentfilter ).
    ENDIF.
    currentnode ?= iterator-&gt;get_next( ).

    WHILE currentnode IS NOT INITIAL.
      add 1 to l_tabix.
      ixmldocument = ixml-&gt;create_document( ).
      newnode = currentnode-&gt;clone( ).
      rval = ixmldocument-&gt;append_child( newnode ).
      CLEAR ls_objects.

      zsaplink=&gt;checkobject(
        EXPORTING
          i_ixmldocument = ixmldocument
        IMPORTING
*                   e_objtype      =
*                   e_objname      =
*                   e_pluginexists =
*                   e_objectexists =
           e_targetobject = lo_object
             ).
      IF lo_object IS BOUND.
        ls_objects-nugget_level = lo_object-&gt;nugget_level.
      ELSE.
* We will not handle this here
        ls_objects-nugget_level = 0.
      ENDIF.
      ls_objects-sort = l_tabix.
      ls_objects-xmldocument = ixmldocument.
      INSERT ls_objects INTO TABLE wt_objects.
      currentnode ?= iterator-&gt;get_next( ).
    ENDWHILE.
  ENDIF.
  ADD 1 TO w_index.
  READ TABLE wt_objects INTO ls_objects INDEX w_index.

  IF sy-subrc = 0.
    ixmldocument = ls_objects-xmldocument.
  ELSE.
    CLEAR ixmldocument.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNUGGETINFO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNUGGETINFO" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNUGGETINFO" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNUGGETINFO" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD getnuggetinfo.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA rootnode TYPE REF TO if_ixml_element.
  TRY.
      rootnode = ixmldocument-&gt;get_root_element( ).
      name = rootnode-&gt;get_attribute( &apos;name&apos; ).
    CATCH cx_root. &quot; May happen if someone passed a file that is no nugget
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDTRY.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="RESET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method RESET.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  if iterator is not initial.
    refresh: wt_objects.
    clear w_index.
    iterator-&gt;reset( ).
  endif.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_OO" VERSION="1" LANGU="E" DESCRIPT="ZSAPLINK - OO class for CLAS and INTF plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_OO" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_OO" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_OO" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_OO" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_OO" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_OO" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_ALIAS_METHOD" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;aliasMethod&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_CLSDEFERRD" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;typeClasDef&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_FORWARDDECLARATION" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;forwardDeclaration&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_FRIENDS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;friends&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_INHERITANCE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;inheritance&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_INTDEFERRD" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;typeIntfDef&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_SOTR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;sotr&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_SOTRTEXT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;sotrText&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_OO" CMPNAME="C_XML_KEY_TYPEPUSAGE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;typeUsage&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_OO" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1"/>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_ALIAS_METHOD" VERSION="1" LANGU="E" DESCRIPT="Create alias for method" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_ALIAS_METHOD" SCONAME="XT_ALIASES_METHOD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_ALIASES_R"/>
   <source>method CREATE_ALIAS_METHOD.
  DATA: filter TYPE REF TO if_ixml_node_filter,
        iterator TYPE REF TO if_ixml_node_iterator,
        node TYPE REF TO if_ixml_element.

  DATA: ls_alias_method  LIKE LINE OF xt_aliases_method.


  filter = xmldoc-&gt;create_filter_name( c_xml_key_alias_method ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_alias_method.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_alias_method.
    INSERT ls_alias_method INTO TABLE xt_aliases_method.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_CLSDEFERRD" VERSION="1" LANGU="E" DESCRIPT="Create class deferred" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_CLSDEFERRD" SCONAME="XT_CLSDEFERRDS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_CLSDEFERRDS_R"/>
   <source>method CREATE_CLSDEFERRD.
  DATA: filter TYPE REF TO if_ixml_node_filter,
        iterator TYPE REF TO if_ixml_node_iterator,
        node TYPE REF TO if_ixml_element.

  DATA: ls_clsdeferrd  LIKE LINE OF xt_clsdeferrds.


  filter   = xmldoc-&gt;create_filter_name( c_xml_key_clsdeferrd ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_clsdeferrd.
    APPEND ls_clsdeferrd TO xt_clsdeferrds.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_INTDEFERRD" VERSION="1" LANGU="E" DESCRIPT="Create interface deferred" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_INTDEFERRD" SCONAME="XT_INTDEFERRDS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_INTDEFERRDS_R"/>
   <source>method CREATE_INTDEFERRD.
  DATA: filter TYPE REF TO if_ixml_node_filter,
        iterator TYPE REF TO if_ixml_node_iterator,
        node TYPE REF TO if_ixml_element.

  DATA: ls_intdeferrd  LIKE LINE OF xt_intdeferrds.


  filter   = xmldoc-&gt;create_filter_name( c_xml_key_intdeferrd ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_intdeferrd.
    APPEND ls_intdeferrd TO xt_intdeferrds.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_OTR" VERSION="1" LANGU="E" DESCRIPT="Get an OTR object from XML node" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_OTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_OTR" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_OTR" SCONAME="CONCEPT" VERSION="1" LANGU="E" DESCRIPT="Key for Logical Object in the OTR" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SOTR_TEXT-CONCEPT"/>
   <exception CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_OTR" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATE_OTR.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA txtnode TYPE REF TO if_ixml_element.
  DATA filter TYPE REF TO if_ixml_node_filter.
  DATA iterator TYPE REF TO if_ixml_node_iterator.

  DATA sotrheader TYPE sotr_head.
  DATA sotrtextline TYPE sotr_text.
  DATA sotrtexttable TYPE TABLE OF sotr_text.
  DATA sotrpaket TYPE sotr_pack.

* get OTR header info
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = node
    CHANGING
      structure = sotrheader.

* get OTR text info
  filter = node-&gt;create_filter_name( c_xml_key_sotrText ).
  iterator = node-&gt;create_iterator_filtered( filter ).
  txtnode ?= iterator-&gt;get_next( ).

  WHILE txtnode IS NOT INITIAL.
    CLEAR sotrtextline.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = txtnode
      CHANGING
        structure = sotrtextline.
    CLEAR: sotrtextline-concept, sotrtextline-object.       &quot;ewH:33
    APPEND sotrtextline TO sotrtexttable.
    txtnode ?= iterator-&gt;get_next( ).
  ENDWHILE.

* ewH:issue 33--&gt; in 6.40 and above, you cannot pass a default concept
*  (otr) guid, so we will always create new
*  CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
*    EXPORTING
*      concept              = sotrHeader-concept
**   IMPORTING
**     HEADER               =
**   TABLES
**     ENTRIES              =
*   EXCEPTIONS
*     NO_ENTRY_FOUND       = 1
*     OTHERS               = 2
*            .
*  IF sy-subrc &lt;&gt; 1.
**   delete OTR if exists already
*    CALL FUNCTION &apos;SOTR_DELETE_CONCEPT&apos;
*      EXPORTING
*        concept                     = sotrHeader-concept
*     EXCEPTIONS
*       NO_AUTHORIZATION            = 1
*       NO_ENTRY_FOUND              = 2. &quot;who cares
**       CONCEPT_USED                = 3
**       NO_MASTER_LANGUAGE          = 4
**       NO_SOURCE_SYSTEM            = 5
**       NO_TADIR_ENTRY              = 6
**       ERROR_IN_CORRECTION         = 7
**       USER_CANCELLED              = 8
**       OTHERS                      = 9
**              .
*    if sy-subrc = 1.
*      raise exception type zcx_saplink
*        exporting textid = zcx_saplink=&gt;not_authorized.
*    endif.
*  ENDIF.


  DATA objecttable TYPE sotr_objects.
  DATA objecttype TYPE LINE OF sotr_objects.
* Retrieve object type of OTR
  CALL FUNCTION &apos;SOTR_OBJECT_GET_OBJECTS&apos;
    EXPORTING
      object_vector    = sotrheader-objid_vec
    IMPORTING
      OBJECTS          = objecttable
    EXCEPTIONS
      object_not_found = 1
      OTHERS           = 2.

  READ TABLE objecttable INTO objecttype INDEX 1.

* create OTR
  sotrpaket-paket = devclass.
  CALL FUNCTION &apos;SOTR_CREATE_CONCEPT&apos;
    EXPORTING
      paket                               = sotrpaket
      crea_lan                            = sotrheader-crea_lan
      alias_name                          = sotrheader-alias_name
*      CATEGORY                            =
      object                              = objecttype
      entries                             = sotrtexttable
*     FLAG_CORRECTION_ENTRY               =
*     IN_UPDATE_TASK                      =
*      CONCEPT_DEFAULT                     = sotrHeader-concept &quot;ewH:33
    IMPORTING
      concept                             = concept         &quot;ewH:33
    EXCEPTIONS
      package_missing                     = 1
      crea_lan_missing                    = 2
      object_missing                      = 3
      paket_does_not_exist                = 4
      alias_already_exist                 = 5
      object_type_not_found               = 6
      langu_missing                       = 7
      identical_context_not_allowed       = 8
      text_too_long                       = 9
      error_in_update                     = 10
      no_master_langu                     = 11
      error_in_concept_id                 = 12
      alias_not_allowed                   = 13
      tadir_entry_creation_failed         = 14
      internal_error                      = 15
      error_in_correction                 = 16
      user_cancelled                      = 17
      no_entry_found                      = 18
      OTHERS                              = 19
            .
  IF sy-subrc &lt;&gt; 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_TYPEPUSAGE" VERSION="1" LANGU="E" DESCRIPT="Create type pool usage" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="CREATE_TYPEPUSAGE" SCONAME="XT_TYPEPUSAGES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_TYPEPUSAGES_R"/>
   <source>method CREATE_TYPEPUSAGE.
  DATA: filter   TYPE REF TO if_ixml_node_filter,
        iterator TYPE REF TO if_ixml_node_iterator,
        node     TYPE REF TO if_ixml_element,
        source   TYPE string.


  DATA: ls_typepusage  LIKE LINE OF xt_typepusages.

*rrq comments Forward nodes are created in an old version of the
*create XML from object.  In that node, the only attribute set
*is the &quot;TypeGroup&quot;.  All other attributes are hard coded on the
*create Object from XML .  To fix this and make it transparent to
*users, &quot;forwaredDeclaration&quot; nodes will be supported, and a new
*node will be added.
*if it is an old version XML document, forwardDeclarations nodes
*if it is a new version XML document, typeUsages nodes

  filter   = xmldoc-&gt;create_filter_name( c_xml_key_typepusage ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_typepusage.
    APPEND ls_typepusage TO xt_typepusages.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* only check forwardDeclaration if typeUsages does not exist
* later version this will be removed
  IF xt_typepusages IS INITIAL.
    filter = xmldoc-&gt;create_filter_name( c_xml_key_forwarddeclaration ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).

    WHILE node IS NOT INITIAL.
      CLEAR ls_typepusage.
      source = node-&gt;get_value( ).
      ls_typepusage-clsname = objname.
      ls_typepusage-version = &apos;0&apos;.
      ls_typepusage-tputype = &apos;0&apos;.
      ls_typepusage-explicit =  &apos;X&apos;.
      ls_typepusage-implicit = &apos;&apos;.
      ls_typepusage-typegroup = source.
      APPEND ls_typepusage TO xt_typepusages.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="GET_ALIAS_METHOD" VERSION="1" LANGU="E" DESCRIPT="Get alias for method" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="GET_ALIAS_METHOD" SCONAME="IT_METHODS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_METHDESCR_TAB"/>
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="GET_ALIAS_METHOD" SCONAME="XO_ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_ALIAS_METHOD.
  DATA lo_alias  TYPE REF TO if_ixml_element.
  DATA ls_alias  TYPE seoaliases.
  DATA: l_rc     TYPE sy-subrc,
        ls_method LIKE LINE OF it_methods,
        ls_clsmethkey TYPE seocmpkey.

  LOOP AT it_methods INTO ls_method.
    ls_clsmethkey-clsname = objname.
    ls_clsmethkey-cmpname = ls_method-name.
    CLEAR ls_alias.
    CALL FUNCTION &apos;SEO_ALIAS_GET&apos;
     EXPORTING
       cmpkey             = ls_clsmethkey
*       VERSION            = SEOC_VERSION_INACTIVE
     IMPORTING
       alias              = ls_alias
     EXCEPTIONS
       not_existing       = 1
       deleted            = 2
       OTHERS             = 3
             .
    IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ELSE.
      lo_alias = xmldoc-&gt;create_element( c_xml_key_alias_method ).
      setattributesfromstructure( node      = lo_alias
                                  structure = ls_alias ).
      l_rc = xo_rootnode-&gt;append_child( lo_alias ).
    ENDIF.
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="GET_CLSDEFERRD" VERSION="1" LANGU="E" DESCRIPT="Get class deferred" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="GET_CLSDEFERRD" SCONAME="XO_ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_CLSDEFERRD.
  DATA: lt_clsdeferrds     TYPE seot_clsdeferrds_r,
        lo_clsdeferrds     TYPE REF TO if_ixml_element,
        ls_clsdeferrd      TYPE seot_typepusage_r.

  DATA: l_rc               TYPE sy-subrc,
        ls_classkey        TYPE seoclskey.

  ls_classkey-clsname = objname.

  CALL FUNCTION &apos;SEO_CLSDEFERRD_READ_ALL&apos;
    EXPORTING
      cifkey            = ls_classkey
      version           = seoc_version_active
    IMPORTING
      CLASSDEFERREDS    = lt_clsdeferrds
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.

  LOOP AT lt_clsdeferrds INTO ls_clsdeferrd.
    lo_clsdeferrds = xmldoc-&gt;create_element( c_xml_key_clsdeferrd ).
    setattributesfromstructure( node      = lo_clsdeferrds
                                structure = ls_clsdeferrd ).
    l_rc = xo_rootnode-&gt;append_child( lo_clsdeferrds ).
  ENDLOOP.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="GET_INTDEFERRD" VERSION="1" LANGU="E" DESCRIPT="Get interface deferred" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="GET_INTDEFERRD" SCONAME="XO_ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_INTDEFERRD.
  DATA: lt_intdeferrds     TYPE seot_intdeferrds_r,
        lo_intdeferrds     TYPE REF TO if_ixml_element,
        ls_intdeferrd      TYPE seot_intdeferrd_r.

  DATA: l_rc               TYPE sy-subrc,
        ls_classkey        TYPE seoclskey.

  ls_classkey-clsname = objname.

  CALL FUNCTION &apos;SEO_INTDEFERRD_READ_ALL&apos;
    EXPORTING
      cifkey             = ls_classkey
      version            = seoc_version_active
    IMPORTING
      interfacedeferreds = lt_intdeferrds
    EXCEPTIONS
      clif_not_existing  = 1
      OTHERS             = 2.

  LOOP AT lt_intdeferrds INTO ls_intdeferrd.
    lo_intdeferrds = xmldoc-&gt;create_element( c_xml_key_intdeferrd ).
    setattributesfromstructure( node      = lo_intdeferrds
                                structure = ls_intdeferrd ).
    l_rc = xo_rootnode-&gt;append_child( lo_intdeferrds ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="GET_OTR" VERSION="1" LANGU="E" DESCRIPT="Creates an XML node from an OTR object" EXPOSURE="1" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="GET_OTR" SCONAME="OTRGUID" VERSION="1" LANGU="E" DESCRIPT="Key for Logical Object in the OTR" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SOTR_CONC"/>
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="GET_OTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_OTR.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA txtnode TYPE REF TO if_ixml_element.
  DATA rc TYPE sysubrc.

  DATA sotrheader TYPE sotr_head.
  DATA sotrtextline TYPE sotr_text.
  DATA sotrtexttable TYPE TABLE OF sotr_text.

  DATA _ixml TYPE REF TO if_ixml.
  DATA _xmldoc TYPE REF TO if_ixml_document.

  CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
    EXPORTING
      concept        = otrguid
    IMPORTING
      header         = sotrheader
    TABLES
      entries        = sotrtexttable
    EXCEPTIONS
      no_entry_found = 1
      OTHERS         = 2.
  IF sy-subrc &lt;&gt; 0.
    EXIT.
  ENDIF.

  sotrheader-paket = &apos;$TMP&apos;. &quot;change devclass to $TMP for exports

* Create xml doc
*  _ixml = cl_ixml=&gt;create( ).
*  _xmldoc = _ixml-&gt;create_document( ).
*  streamfactory = _ixml-&gt;create_stream_factory( ).

* Create parent node
  rootnode = xmldoc-&gt;create_element( c_xml_key_sotr ). &quot;OTR object type
  CLEAR sotrheader-concept.                                 &quot;ewH:33
  setattributesfromstructure( node = rootnode structure = sotrheader ).

* Create nodes for texts
  LOOP AT sotrtexttable INTO sotrtextline.
    txtnode = xmldoc-&gt;create_element( c_xml_key_sotrtext ).
    CLEAR: sotrtextline-concept, sotrtextline-object.       &quot;ewH:33
    setattributesfromstructure(
      node = txtnode structure = sotrtextline ).
    rc = rootnode-&gt;append_child( txtnode ).
  ENDLOOP.

  node = rootnode.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="GET_TYPEPUSAGE" VERSION="1" LANGU="E" DESCRIPT="Get type pool usage" EXPOSURE="1" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_OO" CMPNAME="GET_TYPEPUSAGE" SCONAME="XO_ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TYPEPUSAGE.
  DATA: lt_typepusages     TYPE seot_typepusages_r,
        lo_typepusages     TYPE REF TO if_ixml_element,
        ls_typepusage      TYPE seot_typepusage_r.

  DATA: l_rc               TYPE sy-subrc,
        l_string           TYPE string,
        ls_classkey        TYPE seoclskey.

  ls_classkey-clsname = objname.

  CALL FUNCTION &apos;SEO_TYPEPUSAGE_READ_ALL&apos;
    EXPORTING
      cifkey            = ls_classkey
      version           = seoc_version_active
    IMPORTING
      typepusages       = lt_typepusages
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.

  LOOP AT lt_typepusages INTO ls_typepusage.
    lo_typepusages = xmldoc-&gt;create_element( c_xml_key_typepusage ).
    setattributesfromstructure( node      = lo_typepusages
                                structure = ls_typepusage ).
    l_rc = xo_rootnode-&gt;append_child( lo_typepusages ).
  ENDLOOP.

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of saplink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
  LOOP AT lt_typepusages INTO ls_typepusage.
    lo_typepusages = xmldoc-&gt;create_element( c_xml_key_forwarddeclaration ).
    l_string       = ls_typepusage-typegroup.
    l_rc = lo_typepusages-&gt;if_ixml_node~set_value( l_string ).
    l_rc = xo_rootnode-&gt;append_child( lo_typepusages ).
  ENDLOOP.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Programs" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*----------------------------------------------------------------------*
*       CLASS lc_Zsaplink_Program_Test DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lc_zsaplink_program_test DEFINITION FOR TESTING
  &quot; DURATION SHORT
  &quot; RISK LEVEL HARMLESS
  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
.
*?ï»¿&lt;asx:abap xmlns:asx=&quot;http://www.sap.com/abapxml&quot; version=&quot;1.0&quot;&gt;
*?&lt;asx:values&gt;
*?&lt;TESTCLASS_OPTIONS&gt;
*?&lt;TEST_CLASS&gt;lc_Zsaplink_Program_Test
*?&lt;/TEST_CLASS&gt;
*?&lt;TEST_MEMBER&gt;f_Cut
*?&lt;/TEST_MEMBER&gt;
*?&lt;OBJECT_UNDER_TEST&gt;ZSAPLINK_PROGRAM
*?&lt;/OBJECT_UNDER_TEST&gt;
*?&lt;OBJECT_IS_LOCAL/&gt;
*?&lt;GENERATE_FIXTURE/&gt;
*?&lt;GENERATE_CLASS_FIXTURE/&gt;
*?&lt;GENERATE_INVOCATION/&gt;
*?&lt;GENERATE_ASSERT_EQUAL/&gt;
*?&lt;/TESTCLASS_OPTIONS&gt;
*?&lt;/asx:values&gt;
*?&lt;/asx:abap&gt;
  PRIVATE SECTION.
* ================
    DATA:
      f_cut TYPE REF TO zsaplink_program.  &quot;class under test

    METHODS: createstringfromobject FOR TESTING.
ENDCLASS.       &quot;lc_Zsaplink_Program_Test


*----------------------------------------------------------------------*
*       CLASS lc_Zsaplink_Program_Test IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lc_zsaplink_program_test IMPLEMENTATION.
* ==============================================

  METHOD createstringfromobject.
    CONSTANTS: object_name TYPE string VALUE &apos;SFLIGHT_DATA_GEN&apos;.
    DATA: source_string TYPE string.

    CREATE OBJECT f_cut
      EXPORTING
        name = object_name.

    source_string = f_cut-&gt;createstringfromobject( ).
    cl_aunit_assert=&gt;assert_not_initial(
        act = source_string               &quot; Actual Data Object
        msg = &apos;No source string found&apos;    &quot; Message in Case of Error
    ).
  ENDMETHOD.       &quot;createstringfromobject




ENDCLASS.       &quot;lc_Zsaplink_Program_Test</localTestClasses>
  <inheritance CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATESTRINGFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/

  select single name from trdir into objName where NAME = objName.
  if sy-subrc = 0.
    exists = &apos;X&apos;.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data rootNode type ref to if_ixml_element.
data sourceNode type ref to if_ixml_element.
data textPoolNode type ref to if_ixml_element.
data docNode type ref to if_ixml_element.
data dynproNode type ref to if_ixml_element.
data statusNode type ref to if_ixml_element.
data rc type sysubrc.
data progAttribs type trdir.
data progSource type RSWSOURCET.
data sourceString type string.
data _objType type string.

  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  sourceNode = xmlDoc-&gt;create_element( &apos;source&apos; ).
  select single * from trdir into progAttribs where NAME = objName.
  if sy-subrc = 0.
    setAttributesFromStructure( node = rootNode structure =  progAttribs ).
    progSource = me-&gt;get_source( ).
    sourceString = buildSourceString( sourceTable = progSource ).
    rc = sourceNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
    textPoolNode = get_textPool( ).
    rc = rootNOde-&gt;append_child( textPoolNode ).
    docNode = get_documentation( ).
    rc = rootNOde-&gt;append_child( docNode ).
    dynproNode = get_dynpro( ).
    rc = rootNode-&gt;append_child( dynproNode ).
    statusNode = get_pfstatus( ).
    rc = rootNode-&gt;append_child( statusNode ).
    rc = rootNode-&gt;append_child( sourceNode ).
    rc = xmldoc-&gt;append_child( rootNode ).
    ixmlDocument = xmlDoc.
  else.
    clear ixmlDocument.
    raise exception type zcx_saplink
      exporting
        textid = zcx_saplink=&gt;not_found
        object = objname.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data rootnode type ref to if_ixml_element.
  data progattribs type trdir.
  data sourcenode type ref to if_ixml_element.
  data textnode type ref to if_ixml_element.
  data docnode type ref to if_ixml_element.
  data dynpnode type ref to if_ixml_element.
  data statnode type ref to if_ixml_element.
  data source type string.
  data sourcetable type table_of_strings.
  data _objname(30) type c.
  data aobjname type trobj_name.
  data _objtype type string.
  data checkexists type flag.

*if sy-uname &lt;&gt; &apos;USDWM01&apos;.
*    _objType = getObjectType( ).
*    xmlDoc = ixmlDocument.
*    rootNode = xmlDoc-&gt;find_from_name( _objType ).
*    call method GETSTRUCTUREFROMATTRIBUTES
*          exporting
*            node = rootNode
*          changing
*            structure = progAttribs.
*    objName = progAttribs-NAME.
*
**   check existing
*    select single name from trdir into objName where NAME = objName.
*    if sy-subrc = 0.
*      raise exception type zcx_saplink
*        exporting textid = zcx_saplink=&gt;existing.
*    endif.
*
*    sourceNode = rootNode-&gt;find_from_name( &apos;source&apos; ).
*    source = sourceNode-&gt;get_value( ).
*    sourceTable = BUILDTABLEFROMSTRING( source ).
*    insert report progAttribs-NAME from sourceTable.
*
*    commit work.
*
*    call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
*      EXPORTING
*        object            = &apos;REPS&apos;
*        obj_name          = aobjName
*      EXCEPTIONS
*        wrong_object_name = 1.
*    if sy-subrc &lt;&gt; 0.
*
*    endif.
*
*else.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  call method getstructurefromattributes
    exporting
      node      = rootnode
    changing
      structure = progattribs.
  objname = progattribs-name.

*  check if object exists
*  select single name from trdir into objName where NAME = objName.
*  if sy-subrc = 0 and overwrite &lt;&gt; &apos;X&apos;.
*    raise exception type zcx_saplink
*      exporting textid = zcx_saplink=&gt;existing.
*  endif.

  checkexists = checkexists( ).
  if checkexists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.


  enqueue_abap( ).
  transport_copy( author = progattribs-cnam devclass = devclass ).
  sourcenode = rootnode-&gt;find_from_name( &apos;source&apos; ).
  source = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).
  create_source( source = sourcetable attribs = progattribs ).
  textnode = rootnode-&gt;find_from_name( &apos;textPool&apos; ).
  create_textpool( textnode ).
  docnode = rootnode-&gt;find_from_name( &apos;programDocumentation&apos; ).
  create_documentation( docnode ).
  dynpnode = rootnode-&gt;find_from_name( &apos;dynpros&apos; ).
  create_dynpro( dynpnode ).
  statnode = rootnode-&gt;find_from_name( &apos;pfstatus&apos; ).
  create_pfstatus( statnode ).

  dequeue_abap( ).
  update_wb_tree( ).
*endif.

* successful install
  name = objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATESTRINGFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATESTRINGFROMOBJECT.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data progSource type RSWSOURCET.
  progsource = me-&gt;get_source( ).
  string = buildsourcestring( sourcetable = progsource ).
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Documentation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DOCUMENTATION.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data prog_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if docnode is not bound.
    return.
  endif.

  prog_name = docNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = prog_name.

* If no prog name, then there was no program documenation, just return.
  if prog_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docNode-&gt;create_filter_name( `language` ).
  lang_iterator = docNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;RE&apos;   &quot;&lt;-- Report/program documentation
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;RE&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Program Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Create Dynpro(Screen)" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DYNPRO.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  types: begin of tdyn_head_temp.
         include type d020s.
  types: dtext type d020t-dtxt.
  types: end of tdyn_head_temp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data: xdyn_text_string type string.
  data: xdyn_text        type d020t-dtxt .
  data: xdyn_head_temp   type tdyn_head_temp.

  data _objname type trobj_name.

  data dynpros_node       type ref to if_ixml_element.
  data dynpros_filter     type ref to if_ixml_node_filter.
  data dynpros_iterator   type ref to if_ixml_node_iterator.

  data dynpro_node        type ref to if_ixml_element.
  data dynpro_filter      type ref to if_ixml_node_filter.
  data dynpro_iterator    type ref to if_ixml_node_iterator.

  data dynfldl_node       type ref to if_ixml_element.
  data dynfldl_filter     type ref to if_ixml_node_filter.
  data dynfldl_iterator   type ref to if_ixml_node_iterator.

  data dynmcod_node       type ref to if_ixml_element.
  data dynmcod_filter     type ref to if_ixml_node_filter.
  data dynmcod_iterator   type ref to if_ixml_node_iterator.

  data dynflow_node       type ref to if_ixml_element.

  data xdynpro_flow_source type string.
  data idynpro_flow_source type table_of_strings.

  _objname = objname.

  dynpros_node =  dynp_node.
  check dynpros_node is not initial.

  free: dynpro_filter, dynpro_iterator, dynpro_node.
  dynpro_filter = dynpros_node-&gt;create_filter_name( &apos;dynpro&apos; ).
  dynpro_iterator =
        dynpros_node-&gt;create_iterator_filtered( dynpro_filter ).
  dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  while dynpro_node is not initial.

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

* Get the header data for the screen.
    call method getstructurefromattributes
      exporting
        node      = dynpro_node
      changing
        structure = xdyn_head_temp.

    xdyn_head    = xdyn_head_temp.
    xdyn_text    = xdyn_head_temp-dtext.

* Retrieve field list
    free: dynfldl_filter, dynfldl_iterator, dynfldl_node.
    dynfldl_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynfldl_iterator =
        dynpro_node-&gt;create_iterator_filtered( dynfldl_filter ).
    dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    while dynfldl_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynfldl_node
        changing
          structure = xdyn_fldl.
      append xdyn_fldl to idyn_fldl.
      dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    endwhile.

* Retrieve matchcode data.
    free: dynmcod_filter, dynmcod_iterator, dynmcod_node.
    dynmcod_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynmcod_iterator =
         dynpro_node-&gt;create_iterator_filtered( dynmcod_filter ).
    dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    while dynmcod_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynmcod_node
        changing
          structure = xdyn_mcod.
      append xdyn_mcod to idyn_mcod.
      dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    endwhile.

* retieve flow logic source.
    clear xdynpro_flow_source.  refresh idynpro_flow_source.
    clear xdyn_flow.            refresh idyn_flow.
    free dynflow_node.
    dynflow_node = dynpro_node-&gt;find_from_name( &apos;dynproflowsource&apos; ).
    xdynpro_flow_source  = dynflow_node-&gt;get_value( ).
    idynpro_flow_source = buildtablefromstring( xdynpro_flow_source ).
    loop at idynpro_flow_source into xdyn_flow.
      append xdyn_flow  to idyn_flow.
    endloop.

* Build dynpro from data
    call function &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
      exporting
*       suppress_corr_checks           = &apos; &apos;
*       CORRNUM                        = &apos; &apos;
        header                         = xdyn_head
        dynprotext                     = xdyn_text
*       SUPPRESS_EXIST_CHECKS          = &apos; &apos;
*       USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
*       SUPPRESS_COMMIT_WORK           = &apos; &apos;
      tables
        fieldlist                      = idyn_fldl
        flowlogic                      = idyn_flow
        params                         = idyn_mcod
     exceptions
        cancelled                      = 1
        already_exists                 = 2
        program_not_exists             = 3
        not_executed                   = 4
        others                         = 5.
    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
    endif.

    dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Create Gui Status" EXPOSURE="0" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_PFSTATUS.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data xtrkey type trkey.
  data xadm   type rsmpe_adm.
  data _program type  trdir-name.
  data _objname type trobj_name.

  data stat_node  type ref to if_ixml_element.
  data node       type ref to if_ixml_element.
  data filter     type ref to if_ixml_node_filter.
  data iterator   type ref to if_ixml_node_iterator.

  data: ls_iact type rsmpe_act,
        ls_ipfk type rsmpe_pfk,
        ls_imen type rsmpe_men.

  _objname = objname.

  stat_node =  pfstat_node.
  check stat_node is not initial.

* read pfstatus_sta node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_sta&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xsta.
    append xsta to ista.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_fun node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_fun&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xfun.
    append xfun to ifun.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_men node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_men&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmen.
    append xmen to imen.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_mtx node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_mtx&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmtx.
    append xmtx to imtx.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_act node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_act&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xact.
    append xact to iact.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_but node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_but&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbut.
    append xbut to ibut.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_pfk node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_pfk&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xpfk.
    append xpfk to ipfk.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_set node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_set&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xset.
    append xset to iset.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_doc node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_doc&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xdoc.
    append xdoc to idoc.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_tit node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_tit&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xtit.
    append xtit to itit.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_biv node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_biv&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbiv.
    append xbiv to ibiv.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* Update the gui status
  _program = _objname.

  xtrkey-obj_type = &apos;PROG&apos;.
  xtrkey-obj_name = _program.
  xtrkey-sub_type = &apos;CUAD&apos;.
  xtrkey-sub_name = _program.

  loop at iact into ls_iact.
    xadm-actcode = ls_iact-code.
  endloop.
  loop at ipfk into ls_ipfk.
    xadm-pfkcode = ls_ipfk-code.
  endloop.
  loop at imen into ls_imen.
    xadm-mencode = ls_imen-code.
  endloop.

  call function &apos;RS_CUA_INTERNAL_WRITE&apos;
    exporting
      program   = _program
      language  = sy-langu
      tr_key    = xtrkey
      adm       = xadm
      state     = &apos;I&apos;
    tables
      sta       = ista
      fun       = ifun
      men       = imen
      mtx       = imtx
      act       = iact
      but       = ibut
      pfk       = ipfk
      set       = iset
      doc       = idoc
      tit       = itit
      biv       = ibiv
    exceptions
      not_found = 1
      others    = 2.

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_SOURCE" VERSION="1" LANGU="E" DESCRIPT="Create Source" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_SOURCE" SCONAME="SOURCE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_SOURCE" SCONAME="ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Generated Table for View TRDIR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRDIR"/>
   <source>method CREATE_SOURCE.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/

  data _objName type TROBJ_NAME.
  data progLine type PROGDIR.
  data titleInfo type trdirti.
  data reportLine type string.
  data miniReport type table_of_strings.

  _objName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        exporting
             OBJECT   = &apos;REPS&apos;
             OBJ_NAME = _objName
        exceptions
             WRONG_OBJECT_NAME = 1.
   INSERT REPORT _objName FROM source STATE &apos;I&apos;
     program type attribs-subc.  &quot;added to handle includes, etc.
   MOVE &apos;I&apos; TO progline-STATE.
   move-corresponding attribs to progline.
   progline-idate = sy-datum.
   progline-itime = sy-uzeit.
   progline-CDAT  = sy-datum.
   progline-UDAT  = sy-datum.
   progline-SDATE = sy-datum.
   modify progdir from progline.
*  Are you kidding me?!?  No idea why you need to do this!!
   CONCATENATE &apos;REPORT&apos; _objName &apos;.&apos; INTO reportLine SEPARATED BY SPACE.
   append reportline to miniReport.
   INSERT REPORT _objName FROM miniReport STATE &apos;A&apos;
     program type attribs-subc. &quot;added to handle includes, etc.
   MOVE &apos;A&apos; TO progline-STATE.
   modify progdir from progline.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Create Text Pool" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_TEXTPOOL" SCONAME="TEXTPOOLNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_TEXTPOOL.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data textPoolTable type standard table of textPool.
  data textPoolRow type textPool.
  data langIterator type ref to if_ixml_node_iterator.
  data filter type ref to if_ixml_node_filter.
  data textFilter type ref to if_ixml_node_filter.
  data textIterator type ref to if_ixml_node_iterator.
  data langNode type ref to if_ixml_element.
  data aTextNode type ref to if_ixml_element.
  data _objName type TROBJ_NAME.
  data lang type spras.
  data langNodeExists type flag.
  data logonLanguageExists type flag.
  data _state(1) type c.

  _objName = objName.
  CHECK textPoolNode IS NOT INITIAL.

  filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
  langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
  langNode ?= langIterator-&gt;get_next( ).

  while langNode is not initial.
    langNodeExists = &apos;X&apos;.
    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
         EXPORTING
              OBJECT   = &apos;REPT&apos;
              OBJ_NAME = _objName
         EXCEPTIONS
              OTHERS   = 0.

    refresh textPoolTable.
    textIterator = langNode-&gt;create_iterator( ).
    aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
    aTextNode ?= textIterator-&gt;get_next( ).
    while aTextNode is not initial.
      call method GETSTRUCTUREFROMATTRIBUTES
            exporting
              node = aTextNode
            changing
              structure = textPoolRow.
      append textPoolRow to textPoolTable.
      aTextNode ?= textIterator-&gt;get_next( ).
    endwhile.
    if textPoolTable is not initial.
      lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
      if lang = sy-langu.
        logonLanguageExists = &apos;X&apos;.
        _state = &apos;I&apos;.
      else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
        _state = &apos;A&apos;.
      endif.
      insert textpool _objName
        from textPooltable
        language lang
        state    _state.
    endif.
    langNode ?= langIterator-&gt;get_next( ).
  endwhile.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data program type sy-repid.

program = objName.

CALL FUNCTION &apos;RS_DELETE_PROGRAM&apos;
  EXPORTING
*   CORRNUMBER                       =
    program                          = program
*   SUPPRESS_CHECKS                  = &apos; &apos;
*   SUPPRESS_COMMIT                  = &apos; &apos;
    SUPPRESS_POPUP                   = &apos;X&apos;
*   MASS_DELETE_CALL                 = &apos; &apos;
*   WITH_CUA                         = &apos;X&apos;
*   WITH_DOCUMENTATION               = &apos;X&apos;
*   WITH_DYNPRO                      = &apos;X&apos;
*   WITH_INCLUDES                    = &apos; &apos;
*   WITH_TEXTPOOL                    = &apos;X&apos;
*   WITH_VARIANTS                    = &apos;X&apos;
*   TADIR_DEVCLASS                   =
*   SKIP_PROGRESS_IND                = &apos; &apos;
*   FORCE_DELETE_USED_INCLUDES       = &apos; &apos;
* IMPORTING
*   CORRNUMBER                       =
*   PROGRAM                          =
* EXCEPTIONS
*   ENQUEUE_LOCK                     = 1
*   OBJECT_NOT_FOUND                 = 2
*   PERMISSION_FAILURE               = 3
*   REJECT_DELETION                  = 4
*   OTHERS                           = 5
          .
IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="DEQUEUE_ABAP" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="DEQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method DEQUEUE_ABAP.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
            global_lock              = &apos;X&apos;
            mode                     = &apos;FREE&apos;
            object                   = objName
            object_class             = &apos;ABAP&apos;
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="ENQUEUE_ABAP" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="ENQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method ENQUEUE_ABAP.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
*            authority_check          = authority_check
            global_lock              = &apos;X&apos;
            mode                     = &apos;INSERT&apos;
*            master_language          = trdir-rload
            object                   = objName
            object_class             = &apos;ABAP&apos;
*       importing
*            transport_key            = trkey_global
*            new_master_language      = trdir-rload
*            devclass                 = devclass_local
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  objectType = &apos;PROG&apos;. &quot;ABAP Program
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get Documentation" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DOCUMENTATION.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data languageNode   type ref to if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  Types: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       type dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  data lt_dokhl type table of t_dokhl.
  data ls_dokhl like line of lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  data lv_str type string.
  DATA _objname TYPE e071-obj_name.

  _objname = objname.

* Check against database
  SELECT  id object langu typ dokversion
        INTO corresponding fields of table lt_dokhl
           FROM dokhl
             WHERE id = &apos;RE&apos;
                AND object = _objname.

* Use only most recent version.
  sort lt_dokhl by id object langu typ ascending dokversion descending.
  delete adjacent duplicates from lt_dokhl comparing id object typ langu.

* Make sure there is at least one record here.
  clear ls_dokhl.
  read table lt_dokhl into ls_dokhl index 1.
  if sy-subrc &lt;&gt; 0.
    return.
  endif.

  docNode = xmlDoc-&gt;create_element( &apos;programDocumentation&apos; ).

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docNode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_Str ).

  Loop at lt_dokhl into ls_dokhl.

* Create language node, and set attribute
    languageNode = xmlDoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_Str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmlDoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languageNode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docNode-&gt;append_child( languageNode ) .
  Endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Get Dynpro(Screen)" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DYNPRO.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  types: begin of tdynp,
         prog type d020s-prog,
         dnum type d020s-dnum,
         end of tdynp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data idynp type table of tdynp.
  data xdynp type tdynp.

  data xdyn_text type d020t-dtxt.
  data xdyn_text_string type string.

  data _objname type trobj_name.
  data rc type sy-subrc .

  data iflowsource type rswsourcet.
  data xflowsource like line of iflowsource.
  data flowsourcestring type string.

  data dynnr_node type ref to if_ixml_element.
  data dynpromatchnode type ref to if_ixml_element.
  data dynprofieldsnode type ref to if_ixml_element.
  data dynproflownode type ref to if_ixml_element.

  _objname = objname.

* Get all dynpros for program object
  clear xdynp.  refresh idynp.
  select prog dnum into table idynp
                from d020s
                   where prog = _objname
                     and type &lt;&gt; &apos;S&apos;    &quot; No Selection Screens
                     and type &lt;&gt; &apos;J&apos;.   &quot; No selection subscreens
  check sy-subrc  = 0 .

  dynp_node = xmldoc-&gt;create_element( &apos;dynpros&apos; ).

  loop at idynp into xdynp.

* Retrieve dynpro imformation
    dynnr_node =  xmldoc-&gt;create_element( &apos;dynpro&apos; ).

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

    call function &apos;RPY_DYNPRO_READ_NATIVE&apos;
      exporting
        progname                    = xdynp-prog
        dynnr                       = xdynp-dnum
*       SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*       SUPPRESS_CORR_CHECKS        = &apos; &apos;
    importing
        HEADER                      = xdyn_head
        dynprotext                  = xdyn_text
     tables
        fieldlist                   = idyn_fldl
        flowlogic                   = idyn_flow
        params                      = idyn_mcod
*       FIELDTEXTS                  =
     exceptions
        cancelled                   = 1
        not_found                   = 2
        permission_error            = 3
        others                      = 4.

    check sy-subrc = 0.

* Add heading information for screen.
    setattributesfromstructure(
                     node = dynnr_node structure =  xdyn_head  ).
* Add the dynpro text also.
    xdyn_text_string =  xdyn_text.
    rc = dynnr_node-&gt;set_attribute(
               name = &apos;DTEXT&apos;  value = xdyn_text_string ).
    rc = dynp_node-&gt;append_child( dynnr_node ).

* Add fields information for screen.
    if not idyn_fldl[] is initial.
      loop at idyn_fldl into xdyn_fldl.
        dynprofieldsnode = xmldoc-&gt;create_element( &apos;dynprofield&apos; ).
        setattributesfromstructure(
                 node = dynprofieldsnode structure =  xdyn_fldl ).
        rc = dynnr_node-&gt;append_child( dynprofieldsnode ).
      endloop.
    endif.

* Add flow logic of screen
    if not idyn_flow[] is initial.
      clear xflowsource. refresh  iflowsource.
      loop at idyn_flow into xdyn_flow.
        xflowsource  = xdyn_flow.
        append xflowsource to iflowsource.
      endloop.

      dynproflownode = xmldoc-&gt;create_element( &apos;dynproflowsource&apos; ).
      flowsourcestring = buildsourcestring( sourcetable = iflowsource ).
      rc = dynproflownode-&gt;if_ixml_node~set_value( flowsourcestring ).
      rc = dynnr_node-&gt;append_child( dynproflownode  ).
    endif.

* Add matchcode information for screen.
    if not idyn_mcod[] is initial.
      loop at idyn_mcod into xdyn_mcod.
        check not xdyn_mcod-type is initial
          and not xdyn_mcod-content is initial.
        dynpromatchnode = xmldoc-&gt;create_element( &apos;dynpromatchcode&apos; ).
        setattributesfromstructure(
                 node = dynpromatchnode structure =  xdyn_mcod ).
        rc = dynnr_node-&gt;append_child( dynpromatchnode ).
      endloop.
    endif.

  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Get Gui Status" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_PFSTATUS.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data sta_node type ref to if_ixml_element.
  data fun_node type ref to if_ixml_element.
  data men_node type ref to if_ixml_element.
  data mtx_node type ref to if_ixml_element.
  data act_node type ref to if_ixml_element.
  data but_node type ref to if_ixml_element.
  data pfk_node type ref to if_ixml_element.
  data set_node type ref to if_ixml_element.
  data doc_node type ref to if_ixml_element.
  data tit_node type ref to if_ixml_element.
  data biv_node type ref to if_ixml_element.

  data _objname type trobj_name.
  data _program type  trdir-name.
  data rc type sy-subrc.

  _objname = objname.
  _program = objname.

  call function &apos;RS_CUA_INTERNAL_FETCH&apos;
    exporting
      program         = _program
      language        = sy-langu
    tables
      sta             = ista
      fun             = ifun
      men             = imen
      mtx             = imtx
      act             = iact
      but             = ibut
      pfk             = ipfk
      set             = iset
      doc             = idoc
      tit             = itit
      biv             = ibiv
    exceptions
      not_found       = 1
      unknown_version = 2
      others          = 3.

  check sy-subrc = 0.

* if there is a gui status or gui title present, then
* create pfstatus node.
  if ista[] is not initial
     or itit[] is not initial.
    pfstat_node = xmldoc-&gt;create_element( &apos;pfstatus&apos; ).
  endif.


* if ista is filled, assume there are one or more
* gui statuses
  if ista[] is not initial.

    loop at ista into xsta.
      sta_node = xmldoc-&gt;create_element( &apos;pfstatus_sta&apos; ).
      setattributesfromstructure(
               node = sta_node
               structure =  xsta ).
      rc = pfstat_node-&gt;append_child( sta_node ).
    endloop.

    loop at ifun into xfun.
      fun_node = xmldoc-&gt;create_element( &apos;pfstatus_fun&apos; ).
      setattributesfromstructure(
               node = fun_node
               structure =  xfun ).
      rc = pfstat_node-&gt;append_child( fun_node ).
    endloop.

    loop at imen into xmen.
      men_node = xmldoc-&gt;create_element( &apos;pfstatus_men&apos; ).
      setattributesfromstructure(
               node = men_node
               structure =  xmen ).
      rc = pfstat_node-&gt;append_child( men_node ).
    endloop.

    loop at imtx into xmtx.
      mtx_node = xmldoc-&gt;create_element( &apos;pfstatus_mtx&apos; ).
      setattributesfromstructure(
               node = mtx_node
               structure =  xmtx ).
      rc = pfstat_node-&gt;append_child( mtx_node ).
    endloop.

    loop at iact into xact.
      act_node = xmldoc-&gt;create_element( &apos;pfstatus_act&apos; ).
      setattributesfromstructure(
               node = act_node
               structure =  xact ).
      rc = pfstat_node-&gt;append_child( act_node ).
    endloop.

    loop at ibut into xbut.
      but_node = xmldoc-&gt;create_element( &apos;pfstatus_but&apos; ).
      setattributesfromstructure(
               node = but_node
               structure =  xbut ).
      rc = pfstat_node-&gt;append_child( but_node ).
    endloop.

    loop at ipfk into xpfk.
      pfk_node = xmldoc-&gt;create_element( &apos;pfstatus_pfk&apos; ).
      setattributesfromstructure(
               node = pfk_node
               structure =  xpfk ).
      rc = pfstat_node-&gt;append_child( pfk_node ).
    endloop.

    loop at iset into xset.
      set_node = xmldoc-&gt;create_element( &apos;pfstatus_set&apos; ).
      setattributesfromstructure(
               node = set_node
               structure =  xset ).
      rc = pfstat_node-&gt;append_child( set_node ).
    endloop.

    loop at idoc into xdoc.
      doc_node = xmldoc-&gt;create_element( &apos;pfstatus_doc&apos; ).
      setattributesfromstructure(
               node = doc_node
               structure =  xdoc ).
      rc = pfstat_node-&gt;append_child( doc_node ).
    endloop.


    loop at ibiv into xbiv.
      biv_node = xmldoc-&gt;create_element( &apos;pfstatus_biv&apos; ).
      setattributesfromstructure(
               node = biv_node
               structure =  xbiv ).
      rc = pfstat_node-&gt;append_child( biv_node ).
    endloop.

  endif.


* It itit is filled, assume one or more titles
  if itit[] is not initial.

    loop at itit into xtit.
      tit_node = xmldoc-&gt;create_element( &apos;pfstatus_tit&apos; ).
      setattributesfromstructure(
               node = tit_node
               structure =  xtit ).
      rc = pfstat_node-&gt;append_child( tit_node ).
    endloop.

  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_SOURCE" VERSION="1" LANGU="E" DESCRIPT="Get Report Sourcecode" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_SOURCE" SCONAME="PROGSOURCE" VERSION="1" LANGU="E" DESCRIPT="ABAP Source" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RSWSOURCET"/>
   <source>method GET_SOURCE.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/

  data _objName(30) type c.

  _objName = me-&gt;objName.
  read report _objName into progSource.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Get Text Pool" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_TEXTPOOL" SCONAME="TEXTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TEXTPOOL.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data aText type ref to if_ixml_element.
data textPoolTable type standard table of TEXTPOOL.
data textPoolRow type textPool.
data languageList type instLang.
data aLanguage type SPRAS.
data _objName(30) type c.
data rc type i.
data sTemp type string.
data languageNode type ref to if_ixml_element.
data firstLoop type flag.

  _objName = objName.


  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
        changing
          INSTALLED_LANGUAGES = languageList.

  firstLoop = abap_true.

  loop at languageList into aLanguage.
    read textpool _objName into textPoolTable language aLanguage.
    if sy-subrc = 0.
      if firstLoop = abap_true.
        textNode = xmlDoc-&gt;create_element( &apos;textPool&apos; ).
        firstLoop = abap_false.
      endif.
      languageNode = xmlDoc-&gt;create_Element( &apos;language&apos; ).
      sTemp = aLanguage.
      rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = sTemp ).
      loop at textPoolTable into textPoolRow.
        aText = xmlDoc-&gt;create_element( &apos;textElement&apos; ).
        setAttributesFromStructure( node = aText structure =
        textPoolRow ).
        rc = languageNode-&gt;append_child( aText ).
      endloop.
      rc = textNode-&gt;append_child( languageNode ).
    endif.
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" SCONAME="AUTHOR" VERSION="1" LANGU="E" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method TRANSPORT_COPY.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = &apos;ABAP&apos;
            DEVCLASS            = devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="UPDATE_WB_TREE" VERSION="1" LANGU="E" DESCRIPT="Update Workbench Tree" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method UPDATE_WB_TREE.

  DATA: BEGIN OF pname,
          root(3) VALUE &apos;PG_&apos;,
          program(27),
        END OF pname.

  DATA: trdir TYPE trdir.

  pname-program = me-&gt;objname.

  CALL FUNCTION &apos;WB_TREE_ACTUALIZE&apos;
    EXPORTING
      tree_name = pname.

  trdir-name    = me-&gt;objname.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = trdir-name
      program   = trdir-name
      operation = &apos;INSERT&apos;
      type      = &apos;CP&apos;.

endmethod.</source>
  </method>
 </CLAS>
 <PROG NAME="ZSAPLINK" VARCL="X" DBAPL="S" DBNA="D$" SUBC="1" APPL="S" RMAND="321" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="D">
    <textElement ID="I" KEY="INP" ENTRY="Installierte Plugins" LENGTH="25 "/>
    <textElement ID="I" KEY="NGA" ENTRY="Objekt zum Nugget hinzufügen" LENGTH="28 "/>
    <textElement ID="I" KEY="NGC" ENTRY="Neues Nugget anlegen" LENGTH="25 "/>
    <textElement ID="I" KEY="NGI" ENTRY="Nugget importieren" LENGTH="20 "/>
    <textElement ID="I" KEY="NOI" ENTRY="ist kein Plugin installiert" LENGTH="40 "/>
    <textElement ID="I" KEY="OPT" ENTRY="Optionen" LENGTH="8 "/>
    <textElement ID="I" KEY="PLO" ENTRY="Für den Objekt Type" LENGTH="30 "/>
    <textElement ID="I" KEY="SLK" ENTRY="SAPlink" LENGTH="7 "/>
    <textElement ID="I" KEY="TB1" ENTRY="Objekt" LENGTH="7 "/>
    <textElement ID="I" KEY="TB2" ENTRY="Nugget" LENGTH="6 "/>
    <textElement ID="S" KEY="EXPORT" ENTRY="        Objekt exportieren" LENGTH="32 "/>
    <textElement ID="S" KEY="FILENAME" ENTRY="        SAPlink Dateiname" LENGTH="33 "/>
    <textElement ID="S" KEY="IMPORT" ENTRY="        Objekt importieren" LENGTH="26 "/>
    <textElement ID="S" KEY="NOBJNAM" ENTRY="        Objektname" LENGTH="19 "/>
    <textElement ID="S" KEY="NOVRWR" ENTRY="        Originale überschreiben" LENGTH="31 "/>
    <textElement ID="S" KEY="NPLUGIN" ENTRY="        Objekttyp" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGA" ENTRY="        Zum Nugget hinzufügen" LENGTH="29 "/>
    <textElement ID="S" KEY="NUGC" ENTRY="        Neues Nugget anlegen" LENGTH="28 "/>
    <textElement ID="S" KEY="NUGD" ENTRY="        Objekte des Nuggets anzeigen" LENGTH="36 "/>
    <textElement ID="S" KEY="NUGFILE" ENTRY="        Nugget Dateiname" LENGTH="32 "/>
    <textElement ID="S" KEY="NUGGNAM" ENTRY="        Nuggetname" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGI" ENTRY="        Nugget importieren" LENGTH="26 "/>
    <textElement ID="S" KEY="NUGP" ENTRY="        Fügen Sie Paket Nugget hinzu" LENGTH="36 "/>
    <textElement ID="S" KEY="NUGR" ENTRY="        Objekte aus Transport hinzuf." LENGTH="37 "/>
    <textElement ID="S" KEY="OBJNAME" ENTRY="        Objektname" LENGTH="19 "/>
    <textElement ID="S" KEY="OVERWR" ENTRY="        Originale überschreiben" LENGTH="31 "/>
    <textElement ID="S" KEY="PACKAGE" ENTRY="        Paket Name" LENGTH="20 "/>
    <textElement ID="S" KEY="PLUGIN" ENTRY="        Objekttyp" LENGTH="19 "/>
    <textElement ID="S" KEY="REQNUGG" ENTRY="        Transport Nummer" LENGTH="24 "/>
    <textElement ID="S" KEY="SLPKG" ENTRY="        Paket Name" LENGTH="20 "/>
   </language>
   <language SPRAS="E">
    <textElement ID="I" KEY="INP" ENTRY="Installed Plugins" LENGTH="25 "/>
    <textElement ID="I" KEY="NGA" ENTRY="Add Object to Nugget" LENGTH="25 "/>
    <textElement ID="I" KEY="NGC" ENTRY="Create Empty Nugget" LENGTH="25 "/>
    <textElement ID="I" KEY="NGI" ENTRY="Import Nugget" LENGTH="20 "/>
    <textElement ID="I" KEY="NOI" ENTRY="is not installed on this system" LENGTH="40 "/>
    <textElement ID="I" KEY="OPT" ENTRY="Options" LENGTH="7 "/>
    <textElement ID="I" KEY="PLO" ENTRY="Plugin for object type" LENGTH="30 "/>
    <textElement ID="I" KEY="SLK" ENTRY="SAPlink" LENGTH="7 "/>
    <textElement ID="I" KEY="TB1" ENTRY="Slinkee" LENGTH="7 "/>
    <textElement ID="I" KEY="TB2" ENTRY="Nugget" LENGTH="6 "/>
    <textElement ID="I" KEY="URL" ENTRY="Visit http://www.saplink.org" LENGTH="60 "/>
    <textElement ID="I" KEY="VER" ENTRY="Updated version of CLASS ZSAPLINK available" LENGTH="60 "/>
    <textElement ID="S" KEY="EXPORT" ENTRY="        Export Object to Slinkee" LENGTH="32 "/>
    <textElement ID="S" KEY="FILENAME" ENTRY="        Slinkee File Name" LENGTH="33 "/>
    <textElement ID="S" KEY="IMPORT" ENTRY="        Import Slinkee" LENGTH="22 "/>
    <textElement ID="S" KEY="NOBJNAM" ENTRY="        Object Name" LENGTH="19 "/>
    <textElement ID="S" KEY="NOVRWR" ENTRY="        Overwrite Originals" LENGTH="27 "/>
    <textElement ID="S" KEY="NPLUGIN" ENTRY="        Object Type" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGA" ENTRY="        Add Object to Nugget" LENGTH="28 "/>
    <textElement ID="S" KEY="NUGC" ENTRY="        Create New Nugget" LENGTH="27 "/>
    <textElement ID="S" KEY="NUGD" ENTRY="        Display Nugget" LENGTH="33 "/>
    <textElement ID="S" KEY="NUGFILE" ENTRY="        Nugget File Name" LENGTH="32 "/>
    <textElement ID="S" KEY="NUGGNAM" ENTRY="        Nugget Name" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGI" ENTRY="        Import Nugget" LENGTH="21 "/>
    <textElement ID="S" KEY="NUGP" ENTRY="        Add Objects from a Package" LENGTH="34 "/>
    <textElement ID="S" KEY="NUGR" ENTRY="        Add Objects from a Transport" LENGTH="36 "/>
    <textElement ID="S" KEY="OBJNAME" ENTRY="        Object Name" LENGTH="19 "/>
    <textElement ID="S" KEY="OVERWR" ENTRY="        Overwrite Originals" LENGTH="27 "/>
    <textElement ID="S" KEY="PACKAGE" ENTRY="        Package Name" LENGTH="20 "/>
    <textElement ID="S" KEY="PLUGIN" ENTRY="        Object Type" LENGTH="19 "/>
    <textElement ID="S" KEY="REQNUGG" ENTRY="        Transport Number" LENGTH="24 "/>
    <textElement ID="S" KEY="SLPKG" ENTRY="        Package Name" LENGTH="20 "/>
   </language>
  </textPool>
  <pfstatus>
   <pfstatus_sta CODE="SELOBJ" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Standard für allgemeine Listausgabe"/>
   <pfstatus_fun CODE="%PC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPORT" ICON_ID="@49@" FUN_TEXT="Download" PATH="D"/>
   <pfstatus_fun CODE="%SC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="Search" PATH="S"/>
   <pfstatus_fun CODE="%SC+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH_NEXT" ICON_ID="@4E@" FUN_TEXT="Weiter suchen" PATH="E"/>
   <pfstatus_fun CODE="%SL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_MAIL" ICON_ID="@1S@" FUN_TEXT="Send..." PATH="S"/>
   <pfstatus_fun CODE="&amp;ABC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CALCULATION" ICON_ID="@0M@" FUN_TEXT="ABC-Analyse" ICON_TEXT="ABC" PATH="A"/>
   <pfstatus_fun CODE="&amp;ALL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Select All" PATH="A"/>
   <pfstatus_fun CODE="&amp;AQW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE_TEXT" ICON_ID="@0Q@" FUN_TEXT="Word" PATH="W"/>
   <pfstatus_fun CODE="&amp;AUF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="AufriÃÆÃÅ¸ festlegen..." PATH="U"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Sichern..." PATH="S"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Save Variants" ICON_TEXT="Save"/>
   <pfstatus_fun CODE="&amp;BS" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OVERVIEW" ICON_ID="@3Q@" FUN_TEXT="J"/>
   <pfstatus_fun CODE="&amp;BS+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_VALUE" ICON_ID="@0H@" FUN_TEXT="Next"/>
   <pfstatus_fun CODE="&amp;BS-" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_NEXT_VALUE" ICON_ID="@0I@" FUN_TEXT="Previous"/>
   <pfstatus_fun CODE="&amp;CDF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Fixierung aufheben" PATH="I"/>
   <pfstatus_fun CODE="&amp;CFI" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Fixieren bis Spalte" PATH="F"/>
   <pfstatus_fun CODE="&amp;CRB" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOTAL_LEFT" ICON_ID="@0B@" FUN_TEXT="First Position"/>
   <pfstatus_fun CODE="&amp;CRE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOTAL_RIGHT" ICON_ID="@0C@" FUN_TEXT="Last Postion"/>
   <pfstatus_fun CODE="&amp;CRL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLUMN_LEFT" ICON_ID="@0D@" FUN_TEXT="Left"/>
   <pfstatus_fun CODE="&amp;CRR" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLUMN_RIGHT" ICON_ID="@0E@" FUN_TEXT="Right"/>
   <pfstatus_fun CODE="&amp;EB3" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TABLE_SETTINGS" ICON_ID="@36@" FUN_TEXT="Weitere Berichte"/>
   <pfstatus_fun CODE="&amp;ELP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_HELP" ICON_ID="@35@" FUN_TEXT="Hilfe"/>
   <pfstatus_fun CODE="&amp;ERW" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Verwaltung..." PATH="V"/>
   <pfstatus_fun CODE="&amp;ETA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="Details"/>
   <pfstatus_fun CODE="&amp;F03" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
   <pfstatus_fun CODE="&amp;F12" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Exit" PATH="X"/>
   <pfstatus_fun CODE="&amp;F15" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Cancel" PATH="A"/>
   <pfstatus_fun CODE="&amp;ILD" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Remove Filter" PATH="L"/>
   <pfstatus_fun CODE="&amp;ILT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER" ICON_ID="@4G@" FUN_TEXT="Filter" PATH="F"/>
   <pfstatus_fun CODE="&amp;KOM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLLAPSE" ICON_ID="@3T@" FUN_TEXT="AuswÃÆÃÂ¤hlen..." PATH="A"/>
   <pfstatus_fun CODE="&amp;LFO" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Listenstatus..." PATH="L"/>
   <pfstatus_fun CODE="&amp;LFO" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="List Status"/>
   <pfstatus_fun CODE="&amp;LIS" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Grundliste" PATH="G"/>
   <pfstatus_fun CODE="&amp;NFO" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="Information" ICON_TEXT="Selektionen" PATH="I"/>
   <pfstatus_fun CODE="&amp;NTE" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Auffrischen"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="AuswÃÆÃÂ¤hlen..." PATH="U"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Search Variants" ICON_TEXT="Search"/>
   <pfstatus_fun CODE="&amp;ODN" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_DOWN" ICON_ID="@3F@" FUN_TEXT="Sort Descending" PATH="O"/>
   <pfstatus_fun CODE="&amp;OL0" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Variant"/>
   <pfstatus_fun CODE="&amp;OLX" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Aktuelle..." PATH="K"/>
   <pfstatus_fun CODE="&amp;OMP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLLAPSE" ICON_ID="@3T@" FUN_TEXT="Collapse"/>
   <pfstatus_fun CODE="&amp;OPT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Breite optimieren" PATH="P"/>
   <pfstatus_fun CODE="&amp;OUP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_UP" ICON_ID="@3E@" FUN_TEXT="Sort Asscending" PATH="I"/>
   <pfstatus_fun CODE="&amp;RNT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="Print" PATH="P"/>
   <pfstatus_fun CODE="&amp;SAL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="Unselect All" PATH="N"/>
   <pfstatus_fun CODE="&amp;SUM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERMEDIATE_SUM" ICON_ID="@5V@" FUN_TEXT="SubTotal" PATH="U"/>
   <pfstatus_fun CODE="&amp;UMC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SUM" ICON_ID="@3Z@" FUN_TEXT="Summary" PATH="R"/>
   <pfstatus_fun CODE="&amp;XPA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPAND" ICON_ID="@3S@" FUN_TEXT="Expand"/>
   <pfstatus_fun CODE="&amp;XXL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_XXL" ICON_ID="@DJ@" FUN_TEXT="Excel" PATH="X"/>
   <pfstatus_fun CODE="AEND" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Change Record" PATH="C"/>
   <pfstatus_fun CODE="MARA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Select All" INFO_TEXT="Alle Benutzer markieren"/>
   <pfstatus_fun CODE="MARD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="De-Select All"/>
   <pfstatus_fun CODE="MYPICK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DETAIL" ICON_ID="@3R@" FUN_TEXT="Details anzeigen" PATH="D"/>
   <pfstatus_fun CODE="P+" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Next Entry"/>
   <pfstatus_fun CODE="P++" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Last Entry"/>
   <pfstatus_fun CODE="P-" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Previous Entry"/>
   <pfstatus_fun CODE="P--" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="First Entry"/>
   <pfstatus_fun CODE="TAKE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="Execute" INFO_TEXT="Markierte Benutzer ÃÆÃÂ¼bernehmen"/>
   <pfstatus_fun CODE="UAGR" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LIST" ICON_ID="@3W@" FUN_TEXT="Liste mit Rollen" ICON_TEXT="Rollen" INFO_TEXT="Liste mit Rollen"/>
   <pfstatus_fun CODE="UPROF" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LIST" ICON_ID="@3W@" FUN_TEXT="Liste mit Profilen" ICON_TEXT="Profile" INFO_TEXT="Liste mit Profilen"/>
   <pfstatus_men CODE="000001" NO="01" REF_TYPE="F" REF_CODE="&amp;RNT" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="02" REF_TYPE="M" REF_CODE="000002"/>
   <pfstatus_men CODE="000001" NO="03" REF_TYPE="F" REF_CODE="%SL" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="04" REF_TYPE="S"/>
   <pfstatus_men CODE="000001" NO="05" REF_TYPE="F" REF_CODE="&amp;F15" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="06" REF_TYPE="F" REF_CODE="&amp;F03" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="01" REF_TYPE="F" REF_CODE="&amp;AQW" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="02" REF_TYPE="F" REF_CODE="&amp;XXL" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="03" REF_TYPE="F" REF_CODE="%PC" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="01" REF_TYPE="F" REF_CODE="&amp;ALL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="02" REF_TYPE="F" REF_CODE="&amp;SAL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="04" REF_TYPE="F" REF_CODE="&amp;ILT" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="07" REF_TYPE="F" REF_CODE="&amp;OUP" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="08" REF_TYPE="F" REF_CODE="&amp;ODN" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="09" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="12" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="13" REF_TYPE="F" REF_CODE="%SC" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="14" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="15" REF_TYPE="F" REF_CODE="&amp;F12" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="01" REF_TYPE="F" REF_CODE="&amp;ABC" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="03" REF_TYPE="F" REF_CODE="&amp;F03" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="01" REF_TYPE="F" REF_CODE="AEND" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="01" REF_TYPE="F" REF_CODE="&amp;LIS" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="03" REF_TYPE="M" REF_CODE="000007"/>
   <pfstatus_men CODE="000006" NO="04" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="05" REF_TYPE="M" REF_CODE="000008"/>
   <pfstatus_men CODE="000006" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="07" REF_TYPE="M" REF_CODE="000009"/>
   <pfstatus_men CODE="000006" NO="08" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="09" REF_TYPE="F" REF_CODE="&amp;NFO" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="10" REF_TYPE="F" REF_CODE="&amp;LFO" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="01" REF_TYPE="F" REF_CODE="&amp;OLX" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="02" REF_TYPE="F" REF_CODE="&amp;OAD" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000007" NO="04" REF_TYPE="F" REF_CODE="&amp;AVE" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="05" REF_TYPE="S"/>
   <pfstatus_men CODE="000007" NO="06" REF_TYPE="F" REF_CODE="&amp;ERW" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="01" REF_TYPE="F" REF_CODE="&amp;KOM" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="02" REF_TYPE="F" REF_CODE="&amp;AUF" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="01" REF_TYPE="F" REF_CODE="&amp;OPT" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="03" REF_TYPE="F" REF_CODE="&amp;CFI" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="04" REF_TYPE="F" REF_CODE="&amp;CDF" REF_NO="001"/>
   <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="List" PATH="L"/>
   <pfstatus_mtx CODE="000002" TEXT_TYPE="S" TEXT="Export" PATH="E"/>
   <pfstatus_mtx CODE="000003" TEXT_TYPE="S" TEXT="Edit" PATH="E"/>
   <pfstatus_mtx CODE="000004" TEXT_TYPE="S" TEXT="Jump" PATH="J"/>
   <pfstatus_mtx CODE="000005" TEXT_TYPE="S" TEXT="User" PATH="U"/>
   <pfstatus_mtx CODE="000006" TEXT_TYPE="S" TEXT="Attitudes" PATH="A"/>
   <pfstatus_mtx CODE="000007" TEXT_TYPE="S" TEXT="Anzeigevariante" PATH="A"/>
   <pfstatus_mtx CODE="000008" TEXT_TYPE="S" TEXT="Summenstufen" PATH="S"/>
   <pfstatus_mtx CODE="000009" TEXT_TYPE="S" TEXT="Spalten" PATH="P"/>
   <pfstatus_mtx CODE="000016" TEXT_TYPE="S" TEXT="Edit" PATH="E" INT_NOTE="Standard supplement"/>
   <pfstatus_act CODE="000001" NO="01" MENUCODE="000001"/>
   <pfstatus_act CODE="000001" NO="02" MENUCODE="000003"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="14"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="39"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="41"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="40"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="05"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="06"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="38"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="09"/>
   <pfstatus_pfk CODE="000001" PFNO="01" FUNCODE="&amp;ELP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="02" FUNCODE="MYPICK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="&amp;ALL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="06" FUNCODE="&amp;SAL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="07" FUNCODE="&amp;NFO" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="&amp;NTE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="09" FUNCODE="%PC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="14" FUNCODE="TAKE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="16" FUNCODE="&amp;XXL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="17" FUNCODE="&amp;AQW" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="18" FUNCODE="&amp;ABC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="19" FUNCODE="&amp;UMC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="20" FUNCODE="%SL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="38" FUNCODE="&amp;ILT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="39" FUNCODE="&amp;ETA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="40" FUNCODE="&amp;ODN" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="41" FUNCODE="&amp;OUP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="44" FUNCODE="MARA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="45" FUNCODE="MARD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="71" FUNCODE="%SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="80" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="81" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="82" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="83" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%CH"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%EX"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%PC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%SC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%SC+"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%SL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%ST"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ABC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ALL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;AQW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;AUF"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;CDF"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;CFI"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ELP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ERW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ETA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ILD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ILT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;KOM"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;LIS"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;NFO"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;NTE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ODN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL2"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL3"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL4"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL5"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OLX"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OPT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OUP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;SAL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;SUM"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;UMC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;XXL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BAC1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BACK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB2"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB3"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB9"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEBN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="COL0"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="COLX"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="DETA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="DRUK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="DSAL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="ENTE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="EXPA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="FILD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="FILT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="GLIS"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="HELP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="INFO"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="KOMP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="LOAD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="MARA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="MARD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="MYPICK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P+"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P++"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P-"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P--"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PF09"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PF13"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PIC1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PICK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PRI"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PRIN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PRNT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="RW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SALL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SAUF"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRB"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRR"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SKOM"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SODN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SOUP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SUMC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="TAKE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="VERW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="ZSUM"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="STANDARD"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" NORM="X" INT_NOTE="Standard Maximum Interation"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Standard Maximum Interation"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000002" MODAL="D" INT_NOTE="Standard maximale Interaktion"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000002" MODAL="D" NORM="X" INT_NOTE="Standard maximale Interaktion"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000002" SUB_CODE="0001" MODAL="D" INT_NOTE="Standard maximale Interaktion"/>
  </pfstatus>
  <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
*/---------------------------------------------------------------------\
*| /  __ \           | |      (_) |         | |                        |
*| | /  \/ ___  _ __ | |_ _ __ _| |__  _   _| |_ ___  _ __ ___         |
*| | |    / _ \| &apos;_ \| __| &apos;__| | &apos;_ \| | | | __/ _ \| &apos;__/ __|        |
*| | \__/\ (_) | | | | |_| |  | | |_) | |_| | || (_) | |  \__ \        |
*|  \____/\___/|_| |_|\__|_|  |_|_.__/ \__,_|\__\___/|_|  |___/        |
*|---------------------------------------------------------------------|
*| Lead Developers : ed herrmann                                       |
*|                        ewherrmann+saplinkcred@gmail.com             |
*|                   dan mcweeney                                      |
*|                        daniel.mcweeney+saplinkcred@gmail.com        |
*|---------------------------------------------------------------------|
*| For a full list of contributors visit:                              |
*|                                                                     |
*| project homepage: http://saplink.org                                |
*| discussion group:                                                   |
*|            https://cw.sdn.sap.com/cw/groups/saplink?view=discussions|
*| project wiki:     https://wiki.sdn.sap.com/wiki/display/ABAP/SAPlink|
*\---------------------------------------------------------------------/
REPORT  zsaplink.
class zsaplink DEFINITION load. &quot; Convenience for older SAP-Releases

*/------------------------DATA----------------------------\
TABLES: sscrfields, e071, e07t.

TYPE-POOLS: icon, slis, sabc, stms, trwbo.

TYPES: BEGIN OF t_plugin,
         object TYPE ko100-object,
         text   TYPE ko100-text,
       END OF t_plugin.

TYPES: BEGIN OF t_objecttable,
         classname TYPE string,
         object    TYPE ko100-object,
         text      TYPE ko100-text,
       END OF t_objecttable.

TYPES: BEGIN OF t_nuggetobject,
         objtype TYPE string,
         objname TYPE string,
         exists  TYPE flag,
       END OF t_nuggetobject.
*addition of package data
****   Read all objects of the package
TYPES: BEGIN OF t_objects_package,
         select     TYPE char1,
         object     TYPE tadir-object,
         object_txt TYPE string,
         obj_name   TYPE tadir-obj_name,
         srcsystem  TYPE tadir-srcsystem,
         down_flag  TYPE char1,
         status     TYPE char1,
         msg        TYPE string,
       END OF t_objects_package.

TYPES: BEGIN OF t_requestobject,
         object   TYPE e071-object,
         obj_name TYPE e071-obj_name,
       END OF t_requestobject.

TYPES: tt_requestobject TYPE TABLE OF t_requestobject.

TYPES: BEGIN OF gts_versions_delta,
         classname    TYPE classname,
         version_ixml TYPE zsaplink=&gt;gts_version_info,
         version_sap  TYPE zsaplink=&gt;gts_version_info,
       END OF gts_versions_delta.

DATA: objects_package     TYPE TABLE OF t_objects_package,
      packageline         TYPE t_objects_package,
      tabletypeline       TYPE ko105,
      tabletypesin        TYPE TABLE OF ko105,
      tabletypesout       TYPE tr_object_texts,
      tabletypeoutline    TYPE ko100,
      lt_fieldcat         TYPE slis_t_fieldcat_alv,
      ls_fieldcat         LIKE LINE OF lt_fieldcat,
      ls_layout           TYPE slis_layout_alv,
      lv_count            TYPE i,
      lv_pers             TYPE i,
*end of  addition for packages
*addition of Transport
      it_requestobject    TYPE TABLE OF t_requestobject,
      wa_requestobject    TYPE t_requestobject,
*end of  addition for transport
      pluginline          TYPE t_plugin,
      pluginlist          TYPE TABLE OF t_plugin,
      hidid(3)            TYPE c,
      currenttab          TYPE string,
      isslinkee(1)        TYPE c VALUE &apos; &apos;,
      objecttable         TYPE TABLE OF t_objecttable,
      objectline          TYPE t_objecttable,
      _objname            TYPE string,
      _objtype            TYPE string,
      nuggetname          TYPE string,
      targetobject        TYPE REF TO zsaplink,
      xml                 TYPE string,
      excclass            TYPE REF TO zcx_saplink,
      errormsg            TYPE string,
      statusmsg           TYPE string,
      _pluginexists       TYPE flag,
      _objectexists       TYPE flag,
      _flag               TYPE flag,

      errorflag           TYPE flag,
      it_nuggetobject     TYPE TABLE OF t_nuggetobject,
      wa_nuggetobject     TYPE t_nuggetobject,

      deffilename         TYPE string,
      retfilename         TYPE string,
      retpath             TYPE string,
      retfullpath         TYPE string,
      retuseract          TYPE i,
      retfiletable        TYPE filetable,
      retrc               TYPE sysubrc,
      retuseraction       TYPE i,

      nugg                TYPE REF TO zsaplink_nugget,
      stemp               TYPE string,
      anxmldoc            TYPE REF TO if_ixml_document,
      ixmldocument        TYPE REF TO if_ixml_document,

      foo                 TYPE REF TO data,
      len                 TYPE i,

      l_marker            TYPE i,
      l_offset            TYPE i,
      l_total_offset      TYPE i,

      es_selected_request TYPE trwbo_request_header,
      es_selected_task    TYPE trwbo_request_header,
      iv_organizer_type   TYPE trwbo_calling_organizer,
      is_selection        TYPE trwbo_selection,
      gt_versions_delta   TYPE STANDARD TABLE OF gts_versions_delta WITH NON-UNIQUE DEFAULT KEY,
      gv_version_line     TYPE sytabix.

FIELD-SYMBOLS: &lt;obj&gt; LIKE LINE OF objects_package.

*\--------------------------------------------------------------------/


*/------------------------SELECTION SCREEN----------------------------\


SELECTION-SCREEN BEGIN OF TABBED BLOCK tabb FOR 20 LINES.
SELECTION-SCREEN TAB (17) text-tb2 USER-COMMAND nugg
                     DEFAULT SCREEN 120.
SELECTION-SCREEN TAB (17) text-tb1 USER-COMMAND obj
                     DEFAULT SCREEN 110.
SELECTION-SCREEN END OF BLOCK tabb.
SELECTION-SCREEN SKIP.
SELECTION-SCREEN COMMENT /1(60) cmt_ver MODIF ID ver.
SELECTION-SCREEN COMMENT /1(60) cmt_url MODIF ID ver.

*Slinkee tab
SELECTION-SCREEN BEGIN OF SCREEN 110 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK main WITH FRAME.
SELECTION-SCREEN BEGIN OF BLOCK splk WITH FRAME TITLE text-slk.
PARAMETERS import TYPE c RADIOBUTTON GROUP 2 DEFAULT &apos;X&apos;
  USER-COMMAND updown.
PARAMETERS export TYPE c RADIOBUTTON GROUP 2.
SELECTION-SCREEN END OF BLOCK splk.

SELECTION-SCREEN BEGIN OF BLOCK opt WITH FRAME TITLE text-opt.
PARAMETERS filename(300) LOWER CASE TYPE c MODIF ID did.
PARAMETERS slpkg  TYPE tadir-devclass MODIF ID did.
PARAMETERS overwr TYPE c AS CHECKBOX MODIF ID did.
PARAMETERS plugin TYPE ko100-object MODIF ID uid.
PARAMETERS objname(40) TYPE c MODIF ID uid.
SELECTION-SCREEN END OF BLOCK opt.
SELECTION-SCREEN END OF BLOCK main.
SELECTION-SCREEN END OF SCREEN 110.

*Nugget tab
SELECTION-SCREEN BEGIN OF SCREEN 120 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK main2 WITH FRAME.
SELECTION-SCREEN BEGIN OF BLOCK splk2 WITH FRAME TITLE text-slk.
PARAMETERS nugi TYPE c RADIOBUTTON GROUP 3 DEFAULT &apos;X&apos;
  USER-COMMAND updown.
PARAMETERS nugd TYPE c RADIOBUTTON GROUP 3.
SELECTION-SCREEN ULINE.
PARAMETERS nugc TYPE c RADIOBUTTON GROUP 3.
PARAMETERS nuga TYPE c RADIOBUTTON GROUP 3.
PARAMETERS nugp TYPE c RADIOBUTTON GROUP 3.
PARAMETERS nugr TYPE c RADIOBUTTON GROUP 3.
SELECTION-SCREEN END OF BLOCK splk2.

SELECTION-SCREEN BEGIN OF BLOCK opt2 WITH FRAME TITLE text-opt.
PARAMETERS nuggnam(300) TYPE c MODIF ID nnm.
PARAMETERS nplugin TYPE  ko100-object MODIF ID npg.
PARAMETERS nobjnam(40) TYPE c MODIF ID npg.
*      parameters nPlugIn type  KO100-object modif id npg.
PARAMETER package      TYPE tadir-devclass MODIF ID npc.
SELECT-OPTIONS  reqnugg FOR e071-trkorr NO INTERVALS
  NO-EXTENSION MODIF ID rnm.
PARAMETER nugfile(300) LOWER CASE TYPE c MODIF ID nfl.
PARAMETERS novrwr TYPE c AS CHECKBOX MODIF ID now.
SELECTION-SCREEN END OF BLOCK opt2.
SELECTION-SCREEN END OF BLOCK main2.
SELECTION-SCREEN END OF SCREEN 120.
*\--------------------------------------------------------------------/


*/----------------------selection screen events-----------------------\
INITIALIZATION.
  CALL METHOD zsaplink=&gt;getplugins(
    CHANGING
      objecttable = objecttable ).

  IMPORT isslinkee FROM MEMORY ID &apos;ISSLNK&apos;.

  IF isslinkee = &apos;X&apos;.
    tabb-dynnr = 110.
    tabb-activetab = &apos;OBJ&apos;.
  ELSE.
    tabb-dynnr   = 120.
    tabb-activetab = &apos;NUGG&apos;.
  ENDIF.

AT SELECTION-SCREEN.
  CASE sscrfields-ucomm.
    WHEN &apos;OBJ&apos;.
      isslinkee = &apos;X&apos;.
    WHEN &apos;NUGG&apos;.
      isslinkee = &apos; &apos;.
  ENDCASE.
  EXPORT isslinkee TO MEMORY ID &apos;ISSLNK&apos;.

AT SELECTION-SCREEN OUTPUT.
*** hide/show fields according to current selection
  IF import = &apos;X&apos;.
    hidid = &apos;UID&apos;.
    IF slpkg IS INITIAL.
      slpkg = &apos;$TMP&apos;.
    ENDIF.
  ELSEIF export = &apos;X&apos;.
    hidid = &apos;DID&apos;.
  ENDIF.
  &quot; Set default devclass for import
  IF nugi = &apos;X&apos; AND package IS INITIAL.
    package = &apos;$TMP&apos;.
  ENDIF.

  LOOP AT SCREEN.

    IF screen-group1 = hidid.
      screen-active    = &apos;0&apos;.
      screen-invisible = &apos;1&apos;.
    ENDIF.

    MODIFY SCREEN.

  ENDLOOP.

  LOOP AT SCREEN.
    IF nugc = &apos;X&apos;.
      IF screen-group1 = &apos;NNM&apos;.
        screen-active    = &apos;1&apos;.
        screen-invisible = &apos;0&apos;.
        MODIFY SCREEN.
      ELSEIF screen-group1 = &apos;NPG&apos;
          OR screen-group1 = &apos;NFL&apos;
          OR screen-group1 = &apos;NOW&apos;
          OR screen-group1 = &apos;NPC&apos;
          OR screen-group1 = &apos;RNM&apos;.
        screen-active    = &apos;0&apos;.
        screen-invisible = &apos;1&apos;.
        MODIFY SCREEN.
      ENDIF.
    ELSEIF nugi = &apos;X&apos;.
      IF   screen-group1 = &apos;NFL&apos;
        OR screen-group1 = &apos;NOW&apos;.
        screen-active    = &apos;1&apos;.
        screen-invisible = &apos;0&apos;.
        MODIFY SCREEN.
      ELSEIF screen-group1 = &apos;NNM&apos;
          OR screen-group1 =&apos;NPG&apos;
          OR screen-group1 = &apos;RNM&apos;.
        screen-active    = &apos;0&apos;.
        screen-invisible = &apos;1&apos;.
        MODIFY SCREEN.
      ENDIF.
    ELSEIF nuga = &apos;X&apos;.
      IF   screen-group1 = &apos;NFL&apos;
        OR screen-group1 = &apos;NPG&apos;.
        screen-active    = &apos;1&apos;.
        screen-invisible = &apos;0&apos;.
        MODIFY SCREEN.
      ELSEIF screen-group1 = &apos;NNM&apos;
          OR screen-group1 = &apos;NOW&apos;
          OR screen-group1 = &apos;NPC&apos;
          OR screen-group1 = &apos;RNM&apos;.
        screen-active    = &apos;0&apos;.
        screen-invisible = &apos;1&apos;.
        MODIFY SCREEN.
      ENDIF.
    ELSEIF nugp = &apos;X&apos;.
      IF   screen-group1 = &apos;NFL&apos;
        OR screen-group1 = &apos;NPC&apos;.
        screen-active    = &apos;1&apos;.
        screen-invisible = &apos;0&apos;.
        MODIFY SCREEN.
      ELSEIF screen-group1 = &apos;NNM&apos;
          OR screen-group1 = &apos;NOW&apos;
          OR screen-group1 = &apos;NPG&apos;
          OR screen-group1 = &apos;RNM&apos;.
        screen-active    = &apos;0&apos;.
        screen-invisible = &apos;1&apos;.
        MODIFY SCREEN.
      ENDIF.
    ELSEIF nugd = &apos;X&apos;.
      IF screen-group1 = &apos;NFL&apos;.
        screen-active = &apos;1&apos;.
        screen-invisible = &apos;0&apos;.
        MODIFY SCREEN.
      ELSEIF screen-group1 = &apos;NNM&apos;
          OR screen-group1 = &apos;NPG&apos;
          OR screen-group1 = &apos;NOW&apos;
          OR screen-group1 = &apos;NPC&apos;
          OR screen-group1 = &apos;RNM&apos;.
        screen-active    = &apos;0&apos;.
        screen-invisible = &apos;1&apos;.
        MODIFY SCREEN.
      ENDIF.
    ELSEIF nugr = &apos;X&apos;.
      IF   screen-group1 = &apos;NFL&apos;
        OR screen-group1 = &apos;RNM&apos;.
        screen-active    = &apos;1&apos;.
        screen-invisible = &apos;0&apos;.
        MODIFY SCREEN.
      ELSEIF screen-group1 = &apos;NNM&apos;
          OR screen-group1 = &apos;NOW&apos;
          OR screen-group1 = &apos;NPG&apos;
          OR screen-group1 = &apos;NPC&apos;.
        screen-active    = &apos;0&apos;.
        screen-invisible = &apos;1&apos;.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.
  ENDLOOP.

*** value request for input fields
AT SELECTION-SCREEN ON VALUE-REQUEST FOR plugin.
  REFRESH pluginlist.
  LOOP AT objecttable INTO objectline.
    MOVE-CORRESPONDING objectline TO pluginline.
    APPEND pluginline TO pluginlist.
  ENDLOOP.

  CALL FUNCTION &apos;F4IF_INT_TABLE_VALUE_REQUEST&apos;
    EXPORTING
      retfield        = &apos;OBJECT&apos;
      window_title    = &apos;Installed Plugins&apos;(inp)
      dynpprog        = sy-repid
      dynpnr          = &apos;1000&apos;
      dynprofield     = &apos;PLUGIN&apos;
      value_org       = &apos;S&apos;
    TABLES
      value_tab       = pluginlist
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR nplugin.
  REFRESH pluginlist.
  LOOP AT objecttable INTO objectline.
    MOVE-CORRESPONDING objectline TO pluginline.
    APPEND pluginline TO pluginlist.
  ENDLOOP.

  CALL FUNCTION &apos;F4IF_INT_TABLE_VALUE_REQUEST&apos;
    EXPORTING
      retfield        = &apos;OBJECT&apos;
      window_title    = &apos;Installed Plugins&apos;(inp)
      dynpprog        = sy-repid
      dynpnr          = &apos;1000&apos;
      dynprofield     = &apos;NPLUGIN&apos;
      value_org       = &apos;S&apos;
    TABLES
      value_tab       = pluginlist
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR filename.
  CALL METHOD cl_gui_frontend_services=&gt;file_open_dialog
    EXPORTING
      multiselection    = abap_false
      file_filter       = &apos;*.slnk&apos;
      default_extension = &apos;slnk&apos;
    CHANGING
      file_table        = retfiletable
      rc                = retrc
      user_action       = retuseraction.
  READ TABLE retfiletable INTO filename INDEX 1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR nugfile.
  CALL METHOD cl_gui_frontend_services=&gt;file_open_dialog
    EXPORTING
      multiselection    = abap_false
      file_filter       = &apos;Nugget files (*.nugg)|*.nugg|&apos;
      default_extension = &apos;nugg&apos;
    CHANGING
      file_table        = retfiletable
      rc                = retrc
      user_action       = retuseraction.
  READ TABLE retfiletable INTO nugfile INDEX 1.

* begin--&gt;search help on objname according to selected plugin
* provided by Michael Diehl
AT SELECTION-SCREEN ON VALUE-REQUEST FOR objname.
  DATA l_object_type LIKE  euobj-id.
* l_object_type = plugin.  &quot;commented ewH

*ewH--&gt;get most current value of plugin param
  PERFORM get_current_screen_value USING &apos;PLUGIN&apos; &apos;0110&apos;
                                CHANGING l_object_type.

  IF  l_object_type IS NOT INITIAL.
*  rrq --&gt; START of implementation for object specific value help

    DATA: temp_object TYPE ko100-object.
*   move the object type to a field like the ObjectTable expects
    temp_object = l_object_type.
    READ TABLE objecttable INTO objectline WITH KEY object = temp_object.
    IF sy-subrc = 0.
*    if it is found...intanciate it so you can call the right value help
      CREATE OBJECT targetobject
        TYPE
          (objectline-classname)
        EXPORTING
          name                   = _objname.
      _objtype = l_object_type.
      CALL METHOD targetobject-&gt;valuehelp
        EXPORTING
          i_objtype = _objtype
        RECEIVING
          e_objname = _objname.
      objname = _objname.
    ENDIF.

*commented out...moved logic to instance method of ZSAPLINK.  to be overwritten by
*objects that don&apos;t use the repository Info_system f4 Function
*   CALL FUNCTION &apos;REPOSITORY_INFO_SYSTEM_F4&apos;
*     EXPORTING
*       object_type           = l_object_type
*       object_name           = objname
*       suppress_selection    = &apos;X&apos;
*       use_alv_grid          = &apos;&apos;
*       without_personal_list = &apos;&apos;
*     IMPORTING
*       object_name_selected  = objname
*     EXCEPTIONS
*       cancel                = 1.
*&lt;-- rrq end of implentation for object specific value help
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR nobjnam.
  DATA l_object_type LIKE  euobj-id.
* l_object_type = nplugin. &quot;commented ewH

*ewH--&gt;get most current value of plugin param
  PERFORM get_current_screen_value USING &apos;NPLUGIN&apos; &apos;0120&apos;
                                CHANGING l_object_type.

  IF  l_object_type IS NOT INITIAL.
*  rrq --&gt; START of implementation for object specific value help

    DATA: temp_object TYPE ko100-object.
*   move the object type to a field like the ObjectTable expects
    temp_object = l_object_type.
    READ TABLE objecttable INTO objectline WITH KEY object = temp_object.
    IF sy-subrc = 0.
*    if it is found...intanciate it so you can call the right value help
      CREATE OBJECT targetobject
        TYPE
          (objectline-classname)
        EXPORTING
          name                   = _objname.
      _objtype = l_object_type.
      CALL METHOD targetobject-&gt;valuehelp
        EXPORTING
          i_objtype = _objtype
        RECEIVING
          e_objname = _objname.
      nobjnam = _objname.


    ENDIF.
*commented out...moved logic to instance method of ZSAPLINK.  to be overwritten by
*objects that don&apos;t use the repository Info_system f4 Function
*   CALL FUNCTION &apos;REPOSITORY_INFO_SYSTEM_F4&apos;
*     EXPORTING
*       object_type           = l_object_type
*       object_name           = objname
*       suppress_selection    = &apos;X&apos;
*       use_alv_grid          = &apos;&apos;
*       without_personal_list = &apos;&apos;
*     IMPORTING
*       object_name_selected  = objname
*     EXCEPTIONS
*       cancel                = 1.
*&lt;-- rrq end of implentation for object specific value help
  ENDIF.
* &lt;--end of search help on objname according to selected plugin
* provided by Michael Diehl

AT SELECTION-SCREEN ON VALUE-REQUEST FOR reqnugg-low.
  iv_organizer_type = &apos;W&apos;.
*  is_selection-reqstatus = &apos;R&apos;.
  CALL FUNCTION &apos;TR_PRESENT_REQUESTS_SEL_POPUP&apos;
    EXPORTING
      iv_organizer_type   = iv_organizer_type
      is_selection        = is_selection
    IMPORTING
      es_selected_request = es_selected_request
      es_selected_task    = es_selected_task.

  reqnugg-low = es_selected_request-trkorr.


AT LINE-SELECTION.
  IF gv_version_line IS NOT INITIAL.
    PERFORM show_version_info.
    CLEAR gv_version_line.
  ENDIF.

*\--------------------------------------------------------------------/

*/----------------------main------------------------------------------\
START-OF-SELECTION.
  CLEAR: errormsg, statusmsg.
************* S L I N K E E *************
  IF isslinkee IS NOT INITIAL.
    _objname = objname.
    IF export = &apos;X&apos;.
*   Export slinkee
      PERFORM slinkee_export.
    ELSEIF import = &apos;X&apos;.
*   Import slinkee
      PERFORM slinkee_import.
    ENDIF.
  ELSE.
************* N U G G E T *************
    IF nugc = &apos;X&apos;.
*   create empty nugget
      PERFORM nugget_create.
    ELSEIF nuga = &apos;X&apos;.
*   add object to nugget
      PERFORM nugget_add_object.
    ELSEIF nugi = &apos;X&apos;.
*   import nugget
      PERFORM nugget_import.
    ELSEIF nugd = &apos;X&apos;.
*   display objects in a nugget
      PERFORM nugget_display.
    ELSEIF nugp = &apos;X&apos;.
*   add package to nugget
      PERFORM nugget_add_package.
*   rrq: enhancement 42--&gt;
    ELSEIF nugr = &apos;X&apos;.
*   add objects from a transport to a nugget
      PERFORM nugget_add_from_transport.
    ENDIF.
  ENDIF.

*\--------------------------------------------------------------------/

*/----------------------displayXMLOnScreen----------------------------\
FORM displayxmlonscreen USING xmlstring TYPE string.
  DATA printxmldoc TYPE REF TO cl_xml_document.
  DATA rc TYPE sysubrc.

  CREATE OBJECT printxmldoc.
  rc = printxmldoc-&gt;parse_string( xmlstring ).
  CALL METHOD printxmldoc-&gt;display( ).

ENDFORM.                    &quot;displayXMLOnScreen
*\--------------------------------------------------------------------/

*/----------------------downloadXMLToLM-------------------------------\
FORM downloadxmltolm USING   deffilename TYPE string
                             xmlstring TYPE string
                    CHANGING _errorflag TYPE flag.

  DATA retfilename TYPE string.
  DATA retpath TYPE string.
  DATA retfullpath TYPE string.
  DATA retuseract TYPE i.
  DATA deffilename_cleaned TYPE string.

  CLEAR _errorflag.

  &quot;*--- get rid of namespace slashes ---*
  deffilename_cleaned = deffilename.
  REPLACE ALL OCCURRENCES OF &apos;/&apos; IN deffilename_cleaned WITH &apos;.&apos;.

  CALL METHOD cl_gui_frontend_services=&gt;file_save_dialog
    EXPORTING
      default_file_name = deffilename_cleaned
    CHANGING
      filename          = retfilename
      path              = retpath
      fullpath          = retfullpath
      user_action       = retuseract.

  IF retuseract &lt;&gt; 0.
    _errorflag = &apos;X&apos;.
  ELSE.
    PERFORM putonmachine USING retfullpath xmlstring.
  ENDIF.


ENDFORM.                    &quot;downloadXMLToLM
*\--------------------------------------------------------------------/


*/------------------------putOnMachine--------------------------------\
FORM putonmachine USING fullpath TYPE string xmlstring TYPE string.

*rrq: issue 43--&gt; replace binary with char table
*old code removed, use subversion for recovery
*types: begin of t_char,
*        maxChar(65535) type C,
*       end of t_char.

*data: tempTable_char type table of t_char,
*  DATA: temptable_char TYPE table_of_strings,
*        tempstring TYPE string.
  &quot; Gregor Wolf, 2012-02-19: Switch to binary download as it&apos;s done in ZAKE
  DATA xlm_xstring  TYPE xstring.
  DATA temptable    TYPE w3mimetabtype.
  DATA bin_filesize TYPE i.

  IF retuseract = 0.
    &quot; Gregor Wolf, 2012-02-19:
    &quot; Independent of Server OS the download should always use Windows Linebreaks
    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=&gt;cr_lf
      IN xmlstring WITH cl_abap_char_utilities=&gt;newline.
    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=&gt;newline
      IN xmlstring WITH cl_abap_char_utilities=&gt;cr_lf.

    CALL FUNCTION &apos;SCMS_STRING_TO_XSTRING&apos;
      EXPORTING
        text   = xmlstring
      IMPORTING
        buffer = xlm_xstring.

    CALL FUNCTION &apos;SCMS_XSTRING_TO_BINARY&apos;
      EXPORTING
        buffer        = xlm_xstring
      IMPORTING
        output_length = bin_filesize
      TABLES
        binary_tab    = temptable.

    cl_gui_frontend_services=&gt;gui_download(
       EXPORTING
         bin_filesize = bin_filesize
         filename     = fullpath
         filetype     = &apos;BIN&apos;
       CHANGING
         data_tab     = temptable
       EXCEPTIONS
         file_write_error          = 1
         no_batch                  = 2
         gui_refuse_filetransfer   = 3
         invalid_type              = 4
         no_authority              = 5
         unknown_error             = 6
         header_not_allowed        = 7
         separator_not_allowed     = 8
         filesize_not_allowed      = 9
         header_too_long           = 10
         dp_error_create           = 11
         dp_error_send             = 12
         dp_error_write            = 13
         unknown_dp_error          = 14
         access_denied             = 15
         dp_out_of_memory          = 16
         disk_full                 = 17
         dp_timeout                = 18
         file_not_found            = 19
         dataprovider_exception    = 20
         control_flush_error       = 21
         not_supported_by_gui      = 22
         error_no_gui              = 23
         OTHERS                    = 24
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
*    SPLIT xmlstring AT cl_abap_char_utilities=&gt;cr_lf
*    INTO TABLE temptable_char.

*    CALL METHOD cl_gui_frontend_services=&gt;gui_download
*      EXPORTING
*        filename = fullpath
*        filetype = &apos;DAT&apos;
*      CHANGING
*        data_tab = temptable_char.
  ENDIF.
*&lt;--rrq: issue 43
ENDFORM.                    &quot;putOnMachine
*\--------------------------------------------------------------------/


*/----------------------uploadXMLFromLM-------------------------------\
FORM uploadxmlfromlm USING p_filename xmlstring TYPE string .
  DATA retfiletable TYPE filetable.
  DATA retrc TYPE sysubrc.
  DATA retuseraction TYPE i.
  DATA temptable TYPE table_of_strings.
  DATA temptable_bin TYPE TABLE OF x255.
  DATA filelength TYPE i.
  DATA l_filename TYPE string.

  l_filename = p_filename.
  CALL METHOD cl_gui_frontend_services=&gt;gui_upload
    EXPORTING
      filename                = l_filename
      filetype                = &apos;BIN&apos;       &quot; File Type Binary
    IMPORTING
      filelength              = filelength
    CHANGING
      data_tab                = temptable_bin
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      not_supported_by_gui    = 17
      error_no_gui            = 18
      OTHERS                  = 19.
  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN &apos;1&apos;.
        PERFORM writemessage USING &apos;E&apos; &apos;File Open Error&apos;.
        sy-subrc = 4.
        EXIT.
      WHEN OTHERS.
        PERFORM writemessage USING &apos;E&apos; &apos;Unknown Error occured&apos;.
        sy-subrc = 4.
        EXIT.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;SCMS_BINARY_TO_STRING&apos;
    EXPORTING
      input_length = filelength
    IMPORTING
      text_buffer  = xmlstring
    TABLES
      binary_tab   = temptable_bin
    EXCEPTIONS
      OTHERS       = 1.
  IF sy-subrc &lt;&gt; 0.
    &quot; Just catch the sy-subrc when there was nothing replaced
    sy-subrc = 0.
  ENDIF.
*  call method CL_GUI_FRONTEND_SERVICES=&gt;GUI_UPLOAD
*        exporting
*          FILENAME = l_fileName
*        changing
*          data_tab = tempTable.
*  PERFORM createstring USING temptable CHANGING xmlstring.

ENDFORM.                    &quot;uploadXMLFromLM
*\--------------------------------------------------------------------/

**/----------------------createString----------------------------------\
*FORM createstring
*      USING
*        temptable TYPE table_of_strings
*      CHANGING
*        bigstring TYPE string.
*  DATA stemp TYPE string.
*  LOOP AT temptable INTO stemp.
*    CONCATENATE bigstring stemp cl_abap_char_utilities=&gt;cr_lf
*      INTO bigstring.
*  ENDLOOP.
*
*ENDFORM.                    &quot;createString
**\--------------------------------------------------------------------/

*/----------------------installObject---------------------------------\
FORM installobject USING l_ixmldocument TYPE REF TO if_ixml_document
                         l_overwriteflag TYPE flag
                         VALUE(l_package) TYPE tadir-devclass
                CHANGING l_errorflag TYPE flag
                         l_message TYPE string.

  DATA l_objname TYPE string.
  DATA l_objtype TYPE string.
*  DATA l_objtable TYPE TABLE OF t_objecttable.                             &quot; del Stefan
  STATICS l_objtable TYPE TABLE OF t_objecttable.                           &quot; ins Stefan
  DATA l_objline TYPE t_objecttable.
  DATA l_targetobject TYPE REF TO zsaplink.
  DATA l_installobject TYPE string.
  DATA l_excclass TYPE REF TO zcx_saplink.

  CLEAR l_errorflag.
  TRY.
      CALL METHOD zsaplink=&gt;getobjectinfofromixmldoc
        EXPORTING
          ixmldocument = l_ixmldocument
        IMPORTING
          objtypename  = l_objtype
          objname      = l_objname.
    CATCH zcx_saplink.
      l_errorflag = &apos;X&apos;.
      l_message = &apos;Error retrieving object information ixml document&apos;.
  ENDTRY.

  IF l_objtable IS INITIAL.                                                 &quot; ins Stefan
    CALL METHOD zsaplink=&gt;getplugins( CHANGING objecttable = l_objtable ).
  ENDIF.                                                                    &quot; ins Stefan

  READ TABLE l_objtable INTO l_objline WITH KEY object = l_objtype.

  IF sy-subrc &lt;&gt; 0.
    CONCATENATE &apos;There is no installed SAPlink plugin for object type&apos;
      l_objtype l_objline-text INTO l_message SEPARATED BY space.
    l_errorflag = &apos;X&apos;.
  ELSE.
    CREATE OBJECT l_targetobject
      TYPE
        (l_objline-classname)
      EXPORTING
        name                  = l_objname.
    IF l_package IS INITIAL.
      l_package = &apos;$TMP&apos;.
    ENDIF.
    TRY.
        l_installobject = l_targetobject-&gt;createobjectfromixmldoc(
                                        ixmldocument = l_ixmldocument
                                        devclass     = l_package  &quot;Allow overwrite of default devclass.
                                        overwrite    = l_overwriteflag ).
*    bad times
      CATCH zcx_saplink INTO l_excclass.
        l_message = l_excclass-&gt;get_text( ).
        l_errorflag = &apos;X&apos;.
    ENDTRY.
*   good times
    IF l_installobject IS NOT INITIAL.
      CONCATENATE &apos;Installed: &apos; l_objtype &apos;-&apos; l_installobject
       INTO l_message SEPARATED BY space.
    ENDIF.
  ENDIF.

ENDFORM.                    &quot;installObject
*\--------------------------------------------------------------------/

*/----------------------confirmOverwrite------------------------------\
FORM confirmoverwrite USING l_objinfo TYPE string
                   CHANGING l_answer TYPE flag.

  DATA l_message TYPE string.
  DATA l_title TYPE string.

  CLEAR l_answer.
  l_title = &apos;Overwrite confirm. Proceed with CAUTION!&apos;.

  CONCATENATE &apos;You have selected to overwrite originals.&apos;
    l_objinfo &apos;will be overwritten. Are you sure?&apos;
    INTO l_message SEPARATED BY space.

  CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
    EXPORTING
      titlebar              = l_title
      text_question         = l_message
      text_button_1         = &apos;Yes&apos;
      text_button_2         = &apos;Yes to all&apos;
      default_button        = &apos;1&apos;
      display_cancel_button = &apos;X&apos;
    IMPORTING
      answer                = l_answer.
ENDFORM.                    &quot;confirmOverwrite
*\--------------------------------------------------------------------/

*/----------------------checkObject-----------------------------------\
FORM checkobject USING l_ixmldocument TYPE REF TO if_ixml_document
              CHANGING l_objtype      TYPE string
                       l_objname      TYPE string
                       l_pluginexists TYPE flag
                       l_objectexists TYPE flag.

  zsaplink=&gt;checkobject(
    EXPORTING
      i_ixmldocument = l_ixmldocument    &quot; IF_IXML_DOCUMENT
    IMPORTING
      e_objtype      = l_objtype
      e_objname      = l_objname
      e_pluginexists = l_pluginexists    &quot; General Flag
      e_objectexists = l_objectexists    &quot; General Flag
  ).

ENDFORM.                    &quot;checkObject
*\--------------------------------------------------------------------/

*/---------------------get_current_screen_value-----------------------\
FORM get_current_screen_value  USING    l_screen_field
                                        l_screen_number
                               CHANGING l_screen_value.

  DATA it_dynpfields TYPE STANDARD TABLE OF dynpread.
  DATA wa_dynpfields TYPE dynpread.


  wa_dynpfields-fieldname = l_screen_field.
  APPEND wa_dynpfields TO it_dynpfields.


  CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
    EXPORTING
      dyname               = sy-cprog
      dynumb               = l_screen_number
      translate_to_upper   = &apos;X&apos;
*     REQUEST              = &apos; &apos;
*     PERFORM_CONVERSION_EXITS = &apos; &apos;
*     PERFORM_INPUT_CONVERSION = &apos; &apos;
*     DETERMINE_LOOP_INDEX = &apos; &apos;
    TABLES
      dynpfields           = it_dynpfields
    EXCEPTIONS
      invalid_abapworkarea = 1
      invalid_dynprofield  = 2
      invalid_dynproname   = 3
      invalid_dynpronummer = 4
      invalid_request      = 5
      no_fielddescription  = 6
      invalid_parameter    = 7
      undefind_error       = 8
      double_conversion    = 9
      stepl_not_found      = 10
      OTHERS               = 11.
  IF sy-subrc &lt;&gt; 0.
*  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    READ TABLE it_dynpfields INTO wa_dynpfields
      WITH KEY fieldname = l_screen_field.
    IF sy-subrc = 0.
      l_screen_value = wa_dynpfields-fieldvalue.
    ENDIF.
  ENDIF.


ENDFORM.                    &quot; get_current_screen_value
*/---------------------writeMessage-----------------------\
FORM writemessage USING VALUE(p_type) TYPE sy-msgty
                        VALUE(p_msg).
  CASE p_type.
    WHEN &apos;E&apos; OR &apos;A&apos; OR &apos;X&apos;.
      WRITE / icon_led_red AS ICON.
    WHEN &apos;W&apos;.
      WRITE / icon_led_yellow AS ICON.
    WHEN OTHERS.
      WRITE / icon_led_green AS ICON.
  ENDCASE.

  WRITE p_msg.
ENDFORM.                    &quot;WriteMessage

*/-------------------------pf_status_set-------------------\
FORM pf_status_set USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS &apos;SELOBJ&apos; EXCLUDING rt_extab.

ENDFORM.                    &quot;pf_status_set
*/-------------------------user_command_user-------------------\
FORM user_command_user USING r_ucomm LIKE sy-ucomm
                  rs_selfield TYPE slis_selfield.
  CASE r_ucomm.
    WHEN &apos;TAKE&apos;.
      rs_selfield-exit = &apos;X&apos;.
  ENDCASE.
ENDFORM.                    &quot;user_command_user

*---------------build_fieldCatalog---------------------------------*
FORM build_fieldcatalog .
*** Display list to select the objects for downloading
  ls_fieldcat-fieldname = &apos;OBJECT&apos;.
  ls_fieldcat-seltext_l = &apos;Object/Plugin&apos;.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname = &apos;OBJECT_TXT&apos;.
  ls_fieldcat-seltext_l = &apos;Object/Plugin&apos;.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname = &apos;OBJ_NAME&apos;.
  ls_fieldcat-seltext_l = &apos;Object name&apos;.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname = &apos;DOWN_FLAG&apos;.
  ls_fieldcat-seltext_s = &apos;Plugin&apos;.
  ls_fieldcat-seltext_l =
  &apos;Plugin available&apos;.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname = &apos;MSG&apos;.
  ls_fieldcat-seltext_s = &apos;Message&apos;.
  ls_fieldcat-seltext_l =
  &apos;Status Message&apos;.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_layout-box_fieldname     = &apos;SELECT&apos;.
  ls_layout-f2code            = &apos;MYPICK&apos; .
  ls_layout-colwidth_optimize = &apos;X&apos;.
  ls_layout-lights_fieldname  = &apos;STATUS&apos;.
ENDFORM.                    &quot; build_fieldCatalog
*&amp;--------------------------------------------------------------------*
*&amp;      Form  ShowInitialGrid
FORM showinitialgrid  TABLES   p_objects.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      i_callback_program       = &apos;ZSAPLINK&apos;
      i_callback_pf_status_set = &apos;PF_STATUS_SET&apos;
      i_callback_user_command  = &apos;USER_COMMAND_USER&apos;
      i_grid_title             = &apos;Select objects&apos;
      it_fieldcat              = lt_fieldcat
      is_layout                = ls_layout
    TABLES
      t_outtab                 = p_objects
    EXCEPTIONS
      OTHERS                   = 0.

ENDFORM.                    &quot; ShowInitialGrid
*&amp;---------------------------------------------------------------------*
*&amp;      Form  showResultsGrid
FORM showresultsgrid  TABLES   p_objects.
*    ** Display results
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      i_callback_program      = &apos;ZSAPLINK&apos;
      i_callback_user_command = &apos;USER_COMMAND_USER&apos;
      it_fieldcat             = lt_fieldcat
      i_grid_title            = &apos;Download results&apos;
      is_layout               = ls_layout
    TABLES
      t_outtab                = p_objects
    EXCEPTIONS
      OTHERS                  = 0.

ENDFORM.                    &quot; showResultsGrid
*&amp;---------------------------------------------------------------------*
*&amp;      Form  check_objects
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM check_objects .
  DATA: lo_object  TYPE REF TO object,
        lo_saplink TYPE REF TO zsaplink,
        l_flag     TYPE flag,
        l_name     TYPE string.
  DATA: ptab      TYPE abap_parmbind_tab,
        ptab_line TYPE abap_parmbind.
  LOOP AT objects_package ASSIGNING &lt;obj&gt;.
*     Check what can be downloaded and what can not.
    READ TABLE objecttable INTO objectline
        WITH KEY object = &lt;obj&gt;-object.
    IF sy-subrc = 0.
* Validate if object is fully implemented and can be accessed
      REFRESH ptab.
      ptab_line-name = &apos;NAME&apos;.
      ptab_line-kind = cl_abap_objectdescr=&gt;exporting.
      l_name = &lt;obj&gt;-obj_name.
      GET REFERENCE OF l_name
              INTO ptab_line-value.
      INSERT ptab_line INTO TABLE ptab.

      CREATE OBJECT lo_object
        TYPE
          (objectline-classname)
        PARAMETER-TABLE
          ptab.
      lo_saplink ?= lo_object.
      l_flag = lo_saplink-&gt;checkexists( ).
*        Plug-in exists... set flag and make selected by default
      IF l_flag IS NOT INITIAL.
        &lt;obj&gt;-down_flag = &apos;X&apos;.
        &lt;obj&gt;-select = &apos;X&apos;.
      ELSE.
        DELETE TABLE objects_package FROM &lt;obj&gt;.
        CONTINUE.
      ENDIF.
    ELSE.
      &lt;obj&gt;-msg = &apos;No Plugin Available&apos;.
      &lt;obj&gt;-down_flag = &apos; &apos;.
    ENDIF.
*     get texts
    REFRESH tabletypesin.
    tabletypeline-object = &lt;obj&gt;-object.
    APPEND tabletypeline TO tabletypesin.

    CALL FUNCTION &apos;TRINT_OBJECT_TABLE&apos;
      TABLES
        tt_types_in  = tabletypesin
        tt_types_out = tabletypesout.

    LOOP AT tabletypesout INTO tabletypeoutline.
      &lt;obj&gt;-object      = tabletypeoutline-object.
      &lt;obj&gt;-object_txt = tabletypeoutline-text.
    ENDLOOP.

  ENDLOOP.
  SORT objects_package BY down_flag DESCENDING object ASCENDING.

ENDFORM.                    &quot; check_objects
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CreateEmptyNugget
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM createemptynugget USING p_nuggname.

  ixmldocument = zsaplink_nugget=&gt;createemptyxml(
    nuggetname = p_nuggname ).
  xml = zsaplink=&gt;convertixmldoctostring( ixmldocument ).
  CONCATENATE &apos;NUGG_&apos; p_nuggname &apos;.nugg&apos; INTO stemp.
  CLEAR errorflag.
  PERFORM downloadxmltolm USING stemp xml
                          CHANGING errorflag.
  IF errorflag IS NOT INITIAL.
    EXIT.
  ENDIF.

ENDFORM.                    &quot; CreateEmptyNugget

*rrq: enhancement 3 &amp; 42--&gt;
*&amp;---------------------------------------------------------------------*
*&amp;      Form  addObjectstoNugget
*&amp;---------------------------------------------------------------------*
FORM addobjectstonugget .

  PERFORM check_objects.
  PERFORM build_fieldcatalog.

  PERFORM showinitialgrid TABLES objects_package.

  IF sy-ucomm &lt;&gt; &apos;TAKE&apos;.
    RETURN.
  ENDIF .

*  Downloading
  CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;
    EXPORTING
      percentage = 1
      text       = &apos;Upload file&apos;.

  PERFORM uploadxmlfromlm USING nugfile xml.

  ixmldocument = zsaplink=&gt;convertstringtoixmldoc( xml ).

  TRY.
      CREATE OBJECT nugg
        EXPORTING
          ixmldocument = ixmldocument.
    CATCH zcx_saplink.
      MESSAGE &apos;Internal error createing nugget &apos; TYPE &apos;I&apos;.
      RETURN.
  ENDTRY.

  DESCRIBE TABLE objects_package LINES lv_count.
  LOOP AT objects_package ASSIGNING &lt;obj&gt;
  WHERE down_flag = &apos;X&apos; AND select = &apos;X&apos;.
    lv_pers = sy-tabix * 100 / lv_count .
    CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;
      EXPORTING
        percentage = lv_pers
        text       = &lt;obj&gt;-obj_name.

    _objname = &lt;obj&gt;-obj_name. &quot;nobjNam.
    stemp = &lt;obj&gt;-object.      &quot;nplugin.
    TRY.
        nugg-&gt;addobjecttonugget(
        objname = _objname objtype = stemp ).
      CATCH zcx_saplink INTO excclass.
        errormsg = excclass-&gt;get_text( ).
*        perform writeMessage using &apos;E&apos; errorMsg.
        &lt;obj&gt;-msg = errormsg.
        &lt;obj&gt;-status = 1.
        CONTINUE.
    ENDTRY.
    &lt;obj&gt;-msg = &apos;Added to nugget&apos;.
    &lt;obj&gt;-status = 3.
  ENDLOOP.

  READ TABLE objects_package INTO packageline
    WITH KEY status = 3. &quot;ewH:do not download if none added

  IF sy-subrc = 0.
    ixmldocument = nugg-&gt;createixmldocfromnugget( ).
    xml = zsaplink=&gt;convertixmldoctostring( ixmldocument ).
    stemp = nugfile.
    PERFORM putonmachine USING stemp xml.
  ENDIF.

  PERFORM showresultsgrid TABLES objects_package.

ENDFORM.                    &quot; addObjectstoNugget
*  &lt;--rrq: enhancement 3 &amp; 42

*&amp;---------------------------------------------------------------------*
*&amp;      Form  WRITE_PLUGIN_VERSION_INFO
*&amp;---------------------------------------------------------------------*
*  Inform of updated versions of plugins if information found in file
*----------------------------------------------------------------------*
FORM write_plugin_version_info USING io_ixml_document TYPE REF TO if_ixml_document
                                     iv_object_type   TYPE clike.

  DATA: rootnode         TYPE REF TO if_ixml_node,
        rootattr         TYPE REF TO if_ixml_named_node_map,
        attrnode         TYPE REF TO if_ixml_node,
        nodename         TYPE string,
        attributelist    TYPE REF TO if_ixml_named_node_map,
        nodeiterator     TYPE REF TO if_ixml_node_iterator,
        attributenode    TYPE REF TO if_ixml_node,
        value            TYPE string,
        name             TYPE string,
        ls_version_delta LIKE LINE OF gt_versions_delta.


  FIELD-SYMBOLS:&lt;value&gt;          TYPE any,
                &lt;ls_objecttable&gt; LIKE LINE OF objecttable.
*--------------------------------------------------------------------*
* Get Version information from class
*--------------------------------------------------------------------*
  READ TABLE objecttable ASSIGNING &lt;ls_objecttable&gt; WITH KEY object = iv_object_type.
  CHECK sy-subrc = 0. &quot; No corresponding plugin --&gt; we already display a message &quot;missing plugin&quot;
  ls_version_delta-version_sap = zsaplink=&gt;get_version_info_static( &lt;ls_objecttable&gt;-classname ).

*--------------------------------------------------------------------*
* Get Version information from ixml
*--------------------------------------------------------------------*
  CHECK io_ixml_document IS BOUND.  &quot; no need to continue if this is no valid ixml document
  rootnode ?= io_ixml_document-&gt;get_root_element( ).

  attributelist = rootnode-&gt;get_attributes( ).
  CHECK attributelist IS BOUND.
  nodeiterator = attributelist-&gt;create_iterator( ).
  CHECK nodeiterator IS BOUND.
  attributenode = nodeiterator-&gt;get_next( ).
  WHILE attributenode IS NOT INITIAL.
    name = attributenode-&gt;get_name( ).
    ASSIGN COMPONENT name OF STRUCTURE ls_version_delta-version_ixml TO &lt;value&gt;.
    IF sy-subrc = 0.
      &lt;value&gt; = attributenode-&gt;get_value( ).
    ENDIF.
    attributenode = nodeiterator-&gt;get_next( ).
  ENDWHILE.

*--------------------------------------------------------------------*
* Compare versions
*--------------------------------------------------------------------*
  ls_version_delta-classname =  &lt;ls_objecttable&gt;-classname.
* Major version
  IF ls_version_delta-version_ixml-zsaplink_plugin_major_version &lt; ls_version_delta-version_sap-zsaplink_plugin_major_version.
    RETURN.  &quot; we have a newer version --&gt; good
  ELSEIF ls_version_delta-version_ixml-zsaplink_plugin_major_version &gt; ls_version_delta-version_sap-zsaplink_plugin_major_version.
    WRITE: &apos;Major update in plugin&apos; COLOR 6,
           &lt;ls_objecttable&gt;-classname COLOR 3,
           &apos;. Update of plugin necessary --&gt; see information&apos; COLOR 6, icon_information AS ICON HOTSPOT ON.
    APPEND ls_version_delta  TO gt_versions_delta.
    gv_version_line = sy-tabix.
    HIDE  gv_version_line.
    CLEAR gv_version_line.
    RETURN.
  ENDIF.
* Major version equal - now check minor version
  IF ls_version_delta-version_ixml-zsaplink_plugin_minor_version &lt; ls_version_delta-version_sap-zsaplink_plugin_minor_version.
    RETURN.  &quot; we have a newer version --&gt; good
  ELSEIF ls_version_delta-version_ixml-zsaplink_plugin_minor_version &gt; ls_version_delta-version_sap-zsaplink_plugin_minor_version.
    WRITE: &apos;Minor update in plugin&apos; COLOR 7,
           &lt;ls_objecttable&gt;-classname COLOR 3,
           &apos;. Update of plugin recommended --&gt; see information&apos; COLOR 7, icon_information AS ICON HOTSPOT ON.
    APPEND ls_version_delta  TO gt_versions_delta.
    gv_version_line = sy-tabix.
    HIDE  gv_version_line.
    CLEAR gv_version_line.
    RETURN.
  ENDIF.
* Major and minor version equal - build-numer doesn&apos;t matter here


ENDFORM.                    &quot; WRITE_PLUGIN_VERSION_INFO


*&amp;---------------------------------------------------------------------*
*&amp;      Form  SHOW_VERSION_INFO
*&amp;---------------------------------------------------------------------*
FORM show_version_info.

  FIELD-SYMBOLS: &lt;ls_version_delta&gt; LIKE LINE OF gt_versions_delta.

  READ TABLE gt_versions_delta ASSIGNING &lt;ls_version_delta&gt; INDEX gv_version_line.
  CHECK sy-subrc = 0.

  WRITE:/ &apos;New version of class&apos;, &lt;ls_version_delta&gt;-classname COLOR 6,&apos;found&apos;.
  SKIP 2.
  IF &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_major_version &gt; &lt;ls_version_delta&gt;-version_sap-zsaplink_plugin_major_version.
    WRITE:/ &apos;Major version - Installed in SAP:&apos;  COLOR 7,                 &lt;ls_version_delta&gt;-version_sap-zsaplink_plugin_major_version COLOR 7,
          / &apos;Major version - Found  in   file:&apos;  COLOR 7 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_major_version COLOR 7.
  ELSEIF &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_minor_version &gt; &lt;ls_version_delta&gt;-version_sap-zsaplink_plugin_minor_version.
    WRITE:/ &apos;Minor version - Installed in SAP:&apos;  COLOR 7,                 &lt;ls_version_delta&gt;-version_sap-zsaplink_plugin_minor_version COLOR 7,
          / &apos;Minor version - Found  in   file:&apos;  COLOR 7 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_minor_version COLOR 7.
  ENDIF.
  WRITE:/   &apos;Build         - Installed in SAP:&apos;  COLOR 5 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_sap-zsaplink_plugin_build_version,
        /   &apos;Build         - Found   in  file:&apos;  COLOR 5 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_build_version.

  SKIP.
  WRITE:/   &apos;Info - Part1  - Found   in  file:&apos;  COLOR 5 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_info1,
        /   &apos;Info - Part2  - Found   in  file:&apos;  COLOR 5 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_info2,
        /   &apos;Info - Part3  - Found   in  file:&apos;  COLOR 5 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_info3,
        /   &apos;Info - Part4  - Found   in  file:&apos;  COLOR 5 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_info4,
        /   &apos;Info - Part5  - Found   in  file:&apos;  COLOR 5 INTENSIFIED OFF, &lt;ls_version_delta&gt;-version_ixml-zsaplink_plugin_info5.

ENDFORM.                    &quot; SHOW_VERSION_INFO

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SLINKEE_EXPORT
*&amp;---------------------------------------------------------------------*
FORM slinkee_export.
  IF plugin IS INITIAL.
    MESSAGE s208(00) WITH &apos;object type required&apos;.
    EXIT.
  ELSEIF _objname IS INITIAL.
    MESSAGE s208(00) WITH &apos;object name required&apos;.
    EXIT.
  ENDIF.
  READ TABLE objecttable INTO objectline WITH KEY object = plugin.
  IF sy-subrc &lt;&gt; 0.
    CONCATENATE &apos;Plugin for object type&apos;(plo) plugin
      &apos;is not installed on this system&apos;(noi) INTO errormsg
      SEPARATED BY space.
    PERFORM writemessage USING &apos;E&apos; errormsg.
    EXIT.
  ENDIF.
  CREATE OBJECT targetobject
    TYPE
      (objectline-classname)
    EXPORTING
      name                   = _objname.
  TRY.
      ixmldocument = targetobject-&gt;createixmldocfromobject( ).
    CATCH zcx_saplink INTO excclass.
      errormsg = excclass-&gt;get_text( ).
      PERFORM writemessage USING &apos;E&apos; errormsg.
  ENDTRY.
  IF errormsg IS NOT INITIAL.
    EXIT.
  ENDIF.
  xml = zsaplink=&gt;convertixmldoctostring( ixmldocument ).

  CONCATENATE plugin &apos;_&apos; _objname &apos;.slnk&apos; INTO deffilename.
  CLEAR errorflag.
  PERFORM downloadxmltolm USING deffilename xml
                          CHANGING errorflag.
  IF errorflag IS NOT INITIAL.
    MESSAGE s208(00) WITH &apos;Action cancelled&apos;.
    EXIT.
  ENDIF.
  PERFORM displayxmlonscreen USING xml.
ENDFORM.                    &quot; SLINKEE_EXPORT


*&amp;---------------------------------------------------------------------*
*&amp;      Form  SLINKEE_IMPORT
*&amp;---------------------------------------------------------------------*
FORM slinkee_import .
  IF filename IS INITIAL.
    MESSAGE s208(00) WITH &apos;slinkee filename required&apos;.
    EXIT.
  ENDIF.
  PERFORM uploadxmlfromlm USING filename xml.
  IF sy-subrc &lt;&gt; 0.
    EXIT.
  ENDIF.
  ixmldocument = zsaplink=&gt;convertstringtoixmldoc( xml ).
*     run some checks before install
  PERFORM checkobject USING ixmldocument
                      CHANGING _objtype
                               _objname
                               _pluginexists
                               _objectexists.
  MOVE _objtype TO plugin.
  READ TABLE objecttable INTO objectline WITH KEY object = plugin.

  IF _objtype = &apos;NUGG&apos;.
    MESSAGE s208(00) WITH &apos;use nugget tab for nugget import&apos;.
    EXIT.
  ELSEIF _pluginexists IS INITIAL.
    CONCATENATE &apos;Plugin for object type&apos;(plo) _objtype
      &apos;is not installed on this system&apos;(noi) INTO errormsg
      SEPARATED BY space.
    PERFORM writemessage USING &apos;E&apos; errormsg.
    EXIT.
  ELSEIF _objectexists = &apos;X&apos; AND overwr IS INITIAL.
    CONCATENATE _objtype objectline-text _objname
      &apos;already exists. Use overwrite orginals option to replace&apos;
      INTO errormsg SEPARATED BY space.
    PERFORM writemessage USING &apos;E&apos; errormsg.
    EXIT.
  ELSEIF _objectexists = &apos;X&apos; AND overwr = &apos;X&apos;.
    CONCATENATE _objtype _objname INTO stemp SEPARATED BY space.
    PERFORM confirmoverwrite USING stemp
                          CHANGING _flag.
    IF _flag = &apos;A&apos;. &quot;cancel
      PERFORM writemessage USING &apos;W&apos; &apos;Import cancelled by user&apos;.
      EXIT.
    ENDIF.
  ENDIF.

*     install object
  PERFORM installobject USING ixmldocument
                              overwr
                              slpkg
                     CHANGING errorflag
                              statusmsg.
  IF errorflag = &apos;X&apos;.
    PERFORM writemessage USING &apos;E&apos; statusmsg.
    EXIT.
  ELSE.
    PERFORM writemessage USING &apos;S&apos; statusmsg.
  ENDIF.
  MESSAGE s208(00) WITH &apos;Import successful&apos;.
ENDFORM.                    &quot; SLINKEE_IMPORT


*&amp;---------------------------------------------------------------------*
*&amp;      Form  NUGGET_CREATE
*&amp;---------------------------------------------------------------------*
FORM nugget_create .
  IF nuggnam IS INITIAL.
    MESSAGE s208(00) WITH &apos;enter name of new nugget to be created&apos;.
    EXIT.
  ENDIF.
  stemp = nuggnam.
  PERFORM createemptynugget USING stemp.
ENDFORM.                    &quot; NUGGET_CREATE


*&amp;---------------------------------------------------------------------*
*&amp;      Form  NUGGET_ADD_OBJECT
*&amp;---------------------------------------------------------------------*
FORM nugget_add_object .
  IF nplugin IS INITIAL.
    MESSAGE s208(00) WITH &apos;object type required&apos;.
    EXIT.
  ELSEIF nobjnam IS INITIAL.
    MESSAGE s208(00) WITH &apos;object name required&apos;.
    EXIT.
  ELSEIF nugfile IS INITIAL.
    MESSAGE s208(00) WITH &apos;nugget filename required&apos;.
    EXIT.
  ENDIF.
  READ TABLE objecttable INTO objectline WITH KEY object = nplugin.
  IF sy-subrc &lt;&gt; 0.
    CONCATENATE &apos;Plugin for object type&apos;(plo) nplugin
      &apos;is not installed on this system&apos;(noi) INTO errormsg
        SEPARATED BY space.
    PERFORM writemessage USING &apos;E&apos; errormsg.
    EXIT.
  ENDIF.
  stemp = nuggnam.
  PERFORM uploadxmlfromlm USING nugfile xml.
  IF sy-subrc &lt;&gt; 0.
    EXIT.
  ENDIF.
  ixmldocument = zsaplink=&gt;convertstringtoixmldoc( xml ).
  CREATE OBJECT nugg
    EXPORTING
      ixmldocument = ixmldocument.

  _objname = nobjnam.
  stemp = nplugin.

  TRY.
      nugg-&gt;addobjecttonugget( objname = _objname objtype = stemp ).
    CATCH zcx_saplink INTO excclass.
      errormsg = excclass-&gt;get_text( ).
      PERFORM writemessage USING &apos;E&apos; errormsg.
      EXIT.
  ENDTRY.
  ixmldocument = nugg-&gt;createixmldocfromnugget( ).
  xml = zsaplink=&gt;convertixmldoctostring( ixmldocument ).
*      concatenate  nuggNam &apos;.nugg&apos; into sTemp.
  stemp = nugfile.
  PERFORM putonmachine USING stemp xml.
ENDFORM.                    &quot; NUGGET_ADD_OBJECT


*&amp;---------------------------------------------------------------------*
*&amp;      Form  NUGGET_IMPORT
*&amp;---------------------------------------------------------------------*
FORM nugget_import .
  IF nugfile IS INITIAL.
    MESSAGE s208(00) WITH &apos;nugget filename required&apos;.
    EXIT.
  ENDIF.
  PERFORM uploadxmlfromlm USING nugfile xml.
  IF sy-subrc &lt;&gt; 0.
    EXIT.
  ENDIF.
  ixmldocument = zsaplink=&gt;convertstringtoixmldoc( xml ).
  nuggetname = zsaplink_nugget=&gt;getnuggetinfo( ixmldocument ).
  CONCATENATE &apos;Start import of nugget&apos; nuggetname INTO statusmsg
    SEPARATED BY space.

  PERFORM writemessage USING &apos;S&apos; statusmsg.
  SKIP.

  CREATE OBJECT nugg
    EXPORTING
      ixmldocument = ixmldocument.

*     check for installed plugins
  CLEAR errorflag.
  REFRESH it_nuggetobject.
  anxmldoc = nugg-&gt;getnextobject( ).
  WHILE anxmldoc IS NOT INITIAL.
    CLEAR: _objtype, _objname, _pluginexists, _objectexists,
           wa_nuggetobject.
    PERFORM checkobject USING anxmldoc
                        CHANGING _objtype
                                 _objname
                                 _pluginexists
                                 _objectexists.
    IF _pluginexists IS INITIAL.
      CONCATENATE &apos;Plugin for object type&apos;(plo) _objtype
        &apos;is not installed on this system&apos;(noi) INTO errormsg
        SEPARATED BY space.
      PERFORM writemessage USING &apos;E&apos; errormsg.
      errorflag = &apos;X&apos;.
    ELSEIF _objectexists = &apos;X&apos; AND novrwr IS INITIAL.
      CONCATENATE _objtype _objname &apos;already exists. Use overwrite&apos;
        &apos;orginals option to replace&apos;
          INTO errormsg SEPARATED BY space.
      PERFORM writemessage USING &apos;W&apos; errormsg.
      PERFORM write_plugin_version_info USING anxmldoc
                                              _objtype.

      errorflag = &apos;X&apos;.
    else.
      CONCATENATE _objtype _objname
          INTO errormsg SEPARATED BY space.
      PERFORM writemessage USING &apos;S&apos; errormsg.
      PERFORM write_plugin_version_info USING anxmldoc
                                              _objtype.
    ENDIF.
    wa_nuggetobject-objtype = _objtype.
    wa_nuggetobject-objname = _objname.
    wa_nuggetobject-exists = _objectexists.
    APPEND wa_nuggetobject TO it_nuggetobject.

    anxmldoc = nugg-&gt;getnextobject( ).
  ENDWHILE.

  IF errorflag = &apos;X&apos;.
    EXIT.
  ENDIF.

*     confirm overwrite
  LOOP AT it_nuggetobject INTO wa_nuggetobject WHERE exists = &apos;X&apos;.
    CLEAR _flag.
    CONCATENATE wa_nuggetobject-objtype wa_nuggetobject-objname
      INTO stemp SEPARATED BY space.
    PERFORM confirmoverwrite USING stemp
                          CHANGING _flag.
    IF _flag = &apos;1&apos;. &quot;yes
      CONTINUE.
    ELSEIF _flag = &apos;2&apos;. &quot;yes to all
      CLEAR errorflag.
      EXIT.
    ELSEIF _flag = &apos;A&apos;. &quot;cancel
      PERFORM writemessage USING &apos;W&apos; &apos;Import cancelled by user&apos;.
      errorflag = &apos;X&apos;.
      EXIT.
    ENDIF.
  ENDLOOP.

  IF errorflag = &apos;X&apos;.
    EXIT.
  ENDIF.

*     install
  nugg-&gt;reset( ). &quot;reset nugget iterator
  anxmldoc = nugg-&gt;getnextobject( ).
  WHILE anxmldoc IS NOT INITIAL.
    CLEAR statusmsg.
    PERFORM installobject USING anxmldoc
                                novrwr
                                package
                       CHANGING errorflag
                                statusmsg.
    IF errorflag = &apos;X&apos;.
      PERFORM writemessage USING &apos;E&apos; statusmsg.
      EXIT.
    ELSE.
      PERFORM writemessage USING &apos;S&apos; statusmsg.
      anxmldoc = nugg-&gt;getnextobject( ).
    ENDIF.
  ENDWHILE.

  IF errorflag = &apos;X&apos;.
    EXIT.
  ENDIF.
ENDFORM.                    &quot; NUGGET_IMPORT


*&amp;---------------------------------------------------------------------*
*&amp;      Form  NUGGET_DISPLAY
*&amp;---------------------------------------------------------------------*
FORM nugget_display .
  IF nugfile IS INITIAL.
    MESSAGE s208(00) WITH &apos;nugget filename required&apos;.
    EXIT.
  ENDIF.
  PERFORM uploadxmlfromlm USING nugfile xml.
  IF sy-subrc &lt;&gt; 0.
    EXIT.
  ENDIF.
  ixmldocument = zsaplink=&gt;convertstringtoixmldoc( xml ).
  TRY.
      nuggetname = zsaplink_nugget=&gt;getnuggetinfo( ixmldocument ).
    CATCH zcx_saplink.
      WRITE:/ &apos;Internal error in nuggethandling - program aborted&apos;.
      RETURN.
  ENDTRY.
  WRITE: / &apos;Object list for nugget &apos;, nuggetname. SKIP.

  CREATE OBJECT nugg
    EXPORTING
      ixmldocument = ixmldocument.
  anxmldoc = nugg-&gt;getnextobject( ).

  IF anxmldoc IS INITIAL.
    errormsg = &apos;You have an empty Nugget&apos;.
    PERFORM writemessage USING &apos;W&apos; errormsg.
    EXIT.
  ENDIF.

  WHILE anxmldoc IS NOT INITIAL.
    TRY.
        CALL METHOD zsaplink=&gt;getobjectinfofromixmldoc
          EXPORTING
            ixmldocument = anxmldoc
          IMPORTING
            objtypename  = _objtype
            objname      = _objname.
      CATCH zcx_saplink.
        errormsg = &apos;You have a corrupt Nugget&apos;.
        PERFORM writemessage USING &apos;E&apos; errormsg.
        EXIT.
    ENDTRY.
    CONCATENATE _objtype _objname INTO statusmsg SEPARATED BY space.
    PERFORM writemessage USING &apos;S&apos; statusmsg.
    PERFORM write_plugin_version_info USING anxmldoc
                                            _objtype.
    anxmldoc = nugg-&gt;getnextobject( ).
  ENDWHILE.

ENDFORM.                    &quot; NUGGET_DISPLAY
*&amp;---------------------------------------------------------------------*
*&amp;      Form  NUGGET_ADD_PACKAGE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM nugget_add_package .
*   rrq: enhancement 3--&gt;
  IF package  IS INITIAL.
    MESSAGE s208(00) WITH &apos;package required&apos;.
    EXIT.
  ENDIF.
  IF nugfile IS INITIAL.
    MESSAGE s208(00) WITH &apos;nugget filename required&apos;.
    EXIT.
  ENDIF.
  &quot;// Mar: Added logic discard deleted objects from Package - 10/05/2009
  IF sy-saprl NE &apos;701&apos;.
    &quot;// Mar: Added logic discard deleted objects from Package - 10/05/2009

    SELECT object obj_name srcsystem       &quot; ##TOO_MANY_ITAB_FIELDS
        FROM tadir
        INTO CORRESPONDING FIELDS OF TABLE objects_package
        WHERE devclass  EQ package
        AND  pgmid      EQ &apos;R3TR&apos;.

    &quot;// Mar: Added logic discard deleted objects from Package - 10/05/2009
  ELSE.
    SELECT object obj_name srcsystem      &quot; ##TOO_MANY_ITAB_FIELDS
        FROM tadir
        INTO CORRESPONDING FIELDS OF TABLE objects_package
        WHERE devclass  EQ package
        AND  pgmid      EQ &apos;R3TR&apos;
        AND  delflag    NE &apos;X&apos;.
  ENDIF.
  &quot;// Mar: Added logic discard deleted objects from Package - 10/05/2009

  IF sy-subrc &lt;&gt; 0.
    MESSAGE s208(00) WITH &apos;Package does not exist or empty&apos;.
    RETURN.
  ENDIF.

  PERFORM addobjectstonugget.
*   &lt;-- rrq: enhancement 3
ENDFORM.                    &quot; NUGGET_ADD_PACKAGE


*&amp;---------------------------------------------------------------------*
*&amp;      Form  NUGGET_ADD_FROM_TRANSPORT
*&amp;---------------------------------------------------------------------*
FORM nugget_add_from_transport .
  DATA: reqname TYPE string.

  DATA: l_trkorr  TYPE e07t-trkorr,
        l_as4text TYPE e07t-as4text.

  IF nugfile IS INITIAL.
    MESSAGE s208(00) WITH &apos;nugget filename required&apos;.
    EXIT.
  ENDIF.

  IF reqnugg[] IS INITIAL.
    MESSAGE s208(00) WITH &apos;Request number required&apos;.
    EXIT.
  ENDIF.

  SELECT SINGLE trkorr FROM e070 INTO l_trkorr
    WHERE trkorr IN reqnugg.

  IF sy-subrc &lt;&gt; 0.
    MESSAGE s208(00) WITH &apos;Transport not found&apos;.
    EXIT.
  ENDIF.

  SELECT SINGLE trkorr as4text
  FROM  e07t
  INTO (l_trkorr, l_as4text)
  WHERE  trkorr   IN reqnugg
    AND  langu    EQ sy-langu.

*     ewH--&gt;retrieve tasks as well as transports
  RANGES: ra_reqnugg FOR e070-trkorr.
  DATA: wa_trkorr  TYPE e070-trkorr,
        it_trkorr  TYPE TABLE OF e070-trkorr,
        wa_reqnugg LIKE LINE OF ra_reqnugg.

  SELECT trkorr FROM e070 INTO TABLE it_trkorr
    WHERE strkorr IN reqnugg.

  ra_reqnugg[] = reqnugg[].

  LOOP AT it_trkorr INTO wa_trkorr.
    wa_reqnugg-sign = &apos;I&apos;.
    wa_reqnugg-option = &apos;EQ&apos;.
    wa_reqnugg-low = wa_trkorr.
    APPEND wa_reqnugg TO ra_reqnugg.
  ENDLOOP.
*     &lt;--ewH

  SELECT object obj_name
  FROM  e071
  INTO TABLE it_requestobject
*      WHERE  TRKORR in ReqNugg.
  WHERE  trkorr IN ra_reqnugg &quot;ewH
  AND pgmid = &apos;R3TR&apos;. &quot;ewH: don&apos;t need subobjects

  IF sy-subrc = 0.
    reqname = l_trkorr.
  ELSE.
    MESSAGE s208(00) WITH &apos;No R3TR objects in request&apos;.
    EXIT.
  ENDIF.

  LOOP AT it_requestobject INTO wa_requestobject.
    MOVE-CORRESPONDING wa_requestobject TO packageline.
    APPEND packageline TO objects_package.
  ENDLOOP.

  PERFORM addobjectstonugget.
ENDFORM.                    &quot; NUGGET_ADD_FROM_TRANSPORT</source>
 </PROG>
 <CLAS CLSNAME="ZSAPLINK_CLASS" VERSION="1" LANGU="E" DESCRIPT="SAPlink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK_OO">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="SEOO" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOO</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_CLASS_DOCUMENTATION" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;classDocumentation&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_LANGUAGE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;language&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_METHOD_DOCUMENTATION" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;methodDocumentation&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_OBJECT" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;OBJECT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_SPRAS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;SPRAS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_TEXTELEMENT" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;textElement&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_TEXTLINE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;textLine&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="C_XML_KEY_TEXTPOOL" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;textPool&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CLASS" CMPNAME="MV_STEAMROLLER" VERSION="1" LANGU="E" DESCRIPT="If true impl. of exceptionclass constructur get exported" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK_OO" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK_OO" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK_OO" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK_OO" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK_OO" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK_OO" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK_OO" VERSION="1" MTDNAME="GET_VERSION_INFO" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data classkey type SEOCLSKEY.
data not_active TYPE  SEOX_BOOLEAN.

  classKey-clsName = objname.

  call function &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
    EXPORTING
      clskey        = classkey
    IMPORTING
      not_active    = not_active
    EXCEPTIONS
*      not_specified = 1
      not_existing  = 2.
*      is_interface  = 3
*      no_text       = 4
*      inconsistent  = 5
*      others        = 6.

  if sy-subrc &lt;&gt; 2.
    exists = &apos;X&apos;.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA localimplementation TYPE REF TO if_ixml_element.
  DATA localtypes TYPE REF TO if_ixml_element.
  DATA localmacros TYPE REF TO if_ixml_element.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA reportlist TYPE STANDARD TABLE OF string.
  DATA includename TYPE program.
  DATA _classname TYPE seoclsname.
  DATA reportstring TYPE string.
  DATA rc TYPE sysubrc.
  DATA classdescr TYPE REF TO cl_abap_classdescr.
  DATA typedescr TYPE REF TO cl_abap_typedescr.
  DATA methoddescr TYPE abap_methdescr.
  DATA methodnode TYPE REF TO if_ixml_element.
  DATA parameternode TYPE REF TO if_ixml_element.
  DATA sourcenode TYPE REF TO if_ixml_element.
  DATA exceptionnode TYPE REF TO if_ixml_element.
  DATA exceptionlist TYPE seos_exceptions_r.
  DATA anexception TYPE vseoexcep.
  DATA inheritancenode TYPE REF TO if_ixml_element.
  DATA redefnode TYPE REF TO if_ixml_element.

  DATA tempstring TYPE string.
  DATA methodkey TYPE seocpdkey.
  DATA clsmethkey TYPE seocmpkey.
  DATA methodproperties TYPE vseomethod.
  DATA classkey TYPE seoclskey.
  DATA classproperties TYPE vseoclass.
  DATA paramdescr TYPE abap_parmdescr.
  DATA paramkey TYPE seoscokey.
  DATA paramproperties TYPE vseoparam.
  DATA superclass TYPE REF TO cl_abap_typedescr.
  DATA superclassname TYPE string.
  DATA superclasskey TYPE seorelkey.

  DATA attribdescr TYPE abap_attrdescr.
  DATA attribkey TYPE seocmpkey.
  DATA attribproperties TYPE vseoattrib.
  DATA attribnode TYPE REF TO if_ixml_element.
  DATA inheritanceprops TYPE vseoextend.
  DATA redefines TYPE STANDARD TABLE OF seoredef
      WITH KEY clsname refclsname version mtdname.
  DATA inheritance TYPE seor_inheritance_r.
  DATA redefinitions TYPE seor_redefinitions_r.
  DATA redefinition LIKE LINE OF redefinitions.

  DATA otrnode TYPE REF TO if_ixml_element.
  DATA _otrguid TYPE sotr_conc.

  data: ls_version_info type gts_version_info.

  _classname = objname.
  classkey-clsname = objname.

*  setObjectType( ).

  DATA _objtype TYPE string.
*  _objType = objType.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  CALL FUNCTION &apos;SEO_CLASS_GET&apos;
    EXPORTING
      clskey       = classkey
      version      = &apos;1&apos;
    IMPORTING
      class        = classproperties
    EXCEPTIONS
      not_existing = 1
      deleted      = 2
      is_interface = 3
      model_only   = 4.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_found
            object = objname.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = &apos;class deleted&apos;.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = &apos;interfaces not supported&apos;.
      WHEN 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = &apos;class is modeled only&apos;.
    ENDCASE.
  ENDIF.

  setattributesfromstructure( node      = rootnode
                              structure = classproperties ).
*--------------------------------------------------------------------*
* Added versioning info
*--------------------------------------------------------------------*
  ls_version_info = get_version_info( ).
  setattributesfromstructure( node      = rootnode
                              structure = ls_version_info ).

  TRY.
      CALL METHOD cl_abap_classdescr=&gt;describe_by_name
        EXPORTING
          p_name         = objname
        RECEIVING
          p_descr_ref    = typedescr
        EXCEPTIONS
          type_not_found = 1.
      IF sy-subrc = 0.
        classdescr ?= typedescr.
      ELSE.

      ENDIF.
    CATCH cx_root.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDTRY.

  CALL METHOD classdescr-&gt;get_super_class_type
    RECEIVING
      p_descr_ref           = superclass
    EXCEPTIONS
      super_class_not_found = 1.

  IF sy-subrc = 0.
    superclassname = superclass-&gt;get_relative_name( ).
    IF NOT superclassname CS &apos;OBJECT&apos;.
      superclasskey-clsname = objname.
      superclasskey-refclsname = superclassname.
      CALL FUNCTION &apos;SEO_INHERITANC_GET&apos;
        EXPORTING
          inhkey        = superclasskey
        IMPORTING
          inheritance   = inheritanceprops
          redefinitions = redefines.
      setattributesfromstructure( node = rootnode structure =
      inheritanceprops ).
    ENDIF.
  ENDIF.

*/***TPJ - Added Logic for TYPES  -------------------*/
  DATA: types      TYPE seoo_types_r,
        wa_type    LIKE LINE OF types,
        types_node TYPE REF TO if_ixml_element.
  CALL FUNCTION &apos;SEO_TYPE_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      types             = types
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.
  LOOP AT types INTO wa_type.
    types_node = xmldoc-&gt;create_element( &apos;types&apos; ).
    clear wa_type-TYPESRC_LENG. &quot; Will be recalculated on import, differs depending on OS due to linebreaks
    setattributesfromstructure( node = types_node structure =
    wa_type ).
    rc = rootnode-&gt;append_child( types_node ).
  ENDLOOP.
*/***TPJ - End of Added Logic for TYPES  -------------------*/

*/***TPJ - Added Logic for Friends  -------------------*/
  DATA: clif_keys     TYPE STANDARD TABLE OF seoclskey,
        friends       TYPE STANDARD TABLE OF seofriends,
        wa_friend     LIKE LINE OF friends,
        friends_node  TYPE REF TO if_ixml_element.

  APPEND classkey TO clif_keys.
  CALL FUNCTION &apos;SEO_FRIENDS_SELECT&apos;
    EXPORTING
      with_external_ref = &apos;X&apos;
    TABLES
      clif_keys         = clif_keys
      friends_relations = friends.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.
  LOOP AT friends INTO wa_friend.
    friends_node = xmldoc-&gt;create_element( c_xml_key_friends ).
    setattributesfromstructure( node = friends_node structure =
    wa_friend ).
    rc = rootnode-&gt;append_child( friends_node ).
  ENDLOOP.
*/***TPJ - End of Added Logic for Friends  -------------------*/

*/***ewH - Added Logic for Interfaces  -------------------*/
*/***uku - discard included interfaces -------------------*/
  DATA: it_implementings TYPE seor_implementings_r,
        lt_implementings_copy TYPE seor_implementings_r,
        wa_implementings LIKE LINE OF it_implementings,
        implementingnode TYPE REF TO if_ixml_element,
        ls_interface TYPE seoc_interface_r,
        lt_comprisings TYPE seor_comprisings_r,
        ls_intfkey TYPE seoclskey.
  FIELD-SYMBOLS &lt;ls_comprisings&gt; TYPE seor_comprising_r.

  CALL FUNCTION &apos;SEO_IMPLEMENTG_READ_ALL&apos;
    EXPORTING
      clskey             = classkey
    IMPORTING
      implementings      = it_implementings
    EXCEPTIONS
      class_not_existing = 1
      OTHERS             = 2.

  lt_implementings_copy = it_implementings.
  LOOP AT it_implementings INTO wa_implementings.
    CLEAR: ls_intfkey.
    ls_intfkey-clsname = wa_implementings-refclsname.
    CALL FUNCTION &apos;SEO_INTERFACE_TYPEINFO_GET&apos;
      EXPORTING
        intkey      = ls_intfkey
      IMPORTING
        comprisings = lt_comprisings.
    LOOP AT lt_comprisings ASSIGNING &lt;ls_comprisings&gt;.
      DELETE lt_implementings_copy WHERE refclsname = &lt;ls_comprisings&gt;-refclsname.
    ENDLOOP.
  ENDLOOP.

  LOOP AT lt_implementings_copy INTO wa_implementings.
    implementingnode = xmldoc-&gt;create_element( &apos;implementing&apos; ).
    setattributesfromstructure( node = implementingnode structure =
    wa_implementings ).
    rc = rootnode-&gt;append_child( implementingnode ).
  ENDLOOP.
*/***uku - End of discard included interfaces -------------------*/
*/***ewH - End of Added Logic for Interfaces  -------------------*/
*/***rrq - Added Logic for EVENTS  -------------------*/
  DATA: events      TYPE seoo_events_r,
        wa_event    LIKE LINE OF events,
        event_node  TYPE REF TO if_ixml_element,
        eventkey    TYPE seocmpkey,
        eventparams TYPE seos_parameters_r,
        wa_params   TYPE seos_parameter_r.
  CALL FUNCTION &apos;SEO_EVENT_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      events            = events
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.
  LOOP AT events INTO wa_event.
    eventkey-clsname = wa_event-clsname.
    eventkey-cmpname = wa_event-cmpname.
    event_node = xmldoc-&gt;create_element( &apos;events&apos; ).
    setattributesfromstructure( node = event_node structure =
    wa_event ).
    CALL FUNCTION &apos;SEO_EVENT_SIGNATURE_GET&apos;
      EXPORTING
        evtkey     = eventkey
      IMPORTING
        parameters = eventparams.

*   parameters
    LOOP AT eventparams INTO wa_params.

      parameternode = xmldoc-&gt;create_element( &apos;parameter&apos; ).
      setattributesfromstructure( node = parameternode
      structure = wa_params ).
      rc = event_node-&gt;append_child( parameternode ).
    ENDLOOP.
    rc = rootnode-&gt;append_child( event_node ).
  ENDLOOP.
*/***rrq - End of Added Logic for EVENTS  -------------------*/
* removed by Rene.
  get_sections( CHANGING rootnode = rootnode ) .
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_ccimp_name( _classname ).
  READ REPORT includename INTO reportlist.
  localimplementation = xmldoc-&gt;create_element( &apos;localImplementation&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = localimplementation-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_ccdef_name( _classname ).
  READ REPORT includename INTO reportlist.
  localtypes = xmldoc-&gt;create_element( &apos;localTypes&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = localtypes-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_ccmac_name( _classname ).
  READ REPORT includename INTO reportlist.
  localmacros = xmldoc-&gt;create_element( &apos;localMacros&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = localmacros-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
*/***EVP - Added Logic for Local Test Classes  ----------------------*/
  DATA localtestclasses TYPE REF TO if_ixml_element.
  DATA localtestclassesexist TYPE i.

  includename = cl_oo_classname_service=&gt;get_local_testclasses_include( _classname ).
  READ REPORT includename INTO reportlist.
  &quot; If sy-subrc = 0 the local test classes do exist
  localtestclassesexist = sy-subrc.
  IF localtestclassesexist = 0.
    localtestclasses = xmldoc-&gt;create_element( &apos;localTestClasses&apos; ).
    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = localtestclasses-&gt;if_ixml_node~set_value( reportstring ).
  ENDIF.
*/***EVP - End of Added Logic for Local Test Classes  ---------------*/
*|                                                                    |
*\--------------------------------------------------------------------/
  rc = rootnode-&gt;append_child( localimplementation ).
  rc = rootnode-&gt;append_child( localtypes ).
  rc = rootnode-&gt;append_child( localmacros ).
*/***EVP - Added Logic for Local Test Classes  -------------------*/
  IF localtestclassesexist = 0.
    rc = rootnode-&gt;append_child( localtestclasses ).
  ENDIF.
*/***EVP - End of Added Logic for Local Test Classes  ------------*/
**// Rich:  Start
  get_textpool( CHANGING rootnode = rootnode ).
  get_documentation( CHANGING rootnode = rootnode ).
**// Rich:  End
  get_typepusage( CHANGING  xo_rootnode = rootnode ).
  get_clsdeferrd( CHANGING  xo_rootnode = rootnode ).
  get_intdeferrd( CHANGING  xo_rootnode = rootnode ).

*  classDescriptor ?= cl_abap_typedescr=&gt;describe_by_name( className ).
  attribkey-clsname = objname.

  LOOP AT classdescr-&gt;attributes INTO attribdescr
  WHERE is_inherited = abap_false
  AND is_interface = abap_false. &quot;rrq:issue 46
    attribnode = xmldoc-&gt;create_element( &apos;attribute&apos; ).
    attribkey-cmpname = attribdescr-name.
    CALL FUNCTION &apos;SEO_ATTRIBUTE_GET&apos;
      EXPORTING
        attkey    = attribkey
      IMPORTING
        attribute = attribproperties.

*   include OTR if necessary (for exception classes)
    IF attribproperties-type = &apos;SOTR_CONC&apos; AND attribproperties-attvalue
    IS NOT INITIAL.
      _otrguid = attribproperties-attvalue+1(32).
      otrnode = get_otr( _otrguid ).
      IF otrnode IS BOUND.
        rc = attribnode-&gt;append_child( otrnode ).
        &quot; Issue #222 - get_text empty when ZCX_SAPLINK exception is raised
        &quot; Gregor Wolf, 2012-12-20
        &quot; As GUID for OTR Node is created new in every system we import
        &quot; the Slinkee we should empty it
        CLEAR: attribproperties-attvalue.
      ENDIF.
    ENDIF.

*   append attribute node to parent node
    setattributesfromstructure( node      = attribnode
                                structure = attribproperties ).
    rc = rootnode-&gt;append_child( attribnode ).
  ENDLOOP.

*// ewH: begin of logic for interface methods &amp; inheritance redesign--&gt;
* inheritances &amp; redefinitions: old source removed-recover w/subversion
  CALL FUNCTION &apos;SEO_INHERITANC_READ&apos;
    EXPORTING
      clskey             = classkey
    IMPORTING
      inheritance        = inheritance
      redefinitions      = redefinitions
    EXCEPTIONS
      class_not_existing = 1
      OTHERS             = 2.

  IF inheritance IS NOT INITIAL.
    inheritancenode = xmldoc-&gt;create_element( c_xml_key_inheritance ).
    setattributesfromstructure( node = inheritancenode structure =
    inheritance ).

    LOOP AT redefinitions INTO redefinition.
      redefnode = xmldoc-&gt;create_element( &apos;redefinition&apos; ).
      setattributesfromstructure( node = redefnode structure =
      redefinition ).
      rc = inheritancenode-&gt;append_child( redefnode ).
    ENDLOOP.
    rc = rootnode-&gt;append_child( inheritancenode ).
  ENDIF.

* methods with out alias We handle this later
  LOOP AT classdescr-&gt;methods INTO methoddescr WHERE alias_for IS INITIAL AND
  NOT ( is_inherited = &apos;X&apos; AND is_redefined IS INITIAL ).
    methodkey-clsname = _classname.
    methodkey-cpdname = methoddescr-name.
*//nbus: added logic for exception class
    IF    methoddescr-name         =  &apos;CONSTRUCTOR&apos;
      AND classproperties-category =  seoc_category_exception
      and me-&gt;mv_steamroller       &lt;&gt; abap_true.
      &quot; Constructor() will be generated automatically into the
      &quot; target system once the class is saved
      CONTINUE.
    ENDIF.
*//nbus: end of added logic for exception class
*   interface methods
    IF methoddescr-is_interface = &apos;X&apos;.
      CALL METHOD cl_oo_classname_service=&gt;get_method_include
        EXPORTING
          mtdkey              = methodkey
        RECEIVING
          result              = includename
        EXCEPTIONS
          method_not_existing = 1.
      IF sy-subrc = 0.
        methodnode = xmldoc-&gt;create_element( &apos;interfaceMethod&apos; ).
        setattributesfromstructure( node = methodnode structure =
        methodkey ).
        sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
*        tempString = includeName.
*        rc = sourceNode-&gt;set_attribute(
*          name = &apos;includeName&apos; value = tempString ).
        READ REPORT includename INTO reportlist.
        reportstring = buildsourcestring( sourcetable = reportlist ).
        rc = sourcenode-&gt;if_ixml_node~set_value( reportstring ).
        rc = methodnode-&gt;append_child( sourcenode ).
        rc = rootnode-&gt;append_child( methodnode ).
      ENDIF.
*   other methods
    ELSE.
      clsmethkey-clsname = _classname.
      clsmethkey-cmpname = methoddescr-name.
      CLEAR methodproperties.

      IF methoddescr-is_redefined = &apos;X&apos;.
        methodnode = xmldoc-&gt;create_element( &apos;method&apos; ).
        MOVE-CORRESPONDING clsmethkey TO methodproperties.
*// ewh: begin of forward compatibility hack, can be removed for next
*//      major release--&gt;
        READ TABLE redefinitions INTO redefinition
          WITH KEY mtdname = methoddescr-name.
        IF sy-subrc = 0.
          methodproperties-clsname = redefinition-refclsname.
        ENDIF.
*//&lt;--ewH: end of forward compatibility hack
        setattributesfromstructure( node = methodnode structure =
        methodproperties ).
      ELSE.
        CALL FUNCTION &apos;SEO_METHOD_GET&apos;
          EXPORTING
            mtdkey       = clsmethkey
          IMPORTING
            method       = methodproperties
          EXCEPTIONS
            not_existing = 1.
        IF sy-subrc = 0.
          methodnode = xmldoc-&gt;create_element( &apos;method&apos; ).
          setattributesfromstructure( node = methodnode structure =
          methodproperties ).

*         parameters
          LOOP AT methoddescr-parameters INTO paramdescr.
            CLEAR paramproperties.
            parameternode = xmldoc-&gt;create_element( &apos;parameter&apos; ).
            paramkey-cmpname = clsmethkey-cmpname.
            paramkey-sconame = paramdescr-name.
            paramkey-clsname = objname.
            CALL FUNCTION &apos;SEO_PARAMETER_GET&apos;
              EXPORTING
                parkey    = paramkey
                version   = &apos;1&apos;
              IMPORTING
                parameter = paramproperties.
            setattributesfromstructure( node = parameternode
            structure = paramproperties ).
            rc = methodnode-&gt;append_child( parameternode ).
          ENDLOOP.

*         exceptions
          CALL FUNCTION &apos;SEO_METHOD_SIGNATURE_GET&apos;
            EXPORTING
              mtdkey  = clsmethkey
              version = &apos;1&apos;
            IMPORTING
              exceps  = exceptionlist.
          LOOP AT exceptionlist INTO anexception.
            exceptionnode = xmldoc-&gt;create_element( &apos;exception&apos; ).
            setattributesfromstructure( node = exceptionnode
            structure = anexception ).
            rc = methodnode-&gt;append_child( exceptionnode ).
          ENDLOOP.
        ENDIF. &quot;method found
      ENDIF. &quot;is_redefined?
*     source
      CALL METHOD cl_oo_classname_service=&gt;get_method_include
        EXPORTING
          mtdkey              = methodkey
        RECEIVING
          result              = includename
        EXCEPTIONS
          method_not_existing = 1.
      IF sy-subrc = 0.
        READ REPORT includename INTO reportlist.
        reportstring = buildsourcestring( sourcetable = reportlist ).
        sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
        rc = sourcenode-&gt;if_ixml_node~set_value( reportstring ).
        rc = methodnode-&gt;append_child( sourcenode ).
      ENDIF.
** StartInsert Rich - Handle method documenation
      get_method_documentation(  EXPORTING method_key = methodkey
                                 CHANGING  rootnode   = methodnode ).
** EndInsert Rich - Handle method documenation
      rc = rootnode-&gt;append_child( methodnode ).
    ENDIF. &quot;is_interface?
  ENDLOOP.
* create alias info for load.
  get_alias_method( EXPORTING it_methods     = classdescr-&gt;methods
                    CHANGING  xo_rootnode    = rootnode ).
* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
*// &lt;--ewH: end of logic for interface methods &amp; inheritance redesign
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA classkey TYPE seoclskey.
  DATA filter TYPE REF TO if_ixml_node_filter.
  DATA iterator TYPE REF TO if_ixml_node_iterator.
  DATA node TYPE REF TO if_ixml_element.
  DATA otrnode TYPE REF TO if_ixml_element.
  DATA filter2 TYPE REF TO if_ixml_node_filter.
  DATA iterator2 TYPE REF TO if_ixml_node_iterator.
  DATA superclass TYPE vseoextend-clsname.
  DATA superclasskey TYPE vseoextend.
  DATA methodsourcenode TYPE REF TO if_ixml_node.
  DATA sourcenode TYPE REF TO if_ixml_node.
  DATA source TYPE string.
  DATA sourcetable TYPE TABLE OF string.
  DATA methodkey TYPE seocpdkey.
  DATA node2 TYPE REF TO if_ixml_element.
  DATA _objtype TYPE string.
  DATA aobjname TYPE e071-obj_name.
  DATA inheritancenode TYPE REF TO if_ixml_element.
  DATA redefnode TYPE REF TO if_ixml_element.
  DATA includename TYPE program.
  DATA mtdkey   TYPE seocpdkey.

*data excClass type ref to ZCX_SAPLINK.

*// --&gt; begin of new data type rrq
  DATA:
*exporting dataTypes
  e_corrnr                 TYPE trkorr,
  e_devclass               TYPE devclass,
  e_version                TYPE seoversion,
  e_genflag                TYPE genflag,
  e_authority_check        TYPE seox_boolean,
  e_overwrite              TYPE seox_boolean,
*e_suppress_meth_gen      type SEOX_BOOLEAN,
*e_suppress_refac_gen     type SEOX_BOOLEAN,
  e_method_sources         TYPE seo_method_source_table,
  e_locals_def             TYPE rswsourcet,
  e_locals_imp             TYPE rswsourcet,
  e_locals_mac             TYPE rswsourcet,
*e_suppress_ind_update    type SEOX_BOOLEAN,
*importing dataTypes
  i_korrnr                 TYPE trkorr,
*changing dataTypes
  ch_class                 TYPE vseoclass,
  ch_inheritance           TYPE vseoextend,
  ch_redefinitions         TYPE seor_redefinitions_r,
  ch_implementings         TYPE seor_implementings_r,
  ch_impl_details          TYPE seo_redefinitions,
  ch_attributes            TYPE seoo_attributes_r,
  ch_methods               TYPE seoo_methods_r,
  ch_events                TYPE seoo_events_r,
  ch_types                 TYPE seoo_types_r,
  ch_type_source           TYPE seop_source,
  ch_type_source_temp      TYPE seop_source,
  ch_parameters            TYPE seos_parameters_r,
  ch_exceps                TYPE seos_exceptions_r,
  ch_aliases               TYPE seoo_aliases_r,
  ch_typepusages           TYPE seot_typepusages_r,
  ch_clsdeferrds           TYPE seot_clsdeferrds_r,
  ch_intdeferrds           TYPE seot_intdeferrds_r,
  ch_friendships           TYPE seo_friends,
**table dataTypes
*tb_classDescription      type table of seoclasstx,
*tb_component_descr       type table of seocompotx,
*tb_subcomponent_descr    type table of seosubcotx,
* work areas for the tables
  wa_attributes            TYPE seoo_attribute_r,
  wa_types                 TYPE seoo_type_r,
  wa_friends               TYPE seofriends,
  wa_implementings         TYPE seor_implementing_r,
  wa_redefinitions         TYPE seoredef,
  wa_methods               TYPE seoo_method_r,
  wa_parameters            TYPE seos_parameter_r,
  wa_exceps                TYPE seos_exception_r,
  wa_method_sources        TYPE seo_method_source,
  wa_events                TYPE seoo_event_r.
  DATA: lines TYPE i,
        l_msg TYPE string.
*//&lt;-- end of new data types rrq

  CALL FUNCTION &apos;SEO_BUFFER_INIT&apos;.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ch_class.

  objname = classkey-clsname = ch_class-clsname.
  ch_class-version = &apos;0&apos;.
  superclass = rootnode-&gt;get_attribute( name = &apos;REFCLSNAME&apos; ).
  IF superclass IS NOT INITIAL.
* set something for inheritence
    superclasskey-clsname = classkey-clsname.
    superclasskey-refclsname = superclass.
    superclasskey-version = &apos;0&apos;.
    superclasskey-state = &apos;1&apos;.
    MOVE-CORRESPONDING superclasskey TO ch_inheritance.
    ch_inheritance-author = &apos;BCUSER&apos;.
    ch_inheritance-createdon = sy-datum.
  ENDIF.

*Add attributes to new class
  DATA otrconcept TYPE sotr_text-concept.
  filter = xmldoc-&gt;create_filter_name( &apos;attribute&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
*   create OTR texts if necessary (for exception classes)
    CLEAR otrconcept.
    otrnode = node-&gt;find_from_name( c_xml_key_sotr ).
    IF otrnode IS NOT INITIAL.
*     ewH:33--&gt;create new concept with new guid
*      me-&gt;createotrfromnode( otrnode ).
      me-&gt;create_otr(
        EXPORTING node = otrnode
        IMPORTING concept = otrconcept ).
    ENDIF.
    CLEAR wa_attributes.
*   create attribute
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_attributes.
    wa_attributes-version = &apos;0&apos;.
*   ewH:issue33--&gt;6.40 and above, must create new concept
    IF otrconcept IS NOT INITIAL.
      CONCATENATE `&apos;` otrconcept `&apos;` INTO wa_attributes-attvalue.
    ENDIF.
    APPEND wa_attributes TO ch_attributes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

*/***TPJ - Added Logic for TYPES  -------------------*/
*  DATA: types           TYPE seoo_types_r,
*        type_properties LIKE LINE OF types.

  filter = xmldoc-&gt;create_filter_name( &apos;types&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_types.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_types.
    wa_types-version = &apos;0&apos;.
    APPEND wa_types TO ch_types.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*/***TPJ - End of Added Logic for TYPES  -------------------*/

*/***TPJ - Added Logic for Friends  -------------------*/
*  DATA: wa_friends type seofriends.

  filter = xmldoc-&gt;create_filter_name( C_XML_KEY_FRIENDS ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_friends.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_friends.
    wa_friends-version = &apos;0&apos;.
    APPEND wa_friends TO ch_friendships.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*/***TPJ - End of Added Logic for Friends  -------------------*/

*// ewH: Added Logic for Implementings(interfaces)--&gt;
  filter = xmldoc-&gt;create_filter_name( &apos;implementing&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_implementings.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_implementings.
    APPEND wa_implementings TO ch_implementings.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*//&lt;--ewH: End of Added Logic for Implementings(interfaces)

*// rrq: Added Logic for events--&gt;
  filter = xmldoc-&gt;create_filter_name( &apos;events&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_events.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_events.
    APPEND wa_events TO ch_events.
    filter2 = node-&gt;create_filter_name( &apos;parameter&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_parameters.

      &quot;//-&gt; Mar: Added logic for parameter/interface implementation - 08/20/2008
      IF NOT wa_parameters-clsname IS INITIAL.
        APPEND wa_parameters TO ch_parameters.
      ENDIF.
      &quot;//&lt;- Mar: Added logic for parameter/interface implementation - 08/20/2008

      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*//&lt;--rrq: End of Added Logic for events

*// ewH: start redesign method/inheritances--&gt;
* inheritance
  inheritancenode = rootnode-&gt;find_from_name( c_xml_key_inheritance ).
  IF inheritancenode IS BOUND.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = inheritancenode
      CHANGING
        structure = ch_inheritance.
*   redefs
    filter = inheritancenode-&gt;create_filter_name( &apos;redefinition&apos; ).
    iterator = inheritancenode-&gt;create_iterator_filtered( filter ).
    redefnode ?= iterator-&gt;get_next( ).
    WHILE redefnode IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = redefnode
        CHANGING
          structure = wa_redefinitions.
      APPEND wa_redefinitions TO ch_redefinitions.
      redefnode ?= iterator-&gt;get_next( ).
    ENDWHILE.
  ENDIF.

*Add Methods to new class
  filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_methods.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_methods.

*   only create metadata if method is not a redefinition
    READ TABLE ch_redefinitions INTO wa_redefinitions
    WITH KEY mtdname = wa_methods-cmpname.
    IF sy-subrc = 0.
      node ?= iterator-&gt;get_next( ).
      CONTINUE.
    ENDIF.
*// ewh: begin of backward compatibility hack, can be removed for next
*//      major release--&gt;
    IF wa_methods-clsname &lt;&gt; ch_class-clsname.
      MOVE-CORRESPONDING wa_methods TO wa_redefinitions.
      wa_redefinitions-clsname = ch_class-clsname.
      wa_redefinitions-refclsname = wa_methods-clsname.
      wa_redefinitions-version = &apos;0&apos;.
      wa_redefinitions-mtdabstrct = &apos;&apos;.
      wa_redefinitions-mtdname = wa_methods-cmpname.
      APPEND wa_redefinitions TO ch_redefinitions.

      node ?= iterator-&gt;get_next( ).
      CONTINUE.
    ENDIF.
*// &lt;--ewH: break in backward compatibility hack - 2Bcontinued below

    filter2 = node-&gt;create_filter_name( &apos;parameter&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_parameters.

      &quot;//-&gt; Mar: Added logic for parameter/interface implementation - 08/20/2008
      IF NOT wa_parameters-clsname IS INITIAL.
        APPEND wa_parameters TO ch_parameters.
      ENDIF.
      &quot;//&lt;- Mar: Added logic for parameter/interface implementation - 08/20/2008

      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    filter2 = node-&gt;create_filter_name( &apos;exception&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_exceps.
      APPEND wa_exceps TO ch_exceps.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    APPEND wa_methods TO ch_methods.

** StartInsert Rich - Handle method documenation
    create_method_documentation( node = node ).
** EndInsert Rich - Handle method documenation

    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*// &lt;--ewH: end redesign method/inheritances
*// ewh: continuation of backward compatibility hack--&gt;
*  IF ( ch_redefinitions IS NOT INITIAL OR superclass-clsname
*  IS NOT INITIAL ) and ch_inheritance is initial.
*    CALL FUNCTION &apos;SEO_INHERITANC_CREATE_F_DATA&apos;
*      EXPORTING
*        save          = &apos; &apos;
*      CHANGING
*        inheritance   = superclasskey
*        redefinitions = ch_redefinitions.
*  ENDIF.
*// &lt;--ewH: end of backward compatibility hack

  create_typepusage( CHANGING xt_typepusages = ch_typepusages ).
  create_clsdeferrd( CHANGING xt_clsdeferrds = ch_clsdeferrds ).
  create_intdeferrd( CHANGING xt_intdeferrds = ch_intdeferrds ).

*Insert source code into the methods
  filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_methods.
    methodkey-clsname = objname.
    methodkey-cpdname = wa_methods-cmpname.
    aobjname = methodkey.
    methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
    IF methodsourcenode IS NOT INITIAL.
      CLEAR wa_method_sources.
      source = methodsourcenode-&gt;get_value( ).
      sourcetable = buildtablefromstring( source ).
      READ TABLE ch_redefinitions INTO wa_redefinitions
      WITH KEY mtdname = methodkey-cpdname.
      IF sy-subrc = 0.
        wa_method_sources-redefine = &apos;X&apos;.
      ENDIF.
      wa_method_sources-cpdname = methodkey-cpdname.
      wa_method_sources-source = sourcetable.
      APPEND wa_method_sources TO e_method_sources.
    ENDIF.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*
**// ewH: create interface methods--&gt;
  filter = xmldoc-&gt;create_filter_name( &apos;interfaceMethod&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = methodkey.
    aobjname = methodkey.
    methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
    IF methodsourcenode IS NOT INITIAL.
      CLEAR wa_method_sources.
      source = methodsourcenode-&gt;get_value( ).
      sourcetable = buildtablefromstring( source ).
      wa_method_sources-cpdname = methodkey-cpdname.
      READ TABLE ch_redefinitions INTO wa_redefinitions
      WITH KEY mtdname = methodkey-cpdname.
      IF sy-subrc = 0.
        wa_method_sources-redefine = &apos;X&apos;.
      ENDIF.
*      wa_method_sources-redefine = wa_methods-redefin.
      wa_method_sources-source = sourcetable.

      APPEND wa_method_sources TO e_method_sources.
    ENDIF.

    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*// &lt;--ewH: end create interface methods

* local implementation
  DATA _classname TYPE seoclsname.
  _classname = objname.
  sourcenode = xmldoc-&gt;find_from_name( &apos;localImplementation&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    e_locals_imp = buildtablefromstring( source ).
  ENDIF.

* local types
  sourcenode = xmldoc-&gt;find_from_name( &apos;localTypes&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    e_locals_def = buildtablefromstring( source ).
  ENDIF.

* local macros
  sourcenode = xmldoc-&gt;find_from_name( &apos;localMacros&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    e_locals_mac = buildtablefromstring( source ).
  ENDIF.
* We don&apos;t need the sections for now. Code moved by Rene
  create_sections( ).

*Add Alias to new class
  create_alias_method( CHANGING xt_aliases_method = ch_aliases ).

  name = objname.

  CALL FUNCTION &apos;SEO_CLASS_CREATE_COMPLETE&apos;
   EXPORTING
     corrnr                             = e_corrnr
     devclass                           = e_devclass
     version                            = e_version
     genflag                            = e_genflag
     authority_check                    = e_authority_check
     overwrite                          = e_overwrite
*   SUPPRESS_METHOD_GENERATION         = e_suppress_meth_gen
*   SUPPRESS_REFACTORING_SUPPORT       = e_suppress_refac_gen
*     method_sources                     = e_method_sources
     locals_def                         = e_locals_def
     locals_imp                         = e_locals_imp
     locals_mac                         = e_locals_mac
*   SUPPRESS_INDEX_UPDATE              = e_suppress_ind_update
   IMPORTING
     korrnr                             = i_korrnr
* TABLES
*   CLASS_DESCRIPTIONS                 = tb_classDescription
*   COMPONENT_DESCRIPTIONS             = tb_component_descr
*   SUBCOMPONENT_DESCRIPTIONS          = tb_subcomponent_descr
    CHANGING
      class                              = ch_class
     inheritance                        = ch_inheritance
     redefinitions                      = ch_redefinitions
     implementings                      = ch_implementings
     impl_details                       = ch_impl_details
     attributes                         = ch_attributes
     methods                            = ch_methods
     events                             = ch_events
     types                              = ch_types
*   TYPE_SOURCE                        = ch_type_source &quot;???
     PARAMETERS                         = ch_parameters
     exceps                             = ch_exceps
     aliases                            = ch_aliases
     typepusages                        = ch_typepusages
     clsdeferrds                        = ch_clsdeferrds
     intdeferrds                        = ch_intdeferrds
     friendships                        = ch_friendships
   EXCEPTIONS
     existing                           = 1
     is_interface                       = 2
     db_error                           = 3
     component_error                    = 4
     no_access                          = 5
     other                              = 6
     OTHERS                             = 7.
  CASE sy-subrc.
    WHEN &apos;0&apos;.
** i guess if we made it this far, we will assume success
** successful install
    WHEN &apos;1&apos;.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDCASE.
* Now let&apos;s add the methods
  LOOP AT e_method_sources INTO wa_method_sources.
    mtdkey-clsname = objname.
    mtdkey-cpdname = wa_method_sources-cpdname.

    CALL FUNCTION &apos;SEO_METHOD_GENERATE_INCLUDE&apos;
      EXPORTING
        mtdkey                               = mtdkey
        version                              = e_version
        force                                = e_overwrite
        redefine                             = wa_method_sources-redefine
*     SUPPRESS_CORR                        = SEOX_FALSE
        implementation_expanded              = wa_method_sources-source
*     IMPLEMENTATION                       =
        suppress_mtdkey_check                = seox_true
*     EDITOR_LOCK                          = SEOX_FALSE
*     GENERATED                            = SEOX_FALSE
        corrnr                               = e_corrnr
        without_method_frame                 = seox_true
*     WITH_SUPER_CALL                      = SEOX_FALSE
*     SUPPRESS_INDEX_UPDATE                = SEOX_FALSE
*     EXTEND                               = SEOX_FALSE
*     ENHANCEMENT                          = &apos; &apos;
*     SUPPRESS_MODIFICATION_SUPPORT        = SEOX_FALSE
   EXCEPTIONS
     not_existing                         = 1
     model_only                           = 2
     include_existing                     = 3
     method_imp_not_generated             = 4
     method_imp_not_initialised           = 5
     _internal_class_not_existing         = 6
     _internal_method_overflow            = 7
     cancelled                            = 8
     method_is_abstract_implemented       = 9
     method_is_final_implemented          = 10
     internal_error_insert_report         = 11
     OTHERS                               = 12
              .
    CASE sy-subrc.
      WHEN &apos;0&apos;.
** i guess if we made it this far, we will assume success
** successful install
      WHEN &apos;3&apos;.
        l_msg = mtdkey.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;existing
            msg    = l_msg.
      WHEN OTHERS.
        l_msg = mtdkey.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error
            msg    = l_msg.
    ENDCASE.
  ENDLOOP.

*ewH:insert pub, prot, and priv sections manually to keep any direct
* attribute/type definitions
  aobjname = classkey-clsname.
**public
  sourcenode = xmldoc-&gt;find_from_name( &apos;publicSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    includename = cl_oo_classname_service=&gt;get_pubsec_name( _classname ).
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).
    INSERT REPORT includename FROM sourcetable EXTENSION TYPE
    srext_ext_class_public STATE &apos;I&apos;.
  ENDIF.

**protected
  sourcenode = xmldoc-&gt;find_from_name( &apos;protectedSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    includename = cl_oo_classname_service=&gt;get_prosec_name( _classname ).
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).
    INSERT REPORT includename FROM sourcetable EXTENSION TYPE
    srext_ext_class_protected STATE &apos;I&apos;.
  ENDIF.

**private
  sourcenode = xmldoc-&gt;find_from_name( &apos;privateSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    includename = cl_oo_classname_service=&gt;get_prisec_name( _classname ).
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).
    INSERT REPORT includename FROM sourcetable EXTENSION TYPE
    srext_ext_class_private STATE &apos;I&apos;.
  ENDIF.
*/***EVP - Added Logic for Local Test Classes  -------------------*/
**local test classes
  sourcenode = xmldoc-&gt;find_from_name( &apos;localTestClasses&apos; ).
  IF sourcenode IS NOT INITIAL.
    DATA clskey TYPE seoclskey.
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    clskey-clsname = _classname.
    CALL FUNCTION &apos;SEO_CLASS_GENERATE_LOCALS&apos;
      EXPORTING
        clskey                 = clskey
        force                  = overwrite
        locals_testclasses     = sourcetable
      EXCEPTIONS
        not_existing           = 1
        model_only             = 2
        locals_not_generated   = 3
        locals_not_initialised = 4
        OTHERS                 = 5.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.
  ENDIF.
*/***EVP - End Of Added Logic for Local Test Classes  -------------------*/

**// Rich:  Start
* Create class textpool
  create_textpool( ).

  create_documentation( ).
**// Rich:  End

* insert inactive sections into worklist
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;CPUB&apos;
      obj_name          = aobjname
    EXCEPTIONS
      wrong_object_name = 1.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.

  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;CPRO&apos;
      obj_name          = aobjname
    EXCEPTIONS
      wrong_object_name = 1.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.

  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;CPRI&apos;
      obj_name          = aobjname
    EXCEPTIONS
      wrong_object_name = 1.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Documentation" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATE_DOCUMENTATION.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA docnode          TYPE REF TO if_ixml_element.

  DATA lang_node        TYPE REF TO if_ixml_element.
  DATA lang_filter      TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator    TYPE REF TO if_ixml_node_iterator.

  DATA obj_name TYPE dokhl-object.
  DATA class_name TYPE string.
  DATA language  TYPE string.
  DATA obj_langu TYPE dokhl-langu.
  DATA lv_str TYPE string.
  DATA rc TYPE sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  docnode = xmldoc-&gt;find_from_name( c_xml_key_class_documentation ).

  IF docnode IS NOT BOUND.
    RETURN.
  ENDIF.

  class_name = docnode-&gt;get_attribute( name = c_xml_key_object ).
  obj_name = class_name.

* If no class name, then there was no class documenation, just return.
  IF class_name IS INITIAL.
    RETURN.
  ENDIF.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docnode-&gt;create_filter_name( c_xml_key_language ).
  lang_iterator = docnode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    REFRESH lt_lines.
    language = lang_node-&gt;get_attribute( name = c_xml_key_spras ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( c_xml_key_textline ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;CL&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;CL&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Class Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_METHOD_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Method Documentation" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_METHOD_DOCUMENTATION" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_METHOD_DOCUMENTATION.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  data: methdocnode     TYPE REF TO if_ixml_element.

  DATA lang_node        TYPE REF TO if_ixml_element.
  DATA lang_filter      TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator    TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data classmeth_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  methdocnode = node-&gt;find_from_name( &apos;methodDocumentation&apos; ).

  if methdocnode is not bound.
    return.
  endif.

  classmeth_name = methdocNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = classmeth_name.

* If no class method name, then there was no class method documenation, just return.
  if classmeth_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = methdocNode-&gt;create_filter_name( `language` ).
  lang_iterator = methdocNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;CO&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;CO&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Class Method Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_SECTIONS" VERSION="1" LANGU="E" DESCRIPT="Create Class sections (???)" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATE_SECTIONS.

*ewH-not sure how this type_source param works. type sources can come
* from private or protected sections, but there is no way to pass
* these separately into the class create FM. After debugging into
* FM-&gt;clif_save_all-&gt;generate_classpool it treats the source table
* as one, so I am not sure how to get it to differentiate between
* private and protected sections. If only one section has types
* defined, the FM call works, otherwise all hell breaks loose. To
* solve the problem for now, we will just do an insert report for
* the sections after the class creation, since that&apos;s all the FM
* does in the end anyway. Wow, this is a really long comment, but
* I dont want to have to try to remember what the hell was going
* on here later...sorry.  :)
*insert code for publicSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;publicSection&apos; )
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source = buildtablefromstring( source ).
*  ENDIF.
**insert code for pivateSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;privateSection&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source_temp = buildtablefromstring( source ).
*    append lines of ch_type_source_temp to ch_type_source.
*  ENDIF.
**insert code for ProtectedSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;protectedSection&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source_temp = buildtablefromstring( source ).
*    append lines of ch_type_source_temp to ch_type_source.
*  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Create Class Text Pool" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATE_TEXTPOOL.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  data textPoolTable type standard table of textPool.
  data textPoolRow type textPool.
  data langIterator type ref to if_ixml_node_iterator.
  data filter type ref to if_ixml_node_filter.
  data textFilter type ref to if_ixml_node_filter.
  data textIterator type ref to if_ixml_node_iterator.
  data textpoolnode type ref to if_ixml_element.
  data langNode type ref to if_ixml_element.
  data aTextNode type ref to if_ixml_element.
  data _objName type TROBJ_NAME.
  data obj_name type SEOCLSNAME.
  data lang type spras.
  data langNodeExists type flag.
*  data logonLanguageExists type flag.                  &quot; del #255 - seemingly not used
  data _state(1) type c.
  data classpoolname type program.
  DATA lv_original_language TYPE sylangu.                &quot; ins #255

  textpoolnode = xmldoc-&gt;find_from_name( &apos;textPool&apos; ).

  if textpoolnode is not bound.
    return.
  endif.

*--------------------------------------------------------------------*
* Ticket #255 - Error importing texts when logon language different
*               then original language of class
*--------------------------------------------------------------------*
  textpoolnode = xmldoc-&gt;find_from_name( &apos;CLAS&apos; ).              &quot; ins #255
  lv_original_language = textpoolnode-&gt;get_attribute( &apos;LANGU&apos; ).&quot; ins #255
  SET LANGUAGE lv_original_language. &quot; ins #255
  &quot; Gregor Wolf: With this all languages from the Nugget/Slinkee are imported

  obj_name = objName.
  classpoolname = cl_oo_classname_service=&gt;GET_CLASSPOOL_NAME( obj_Name ).
  _objName = classpoolname.

  filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
  langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
  langNode ?= langIterator-&gt;get_next( ).

  while langNode is not initial.
    langNodeExists = &apos;X&apos;.

    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
      EXPORTING
        OBJECT   = &apos;REPT&apos;
        OBJ_NAME = _objName
      EXCEPTIONS
        OTHERS   = 0.
    refresh textPoolTable.
    textIterator = langNode-&gt;create_iterator( ).
    aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
    aTextNode ?= textIterator-&gt;get_next( ).
    while aTextNode is not initial.
      getstructurefromattributes(
        EXPORTING
          node            = aTextNode
        CHANGING
          structure       = textPoolRow
      ).
      append textPoolRow to textPoolTable.
      aTextNode ?= textIterator-&gt;get_next( ).
    endwhile.
    if textPoolTable is not initial.
      lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
*      if lang = sy-langu.                &quot; del #255 - replaced by original language
      IF lang = lv_original_language.    &quot; ins #255 - replaced former coding
*        logonLanguageExists = &apos;X&apos;.
        _state = &apos;I&apos;.
      else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
*       Stefan Schmöcker:  Looks like this does not trigger on logon- &quot; ins #255
*                          but on class original language             &quot; ins #255
        _state = &apos;A&apos;.
      endif.
      insert textpool _objName
        from textPooltable
        language lang
        state    _state.
    endif.
    langNode ?= langIterator-&gt;get_next( ).
  endwhile.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data clsKey type SEOCLSKEY.

  clsKey-clsname = objname.
  CALL FUNCTION &apos;SEO_CLASS_DELETE_W_DEPS&apos;
    EXPORTING
      clskey             = clsKey
    EXCEPTIONS
     NOT_EXISTING       = 1
     IS_INTERFACE       = 2
     NOT_DELETED        = 3
     DB_ERROR           = 4
     OTHERS             = 5
            .
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;interfaces not supported&apos;.
      when 3.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;class not deleted&apos;.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" SCONAME="METHODNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" SCONAME="STARTCLASS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" SCONAME="CLASSNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method FINDIMPLEMENTINGCLASS.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
data methodKey type SEOCMPKEY.
data methodProperties type VSEOMETHOD.
data classDescr type ref to cl_abap_classdescr.
data superClass type ref to cl_abap_typeDescr.
data superClassName type string.

  if startClass is initial.
    methodKey-CLSNAME = objName.
  else.
    methodKey-clsName = startClass.
  endif.
  methodKey-CMPNAME = methodName.

  call function &apos;SEO_METHOD_GET&apos;
        exporting
          MTDKEY = methodKey
        importing
          method = methodProperties
        exceptions
          NOT_EXISTING = 1.
  if sy-subrc = 0.
    className = methodProperties-clsname.
  else.
    classDescr ?= cl_abap_classDescr=&gt;describe_by_name(
    methodKey-clsName ).
    call method classDescr-&gt;GET_SUPER_CLASS_TYPE
        receiving
         P_DESCR_REF = superClass
        exceptions
          SUPER_CLASS_NOT_FOUND = 1.
    superClassName = superClass-&gt;GET_RELATIVE_NAME( ).
    className = FINDIMPLEMENTINGCLASS( methodName = methodName
    startClass = superCLassName ).
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/

  objecttype = &apos;CLAS&apos;.  &quot;Class

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get Documentation" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_DOCUMENTATION" SCONAME="ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DOCUMENTATION.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA languagenode   TYPE REF TO if_ixml_element.
  DATA docnode       TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  TYPES: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       TYPE dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  DATA lt_dokhl TYPE TABLE OF t_dokhl.
  DATA ls_dokhl LIKE LINE OF lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  DATA lv_str TYPE string.
  DATA _objname TYPE e071-obj_name.

  _objname = objname.

* Check against database
  SELECT  id object langu typ dokversion
        INTO CORRESPONDING FIELDS OF TABLE lt_dokhl
           FROM dokhl
             WHERE id = &apos;CL&apos;
                AND object = _objname.

* Use only most recent version.
  SORT lt_dokhl BY id object langu typ ASCENDING dokversion DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_dokhl COMPARING id object typ langu.

* Make sure there is at least one record here.
  CLEAR ls_dokhl.
  READ TABLE lt_dokhl INTO ls_dokhl INDEX 1.
  IF sy-subrc &lt;&gt; 0.
    RETURN.
  ENDIF.

  docnode = xmldoc-&gt;create_element( c_xml_key_class_documentation ).

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docnode-&gt;set_attribute( name = c_xml_key_object value = lv_str ).

  LOOP AT lt_dokhl INTO ls_dokhl.

* Create language node, and set attribute
    languagenode = xmldoc-&gt;create_element( c_xml_key_language ).
    lv_str = ls_dokhl-langu.
    rc = languagenode-&gt;set_attribute( name = c_xml_key_spras value = lv_str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmldoc-&gt;create_element( c_xml_key_textline ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languagenode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docnode-&gt;append_child( languagenode ) .
  ENDLOOP.

  rc = rootnode-&gt;append_child( docnode ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_METHOD_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get Method Documentation" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_METHOD_DOCUMENTATION" SCONAME="METHOD_KEY" VERSION="1" LANGU="E" DESCRIPT="Method Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCPDKEY"/>
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_METHOD_DOCUMENTATION" SCONAME="ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_METHOD_DOCUMENTATION.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA languagenode   TYPE REF TO if_ixml_element.
  DATA docnode        TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  TYPES: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       TYPE dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  DATA lt_dokhl TYPE TABLE OF t_dokhl.
  DATA ls_dokhl LIKE LINE OF lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  DATA lv_str TYPE string.
  DATA _objname TYPE e071-obj_name.

  _objname = method_key.

* Check against database
  SELECT  id object langu typ dokversion
        INTO CORRESPONDING FIELDS OF TABLE lt_dokhl
           FROM dokhl
             WHERE id = &apos;CO&apos;
                AND object = _objname.

* Use only most recent version.
  SORT lt_dokhl BY id object langu typ ASCENDING dokversion DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_dokhl COMPARING id object typ langu.

* Make sure there is at least one record here.
  CLEAR ls_dokhl.
  READ TABLE lt_dokhl INTO ls_dokhl INDEX 1.
  IF sy-subrc &lt;&gt; 0.
    RETURN.
  ENDIF.

  docnode = xmldoc-&gt;create_element( c_xml_key_method_documentation ).

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docnode-&gt;set_attribute( name = c_xml_key_object value = lv_str ).

  LOOP AT lt_dokhl INTO ls_dokhl.

* Create language node, and set attribute
    languagenode = xmldoc-&gt;create_element( c_xml_key_language ).
    lv_str = ls_dokhl-langu.
    rc = languagenode-&gt;set_attribute( name = c_xml_key_spras value = lv_str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmldoc-&gt;create_element( c_xml_key_textline ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languagenode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docnode-&gt;append_child( languagenode ) .
  ENDLOOP.

  rc = rootnode-&gt;append_child( docnode ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_SECTIONS" VERSION="1" LANGU="E" DESCRIPT="Get class sections ( ??? )" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_SECTIONS" SCONAME="ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_SECTIONS.
  DATA publicsection TYPE REF TO if_ixml_element.
  DATA protectedsection TYPE REF TO if_ixml_element.
  DATA privatesection TYPE REF TO if_ixml_element.
  DATA includename TYPE program.
  DATA reportstring TYPE string.

**/--------------------------------------------------------------------\
**|                                                                    |
*  includename = cl_oo_classname_service=&gt;get_pubsec_name( _classname ).
*  READ REPORT includename INTO reportlist.
*  publicsection = xmldoc-&gt;create_element( &apos;publicSection&apos; ).
*
*  reportstring = buildsourcestring( sourcetable = reportlist ).
*  rc = publicsection-&gt;if_ixml_node~set_value( reportstring ).
*  CLEAR reportstring.
**|--------------------------------------------------------------------|
*  includename = cl_oo_classname_service=&gt;get_prosec_name( _classname ).
*  READ REPORT includename INTO reportlist.
*  protectedsection = xmldoc-&gt;create_element( &apos;protectedSection&apos; ).
*  reportstring = buildsourcestring( sourcetable = reportlist ).
*  rc = protectedsection-&gt;if_ixml_node~set_value( reportstring ).
*  CLEAR reportstring.
**|--------------------------------------------------------------------|
*  includename = cl_oo_classname_service=&gt;get_prisec_name( _classname ).
*  READ REPORT includename INTO reportlist.
*  privatesection = xmldoc-&gt;create_element( &apos;privateSection&apos; ).
*  reportstring = buildsourcestring( sourcetable = reportlist ).
*  rc = privatesection-&gt;if_ixml_node~set_value( reportstring ).

*  rc = rootnode-&gt;append_child( publicsection ).
*  rc = rootnode-&gt;append_child( protectedsection ).
*  rc = rootnode-&gt;append_child( privatesection ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Get Class Text Pool" EXPOSURE="1" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_TEXTPOOL" SCONAME="ROOTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TEXTPOOL.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
  DATA atext TYPE REF TO if_ixml_element.
  DATA textpooltable TYPE STANDARD TABLE OF textpool.
  DATA textpoolrow TYPE textpool.
  DATA languagelist TYPE instlang.
  DATA alanguage TYPE spras.
  DATA _objname TYPE seoclsname.
  DATA rc TYPE i.
  DATA stemp TYPE string.
  DATA languagenode TYPE REF TO if_ixml_element.
  DATA textnode      TYPE REF TO if_ixml_element.
  DATA classpoolname TYPE program.
  DATA firstloop TYPE flag.

  _objname = objname.

  classpoolname = cl_oo_classname_service=&gt;get_classpool_name( _objname ).

  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
    CHANGING
      installed_languages = languagelist.

  firstloop = abap_true.

  LOOP AT languagelist INTO alanguage.
    READ TEXTPOOL classpoolname INTO textpooltable LANGUAGE alanguage.
    IF sy-subrc = 0.
      IF firstloop = abap_true.
        textnode = xmldoc-&gt;create_element( c_xml_key_textpool ).
        firstloop = abap_false.
      ENDIF.
      languagenode = xmldoc-&gt;create_element( c_xml_key_language ).
      stemp = alanguage.
      rc = languagenode-&gt;set_attribute( name = c_xml_key_spras value = stemp ).
      LOOP AT textpooltable INTO textpoolrow.
        atext = xmldoc-&gt;create_element( c_xml_key_textelement ).
        setattributesfromstructure( node = atext structure =
        textpoolrow ).
        rc = languagenode-&gt;append_child( atext ).
      ENDLOOP.
      rc = textnode-&gt;append_child( languagenode ).
    ENDIF.
  ENDLOOP.

  rc = rootnode-&gt;append_child( textnode ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_OO" CMPNAME="GET_VERSION_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_version_info.

  rs_version_info-zsaplink_plugin_major_version = 0.  &quot; We will still import anything written by older version, versioning doesn&apos;t change in- or ouptut
  rs_version_info-zsaplink_plugin_minor_version = 1.  &quot; Since we add versioning info this has to increase
  rs_version_info-zsaplink_plugin_build_version = 0.  &quot; minor version increased --&gt; reset to 0

  rs_version_info-zsaplink_plugin_info1         = &apos;ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects&apos;.
  rs_version_info-zsaplink_plugin_info2         = &apos;SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki&apos;.
  rs_version_info-zsaplink_plugin_info3         = &apos;Download from https://www.assembla.com/code/saplink/subversion/nodes&apos;.
  rs_version_info-zsaplink_plugin_info4         = &apos;and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk&apos;.
  rs_version_info-zsaplink_plugin_info5         = &apos;&apos;.

ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
