<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" VERSION="1" LANGU="E" DESCRIPT="SAPlink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
 <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
 <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <localTestClasses>*&quot;* use this source file for your ABAP unit test classes
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

CLASS ltcl_check_enh_implementation DEFINITION FINAL FOR TESTING.
  &quot; DURATION SHORT
  &quot; RISK LEVEL HARMLESS
  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
  PUBLIC SECTION.
    METHODS:
      check_010_non_existing   FOR TESTING RAISING cx_static_check,
      check_020_create_slinkee FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
    DATA targetobject TYPE REF TO zsaplink.
    DATA ixml         TYPE REF TO if_ixml_document.
    DATA cx           TYPE REF TO cx_root.
    DATA msg  TYPE string.
    DATA name TYPE string.
    DATA devclass TYPE devclass.
    METHODS setup.
ENDCLASS.                    &quot;ltcl_check_enh_implementation DEFINITION

*----------------------------------------------------------------------*
*       CLASS ltcl_check_enh_implementation IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ltcl_check_enh_implementation IMPLEMENTATION.

  METHOD setup.
  ENDMETHOD.                    &quot;setup

  METHOD check_010_non_existing.
    name = &apos;ZDOES_NOT_EXIST&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_implementation
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.

  ENDMETHOD.                    &quot;CHECK_CHECK_NON_EXISTING

  METHOD check_020_create_slinkee.
    DATA: xmlstring TYPE string.
    name     = &apos;ZDUMMY_BADI&apos;.
    devclass = &apos;$TMP&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_implementation
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
    cl_aunit_assert=&gt;assert_bound( act = ixml msg = &apos;iXML is not bound&apos; ).

    xmlstring = targetobject-&gt;convertixmldoctostring( ixmldocument = ixml ).

    FREE: ixml, cx.

    ixml = targetobject-&gt;convertstringtoixmldoc( xmlstring = xmlstring ).

    &quot; Test without overwrite
    TRY.

        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml    &quot; IF_IXML_DOCUMENT
            devclass     = devclass    &quot; Development class/package
*         overwrite    = overwrite    &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.
    &quot; Test with overwrite
    TRY.
        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml                 &quot; IF_IXML_DOCUMENT
            devclass     = devclass    &quot; Development class/package
            overwrite    = &apos;X&apos;                  &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
  ENDMETHOD.                    &quot;check_030_xml_string

ENDCLASS.                    &quot;ltcl_check_enh_implementation IMPLEMENTATION</localTestClasses>
 <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
 <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
 <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
 <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
 <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
 <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
 <forwardDeclaration>ABAP</forwardDeclaration>
 <forwardDeclaration>SEOP</forwardDeclaration>
 <forwardDeclaration>SEOR</forwardDeclaration>
 <forwardDeclaration>SEOS</forwardDeclaration>
 <forwardDeclaration>SEOT</forwardDeclaration>
 <forwardDeclaration>SEOX</forwardDeclaration>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="BADIIMPL_TOOL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_BADI_IMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHANCEMENT_ID" VERSION="1" LANGU="E" DESCRIPT="Name for the enhancement_id Attribute" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;enhancement_id&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHTOOLTYPE" VERSION="1" LANGU="E" DESCRIPT="Enhancement Tool" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTVALUE="&apos;Tool Type&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ENHTOOLTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHTOOLTYPE_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;tooltype_id&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="HOOKIMPL_TOOL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_HOOK_IMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Name in Object List" EXPOSURE="0" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TROBJ_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="OBJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" EXPOSURE="0" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TROBJTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ORIG_OBJ" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="14 " ATTDECLTYP="2" ATTVALUE="&apos;orig_object&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="PGMID" VERSION="1" LANGU="E" DESCRIPT="Program ID in Requests and Tasks" EXPOSURE="0" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PGMID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="PROGRAM" VERSION="1" LANGU="E" DESCRIPT="ABAP Program Name" EXPOSURE="0" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PROGNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SHORTTEXT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SHORTTEXT_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;shorttext&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SPOT_NAME" VERSION="1" LANGU="E" DESCRIPT="Name (ID) of an Enhancement Spot" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ENHSPOTNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SPOT_NAME_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;spot_name&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <inheritance CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
  <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
  <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
  <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
  <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
  <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
 </inheritance>
 <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.

  TRY.
      me-&gt;get_impl_tool( ).
      exists = &apos;X&apos;.
    CATCH cx_root INTO cx.
  ENDTRY.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
  &quot; General DATA types
  DATA _objtype TYPE string.
  DATA rc TYPE sysubrc.
  DATA cx TYPE REF TO cx_enh_root.
  &quot; XML related DATA types
  DATA rootnode TYPE REF TO if_ixml_element.
  &quot; Object specific DATA types
  DATA badi_impls      TYPE enh_badi_impl_data_it.
  DATA hook_impls      TYPE ENH_HOOK_IMPL_IT.
  DATA impls_xml  TYPE string.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_root TYPE REF TO if_ixml_element.
  DATA value TYPE string.
  DATA enh_include TYPE progname.
  DATA extension TYPE enhincludeextension.
  DATA enhobj    TYPE enhobj.
  FIELD-SYMBOLS &lt;fs_impls&gt; TYPE any.

  &quot; Set root object
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;enhancement_id &quot; NAME
      value     = objname          &quot; VALUE
  ).

  TRY.
    me-&gt;get_impl_tool( ).
    CATCH cx_enh_root INTO cx.
  ENDTRY.
  &quot; Read Shorttext of implementation
  me-&gt;get_shorttext( ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;shorttext_id &quot; NAME
      value     = me-&gt;shorttext       &quot; VALUE
  ).

  &quot; set enhancement tool type
  value = enhtooltype.
  rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;enhtooltype_id
        value     = value
    ).

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.  &quot; BADI implementation
    &quot; Enhancement Spot
    value = me-&gt;badiimpl_tool-&gt;get_spot_name( ).
    rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;spot_name_id
        value     = value
    ).
    ASSIGN badi_impls to &lt;fs_impls&gt;.

  else. &quot;hook implementation

    ASSIGN hook_impls to &lt;fs_impls&gt;.
    CALL METHOD me-&gt;hookimpl_tool-&gt;get_original_object
      EXPORTING
        VERSION   = &apos;I&apos;
      IMPORTING
        PGMID     = me-&gt;pgmid
        OBJ_NAME  = me-&gt;obj_name
        OBJ_TYPE  = me-&gt;obj_type
        PROGRAM   = me-&gt;program.

     CONCATENATE me-&gt;pgmid    me-&gt;obj_name
                 me-&gt;obj_type me-&gt;program
     INTO value  SEPARATED BY &apos;-&apos;.

    rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;orig_obj
        value     = value
    ).

  endif.

  &quot; Read implementations and transform to XML
  CALL METHOD ME-&gt;GET_IMPLEMENTATIONS
    IMPORTING
      R_IMPLEMENTATIONS = &lt;fs_impls&gt;.

  CALL TRANSFORMATION (`ID`)
  SOURCE impls = &lt;fs_impls&gt;
  RESULT XML impls_xml.

  impls_ixml = zsaplink=&gt;convertstringtoixmldoc( xmlstring = impls_xml ).
  impls_root = impls_ixml-&gt;get_root_element( ).

  rootnode-&gt;append_child( new_child = impls_root ).

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string.

  DATA _objtype TYPE string.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA ixml TYPE REF TO if_ixml.
  DATA impls_root TYPE REF TO if_ixml_node.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_xml  TYPE string.
  DATA badi_impls      TYPE enh_badi_impl_data_it.
  DATA hook_impls      TYPE ENH_HOOK_IMPL_IT.
  DATA tool_type       TYPE enhtooltype.
  DATA class_not_active TYPE boolean.
  DATA enhobj TYPE string.
  DATA enhname   TYPE enhname.
  DATA enhcomp   TYPE enhcompositename.
  DATA enhref    TYPE REF TO if_enh_tool.

  FIELD-SYMBOLS: &lt;badiimpl&gt; LIKE LINE OF badi_impls.
  FIELD-SYMBOLS: &lt;hookimpl&gt; LIKE LINE OF hook_impls.
  FIELD-SYMBOLS &lt;fs_impls&gt; TYPE any.

  DATA: error_list TYPE REF TO cl_wb_checklist,
        error_tab  TYPE swbme_error_tab.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.


  DATA:
  e_devclass               TYPE devclass,
  e_overwrite              TYPE seox_boolean.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  me-&gt;objname = rootnode-&gt;get_attribute( me-&gt;enhancement_id ).
  me-&gt;shorttext = rootnode-&gt;get_attribute( me-&gt;shorttext_id ).
  me-&gt;spot_name = rootnode-&gt;get_attribute( me-&gt;spot_name_id ).
  me-&gt;enhtooltype = tool_type = rootnode-&gt;get_attribute( me-&gt;enhtooltype_id ).
  enhobj = rootnode-&gt;get_attribute( me-&gt;orig_obj ).

  SPLIT enhobj AT &apos;-&apos;
   into me-&gt;pgmid    me-&gt;obj_name
        me-&gt;obj_type me-&gt;program.

  &quot; check if object exists
  TRY.
      me-&gt;get_impl_tool( &apos;X&apos; ).
    CATCH cx_root INTO cx.
  ENDTRY.

  IF me-&gt;badiimpl_tool IS BOUND   OR
     me-&gt;hookimpl_tool IS BOUND.
   IF overwrite         IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
   ELSE.
&quot; Delete existing object
        me-&gt;deleteobject( ).
   ENDIF.
  ENDIF.
  &quot; Read BAdI/HOOK Implementations from Slinkee
  impls_root = rootnode-&gt;get_first_child( ).
  ixml = cl_ixml=&gt;create( ).
  impls_ixml = ixml-&gt;create_document( ).
  impls_ixml-&gt;append_child( new_child = impls_root ).

  impls_xml = zsaplink=&gt;convertixmldoctostring( ixmldocument = impls_ixml ).

  if tool_type eq cl_enh_tool_badi_impl=&gt;tooltype.
     ASSIGN badi_impls to &lt;fs_impls&gt;.
  else.
    ASSIGN hook_impls to &lt;fs_impls&gt;.
  endif.

  CALL TRANSFORMATION (`ID`)
    SOURCE XML impls_xml
    RESULT impls = &lt;fs_impls&gt;.

  &quot; Create Implementation
  &quot; try create
  enhname = me-&gt;objname.
  &quot; Now create the new implementation
  TRY.
      CALL METHOD cl_enh_factory=&gt;create_enhancement
        EXPORTING
          enhname       = enhname
          enhtype       = cl_abstract_enh_tool_redef=&gt;credefinition
          enhtooltype   = tool_type
          compositename = enhcomp
        IMPORTING
          enhancement   = enhref
        CHANGING
*         TRKORR        =
          devclass      = e_devclass.
    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  if tool_type eq cl_enh_tool_badi_impl=&gt;tooltype.
    &quot; enhancement is of type BAdI
    CALL METHOD ME-&gt;SAVE_BADI_IMPL
      EXPORTING
        ENHREF     = enhref
        BADI_IMPLS = &lt;fs_impls&gt;.
  else.
    &quot; enhancement is of type hook
    CALL METHOD ME-&gt;SAVE_HOOK_IMPL
      EXPORTING
        ENHREF     = enhref
        HOOK_IMPLS = &lt;fs_impls&gt;.
  endif.
  &quot; successful install
  name = me-&gt;objname.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA: badi_implementations TYPE enh_badi_impl_data_it.
  DATA: hook_implementations TYPE enh_hook_impl_it.

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    IF me-&gt;badiimpl_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Enhancement Object is not locked&apos;.
    ENDIF.
    me-&gt;badiimpl_tool-&gt;if_enh_object~delete(
      EXPORTING
        nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
        run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
    ).
    me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).

  else.
    IF me-&gt;hookimpl_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Enhancement Object is not locked&apos;.
    ENDIF.
    me-&gt;hookimpl_tool-&gt;if_enh_object~delete(
      EXPORTING
        nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
        run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
    ).
    me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
  endif.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  objecttype = &apos;ENHO&apos;.  &quot; Enhancement Implementation

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" VERSION="1" LANGU="E" DESCRIPT="Read Enhanchement Implementations" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="R_IMPLEMENTATIONS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
  <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
  <source>method GET_IMPLEMENTATIONS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/


  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    CALL METHOD me-&gt;badiimpl_tool-&gt;get_implementations
      EXPORTING
        version            = &apos;I&apos;
      RECEIVING
        re_implementations = r_implementations.
  else.
    CALL METHOD me-&gt;hookimpl_tool-&gt;get_hook_impls
      EXPORTING
        version            = &apos;I&apos;
      RECEIVING
        enhancements = r_implementations.
  endif.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" VERSION="1" LANGU="E" DESCRIPT="Read Implementation Tool" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" SCONAME="I_LOCK" VERSION="1" LANGU="E" DESCRIPT="Boolean Variable (X=True, -=False, Space=Unknown)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLEAN" PAROPTIONL="X"/>
  <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
  <source>method GET_IMPL_TOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_enh_root.
  DATA msg TYPE string.

  DATA enhname   TYPE enhname.
  DATA enhspot   TYPE enhspotname.
  DATA enhref    TYPE REF TO if_enh_tool.
  DATA classname TYPE enhtoolclassname.

  enhname = objname.
  enhspot = objname.

  &quot; FREE: enhref, me-&gt;badiimpl_tool.

  TRY.
      enhref = cl_enh_factory=&gt;get_enhancement(
                 enhancement_id = enhname
                 lock           = i_lock
               ).

      &quot; Check that is is realy a BAdI or Hook
      enhtooltype = enhref-&gt;get_tool( ).
      &quot; The static constans are only available in NetWeaver 7.02 or higher
      &quot; yo have to replace them with the values provided in the comment
      if enhtooltype ne cl_enh_tool_badi_impl=&gt;tooltype and &quot; &apos;BADI_IMPL&apos;
         enhtooltype ne cl_enh_tool_hook_impl=&gt;tooltype.    &quot; &apos;HOOK_IMPL&apos;
         CONCATENATE &apos;The enhancement&apos; enhname &apos;is not a BAdI/Hook Implementation&apos; INTO msg SEPARATED BY space.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = msg.
      ENDIF.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.

  ENDTRY.

 &quot; convert based on type of enhancement
  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    me-&gt;badiimpl_tool ?= enhref.
  else.
    me-&gt;hookimpl_tool ?= enhref.
  endif.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_SHORTTEXT" VERSION="1" LANGU="E" DESCRIPT="Read Short text of Enhancement Implementations" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method GET_SHORTTEXT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    me-&gt;shorttext = me-&gt;badiimpl_tool-&gt;if_enh_object_docu~get_shorttext( ).
  else.
    me-&gt;shorttext = me-&gt;hookimpl_tool-&gt;if_enh_object_docu~get_shorttext( ).
  endif.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" VERSION="1" LANGU="E" DESCRIPT="Save BAdi Implementation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="ENHREF" VERSION="1" LANGU="E" DESCRIPT="SAP Enhancement Tool Root Interface" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_ENH_TOOL"/>
  <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="BADI_IMPLS" VERSION="1" LANGU="E" DESCRIPT="Table ENH_BADI_IMPL_DATA" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_BADI_IMPL_DATA_IT"/>
  <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
  <source>method SAVE_BADI_IMPL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA  class_not_active TYPE boolean.
  DATA: error_list TYPE REF TO cl_wb_checklist.
  DATA error_tab  TYPE swbme_error_tab.

  DATA  cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  FIELD-SYMBOLS: &lt;badiimpl&gt; LIKE LINE OF badi_impls.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.

  me-&gt;badiimpl_tool ?= enhref.
  &quot; Set Enhancement Spot Name
  me-&gt;badiimpl_tool-&gt;set_spot_name( spot_name = me-&gt;spot_name ).

  me-&gt;badiimpl_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT badi_impls ASSIGNING &lt;badiimpl&gt;.
    &quot; The implementation can only be created when the
    &quot; implementing class is active
    CALL FUNCTION &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
      EXPORTING
        clskey        = &lt;badiimpl&gt;-impl_class
      IMPORTING
        not_active    = class_not_active
      EXCEPTIONS
        not_specified = 1
        not_existing  = 2
        is_interface  = 3
        no_text       = 4
        inconsistent  = 5
        OTHERS        = 6.
    IF sy-subrc &lt;&gt; 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    IF class_not_active = abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Classes for Enhancement Implementations must be active&apos;.
    ENDIF.
    TRY.
        CALL METHOD badiimpl_tool-&gt;add_implementation
          EXPORTING
            im_implementation = &lt;badiimpl&gt;.
      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Check if the object has still errors which would avoid saving
      me-&gt;badiimpl_tool-&gt;if_enh_object~check(
        EXPORTING
          version                = cl_enh_tool_badi_impl=&gt;inactive   &quot; ABAP: Program Status (Active, Saved, Transported...)
        CHANGING
          error_list             = error_list    &quot; List of All Error Messages from a Syntax Check
      ).

      error_list-&gt;get_error_messages(
        IMPORTING
          p_error_tab = error_tab    &quot; Error Message Table
      ).

      IF error_tab IS NOT INITIAL.
        LOOP AT error_tab ASSIGNING &lt;error&gt; WHERE mtype = &apos;E&apos;.
          LOOP AT &lt;error&gt;-mtext ASSIGNING &lt;mtext&gt;.
            CONCATENATE msg &lt;mtext&gt; &apos;;&apos; INTO msg.
          ENDLOOP.
        ENDLOOP.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
      ENDIF.

      &quot; Save
      me-&gt;badiimpl_tool-&gt;if_enh_object~save( run_dark = &apos;X&apos; ).
      &quot; Unlock
      me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

endmethod.</source>
 </method>
 <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" VERSION="1" LANGU="E" DESCRIPT="Save Hook Implementation" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="ENHREF" VERSION="1" LANGU="E" DESCRIPT="SAP Enhancement Tool Root Interface" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_ENH_TOOL"/>
  <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="HOOK_IMPLS" VERSION="1" LANGU="E" DESCRIPT="Internal Table for ENH_HOOK_IMPL" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_HOOK_IMPL_IT"/>
  <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
  <source>method SAVE_HOOK_IMPL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA  class_not_active TYPE boolean.

  DATA  cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  DATA  include TYPE progname.
  DATA  extension TYPE enhincludeextension.

  FIELD-SYMBOLS: &lt;hookimpl&gt; LIKE LINE OF hook_impls.

  me-&gt;hookimpl_tool ?= enhref.
  &quot; saving the enhancement include?
  CALL METHOD me-&gt;hookimpl_tool-&gt;get_hook_impls_include
    IMPORTING
      include   = include
      extension = extension.

  if include is initial or
     extension is initial.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Enhancement include not saved&apos;.
  endif.

  TRY.
      &quot; Set orig object name
      CALL METHOD ME-&gt;HOOKIMPL_TOOL-&gt;SET_ORIGINAL_OBJECT
        EXPORTING
          PGMID    = me-&gt;pgmid
          OBJ_NAME = me-&gt;obj_name
          OBJ_TYPE = me-&gt;obj_type
          PROGRAM  = me-&gt;program.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  me-&gt;hookimpl_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT hook_impls ASSIGNING &lt;hookimpl&gt;.
    TRY.
        me-&gt;hookimpl_tool-&gt;add_hook_impl(
          overwrite = &lt;hookimpl&gt;-overwrite
          method =    &lt;hookimpl&gt;-method
          enhmode =   &lt;hookimpl&gt;-enhmode
          full_name = &lt;hookimpl&gt;-full_name
          source =    &lt;hookimpl&gt;-source
         ).

      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Save
      me-&gt;hookimpl_tool-&gt;if_enh_object~save( run_dark = &apos;X&apos; ).
      &quot; Unlock
      me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

endmethod.</source>
 </method>
</CLAS>
