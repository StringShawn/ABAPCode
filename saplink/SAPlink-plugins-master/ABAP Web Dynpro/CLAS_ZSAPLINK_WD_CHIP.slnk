<?xml version="1.0" encoding="utf-16"?>
<CLAS CLSNAME="ZSAPLINK_WD_CHIP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP CHIP" UUID="BC773749F0831EE181BEF91BE86D4439" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20111103" CHANGEDON="20111103" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="702" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK" CHANGEDBY="BCUSER">
 <publicSection>class ZSAPLINK_WD_CHIP definition
  public
  inheriting from ZSAPLINK
  final
  create public .

public section.
*&quot;* public components of class ZSAPLINK_WD_CHIP
*&quot;* do not include other source files here!!!

  constants C_PORT_NODE type STRING value &apos;PORT&apos;. &quot;#EC NOTEXT
  constants C_PARAM_NODE type STRING value &apos;PARAM&apos;. &quot;#EC NOTEXT
  constants C_TAG_NODE type STRING value &apos;TAG&apos;. &quot;#EC NOTEXT

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .
  methods VALUEHELP
    redefinition .</publicSection>
 <protectedSection>protected section.
*&quot;* protected components of class ZSAPLINK_WD_CHIP
*&quot;* do not include other source files here!!!

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
 <privateSection>private section.
*&quot;* private components of class ZSAPLINK_WD_CHIP
*&quot;* do not include other source files here!!!</privateSection>
 <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
 <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <attribute CLSNAME="ZSAPLINK_WD_CHIP" CMPNAME="C_PARAM_NODE" VERSION="1" LANGU="E" DESCRIPT="XML param node" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="BCUSER" CREATEDON="20111103" CHANGEDBY="BCUSER" CHANGEDON="20111103" ATTDECLTYP="2" ATTVALUE="&apos;PARAM&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="702" TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_WD_CHIP" CMPNAME="C_PORT_NODE" VERSION="1" LANGU="E" DESCRIPT="XML port node" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="BCUSER" CREATEDON="20111103" CHANGEDBY="BCUSER" CHANGEDON="20111103" ATTDECLTYP="2" ATTVALUE="&apos;PORT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="702" TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZSAPLINK_WD_CHIP" CMPNAME="C_TAG_NODE" VERSION="1" LANGU="E" DESCRIPT="XML tag node" EXPOSURE="2" STATE="1" EDITORDER="3 " AUTHOR="BCUSER" CREATEDON="20111103" CHANGEDBY="BCUSER" CHANGEDON="20111103" ATTDECLTYP="2" ATTVALUE="&apos;TAG&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="702" TYPESRC_LENG="0 "/>
 <inheritance CLSNAME="ZSAPLINK_WD_CHIP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="BCUSER" CREATEDON="20111103" CHANGEDBY="BCUSER" CHANGEDON="20111103">
  <redefinition CLSNAME="ZSAPLINK_WD_CHIP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
  <redefinition CLSNAME="ZSAPLINK_WD_CHIP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
  <redefinition CLSNAME="ZSAPLINK_WD_CHIP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
  <redefinition CLSNAME="ZSAPLINK_WD_CHIP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
  <redefinition CLSNAME="ZSAPLINK_WD_CHIP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  <redefinition CLSNAME="ZSAPLINK_WD_CHIP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="VALUEHELP" EXPOSURE="2"/>
 </inheritance>
 <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*| Web Dynpro ABAP CHIP plugin details                                 |
*|                                                                     |
*| Created by:  Robin Vleeschhouwer                                    |
*| Company:     RV SAP Consultancy                                     |
*| Date:        4 November 2011                                        |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA lv_chip_name TYPE wdy_chip_name.

  &quot;Set name to uppercase
  lv_chip_name = to_upper( objname ).

  &quot;Check if CHIP exists
  exists = cl_wdy_md_chip_factory=&gt;check_existency( p_name = lv_chip_name ).
ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*| Web Dynpro ABAP CHIP plugin details                                 |
*|                                                                     |
*| Created by:  Robin Vleeschhouwer                                    |
*| Company:     RV SAP Consultancy                                     |
*| Date:        4 November 2011                                        |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  &quot;XML nodes
  DATA lo_root_node         TYPE REF TO if_ixml_element.
  DATA lo_port_node         TYPE REF TO if_ixml_element.
  DATA lo_param_node        TYPE REF TO if_ixml_element.
  DATA lo_tag_node          TYPE REF TO if_ixml_element.
  &quot;Chip data
  DATA lo_chip              TYPE REF TO if_wdy_md_chip.
  DATA lv_chip_name         TYPE wdy_chip_name.
  DATA ls_chip_definition   TYPE wdy_chip_def_xt.
  DATA lt_port              TYPE wdy_chip_port_ref_tab.
  DATA ls_port_definition   TYPE wdy_chip_port_xt.
  DATA lt_param             TYPE wdy_chip_param_xt_tab.
  DATA lt_tag               TYPE wdy_chip_tag_tab.
  DATA lx_error             TYPE REF TO cx_root.
  FIELD-SYMBOLS &lt;ls_port&gt;   TYPE wdy_chip_port_ref.
  FIELD-SYMBOLS &lt;ls_param&gt;  TYPE wdy_chip_param_xt.
  FIELD-SYMBOLS &lt;ls_tag&gt;    TYPE wdy_chip_tag.

  &quot;Set name to uppercase
  lv_chip_name = to_upper( objname ).

  TRY.
      lo_chip = cl_wdy_md_chip_factory=&gt;get_chip( p_name = lv_chip_name ).
    CATCH cx_wdy_md_permission_failure
          cx_wdy_md_access_exception
          cx_wdy_md_not_existing INTO lx_error.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found
          msg    = lx_error-&gt;get_text( ).
  ENDTRY.

  &quot;Get CHIP definition
  ls_chip_definition = lo_chip-&gt;get_definition( ).

  &quot;Get CHIP ports
  lt_port = lo_chip-&gt;get_ports( ).

  &quot;Create parent node in XML
  lo_root_node = xmldoc-&gt;create_element( getobjecttype( ) ).

  &quot;Set CHIP definition in XML
  setattributesfromstructure( node      = lo_root_node
                              structure = ls_chip_definition ).

  &quot;Set CHIP ports in XML
  LOOP AT lt_port ASSIGNING &lt;ls_port&gt;.
    &quot;Set port definition in XML
    ls_port_definition = &lt;ls_port&gt;-port_ref-&gt;get_definition( ).
    lo_port_node = xmldoc-&gt;create_element( c_port_node ).
    setattributesfromstructure( node      = lo_port_node
                                structure = ls_port_definition ).
    lo_root_node-&gt;append_child( lo_port_node ).

    &quot;Get port parameters
    lt_param = &lt;ls_port&gt;-port_ref-&gt;get_parameter_table( ).

    LOOP AT lt_param ASSIGNING &lt;ls_param&gt;.
      &quot;Set port parameters in XML
      lo_param_node = xmldoc-&gt;create_element( c_param_node ).
      setattributesfromstructure( node      = lo_param_node
                                  structure = &lt;ls_param&gt; ).
      lo_port_node-&gt;append_child( lo_param_node ).

      &quot;Get parameter tags
      lt_tag = &lt;ls_port&gt;-port_ref-&gt;get_tag_table( &lt;ls_param&gt;-field_name ).

      LOOP AT lt_tag ASSIGNING &lt;ls_tag&gt;.
        &quot;Set parameter tags in XML
        lo_tag_node = xmldoc-&gt;create_element( c_tag_node ).
        setattributesfromstructure( node      = lo_tag_node
                                    structure = &lt;ls_tag&gt; ).
        lo_param_node-&gt;append_child( lo_tag_node ).
      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

  &quot;Set XML in SAPLink
  xmldoc-&gt;append_child( lo_root_node ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*| Web Dynpro ABAP CHIP plugin details                                 |
*|                                                                     |
*| Created by:  Robin Vleeschhouwer                                    |
*| Company:     RV SAP Consultancy                                     |
*| Date:        4 November 2011                                        |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  &quot;XML nodes
  DATA lo_root_node         TYPE REF TO if_ixml_element.
  DATA lo_port_node         TYPE REF TO if_ixml_element.
  DATA lo_port_nodes        TYPE REF TO if_ixml_node_list.
  DATA lo_port_iterator     TYPE REF TO if_ixml_node_iterator.
  DATA lo_param_node        TYPE REF TO if_ixml_element.
  DATA lo_param_nodes       TYPE REF TO if_ixml_node_list.
  DATA lo_param_iterator    TYPE REF TO if_ixml_node_iterator.
  DATA lo_tag_node          TYPE REF TO if_ixml_element.
  DATA lo_tag_nodes         TYPE REF TO if_ixml_node_list.
  DATA lo_tag_iterator      TYPE REF TO if_ixml_node_iterator.
  &quot;Chip data
  DATA lo_chip              TYPE REF TO cl_wdy_md_chip.
  DATA lo_port              TYPE REF TO cl_wdy_md_port.
  DATA ls_chip_definition   TYPE wdy_chip_def_xt.
  DATA ls_port_definition   TYPE wdy_chip_port_xt.
  DATA ls_param             TYPE wdy_chip_param_xt.
  DATA ls_tag               TYPE wdy_chip_tag.
  DATA lx_error             TYPE REF TO cx_root.

  &quot;Get XML from SAPLink
  xmldoc = ixmldocument.
  lo_root_node = xmldoc-&gt;find_from_name( getobjecttype( ) ).

  &quot;Get CHIP definition
  getstructurefromattributes(
    EXPORTING
      node            = lo_root_node
      preserveversion = abap_true
    CHANGING
      structure       = ls_chip_definition ).

  &quot;Set CHIP name in SAPLink
  objname = ls_chip_definition-chip_name.

  &quot;Check if CHIP already exists
  IF checkexists( ) IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      &quot;Delete CHIP for new creation
      deleteobject( ).
    ENDIF.
  ENDIF.

  TRY.
      &quot;Create CHIP
      lo_chip = cl_wdy_md_chip=&gt;create_chip( p_name     = ls_chip_definition-chip_name
                                             p_devclass = devclass
                                             p_suppress_access_permission = abap_true ).
      &quot;Set CHIP definition
      lo_chip-&gt;modify_definition( ls_chip_definition ).
    CATCH cx_wdy_md_already_existing
          cx_wdy_md_permission_failure
          cx_wdy_md_corr_cancelled
          cx_wdy_md_enqueue_failure
          cx_wdy_md_access_exception
          cx_wdy_md_create_exception INTO lx_error.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lx_error-&gt;get_text( ).
  ENDTRY.

  &quot;Get port nodes
  lo_port_nodes     = lo_root_node-&gt;get_children( ).
  lo_port_iterator  = lo_port_nodes-&gt;create_iterator( ).
  lo_port_node     ?= lo_port_iterator-&gt;get_next( ).
  WHILE lo_port_node IS NOT INITIAL.
    getstructurefromattributes(
      EXPORTING
        node            = lo_port_node
        preserveversion = abap_true
      CHANGING
        structure       = ls_port_definition ).

    TRY.
        &quot;Create port
        lo_port = lo_chip-&gt;create_port( p_name = ls_port_definition-port_name
                                        p_kind = ls_port_definition-port_kind ).
        &quot;Set port definition
        lo_port-&gt;modify_definition( ls_port_definition ).
      CATCH cx_wdy_md_already_existing
            cx_wdy_md_create_exception INTO lx_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lx_error-&gt;get_text( ).
    ENDTRY.

    &quot;Get parameter nodes
    lo_param_nodes    = lo_port_node-&gt;get_children( ).
    lo_param_iterator = lo_param_nodes-&gt;create_iterator( ).
    lo_param_node    ?= lo_param_iterator-&gt;get_next( ).
    WHILE lo_param_node IS NOT INITIAL.
      getstructurefromattributes(
        EXPORTING
          node            = lo_param_node
          preserveversion = abap_true
        CHANGING
          structure       = ls_param ).

      TRY.
          lo_port-&gt;create_parameter( ls_param-field_name ).
          lo_port-&gt;modify_parameter( ls_param ).
        CATCH cx_wdy_md_already_existing
              cx_wdy_md_create_exception
              cx_wdy_md_not_existing INTO lx_error.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lx_error-&gt;get_text( ).
      ENDTRY.

      &quot;Get tag nodes
      lo_tag_nodes    = lo_param_node-&gt;get_children( ).
      lo_tag_iterator = lo_tag_nodes-&gt;create_iterator( ).
      lo_tag_node    ?= lo_tag_iterator-&gt;get_next( ).
      WHILE lo_tag_node IS NOT INITIAL.
        getstructurefromattributes(
          EXPORTING
            node            = lo_tag_node
            preserveversion = abap_true
          CHANGING
            structure       = ls_tag ).
        TRY.
            lo_port-&gt;create_tag(  p_param_name = ls_tag-field_name
                                  p_tag_name   = ls_tag-tag_name ).
          CATCH cx_wdy_md_already_existing
          cx_wdy_md_create_exception INTO lx_error.
            RAISE EXCEPTION TYPE zcx_saplink
              EXPORTING
                textid = zcx_saplink=&gt;error_message
                msg    = lx_error-&gt;get_text( ).
        ENDTRY.

        lo_tag_node ?= lo_tag_iterator-&gt;get_next( ).
      ENDWHILE.

      lo_param_node ?= lo_param_iterator-&gt;get_next( ).
    ENDWHILE.

    lo_port_node ?= lo_port_iterator-&gt;get_next( ).
  ENDWHILE.

  &quot;Create TADIR entry
  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
    EXPORTING
      object          = objname
      object_class    = if_wdy_md_chip=&gt;c_trobjtype
      mode            = &apos;INSERT&apos;
      global_lock     = abap_true
      devclass        = devclass
      suppress_dialog = abap_true
    EXCEPTIONS
      OTHERS          = 1.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message.
  ENDIF.

  lo_chip-&gt;save( ).
  name = objname.
ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*| Web Dynpro ABAP CHIP plugin details                                 |
*|                                                                     |
*| Created by:  Robin Vleeschhouwer                                    |
*| Company:     RV SAP Consultancy                                     |
*| Date:        4 November 2011                                        |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA lo_chip      TYPE REF TO cl_wdy_md_chip.
  DATA lv_chip_name TYPE wdy_chip_name.
  DATA lx_error     TYPE REF TO cx_root.

  &quot;Set name to uppercase
  lv_chip_name = to_upper( objname ).

  TRY.
      lo_chip ?= cl_wdy_md_chip_factory=&gt;get_chip( p_name = lv_chip_name ).
    CATCH cx_wdy_md_permission_failure
          cx_wdy_md_access_exception
          cx_wdy_md_not_existing INTO lx_error.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found
          msg    = lx_error-&gt;get_text( ).
  ENDTRY.

  TRY.
      lo_chip-&gt;lock( ).
    CATCH cx_wdy_md_permission_failure
          cx_wdy_md_corr_cancelled
          cx_wdy_md_enqueue_failure
          cx_wdy_md_access_exception INTO lx_error.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lx_error-&gt;get_text( ).
  ENDTRY.

  lo_chip-&gt;delete( ).
  lo_chip-&gt;save( ).
  lo_chip-&gt;unlock( ).
ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*| Web Dynpro ABAP CHIP plugin details                                 |
*|                                                                     |
*| Created by:  Robin Vleeschhouwer                                    |
*| Company:     RV SAP Consultancy                                     |
*| Date:        4 November 2011                                        |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  &quot;Web Dynpro CHIP
  objecttype = if_wdy_md_chip=&gt;c_trobjtype.
ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZSAPLINK" CMPNAME="VALUEHELP" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>METHOD valuehelp.
*/---------------------------------------------------------------------\
*| Web Dynpro ABAP CHIP plugin details                                 |
*|                                                                     |
*| Created by:  Robin Vleeschhouwer                                    |
*| Company:     RV SAP Consultancy                                     |
*| Date:        4 November 2011                                        |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA lv_chip_name TYPE wdy_chip_name.

  &quot;Get chip name to search for
  PERFORM get_current_screen_value IN PROGRAM zsaplink IF FOUND
                                   USING &apos;OBJNAME&apos; &apos;0110&apos;
                                   CHANGING objname.

  &quot;Set name to uppercase
  lv_chip_name = to_upper( objname ).

  &quot;Display value help
  CALL FUNCTION &apos;F4_GENERIC&apos;
    EXPORTING
      object_type        = &apos;YP&apos;
      object             = lv_chip_name
      suppress_selection = &apos;X&apos;
    IMPORTING
      result             = e_objname.

  IF e_objname IS INITIAL.
    e_objname = lv_chip_name.
  ENDIF.
ENDMETHOD.</source>
 </method>
</CLAS>
