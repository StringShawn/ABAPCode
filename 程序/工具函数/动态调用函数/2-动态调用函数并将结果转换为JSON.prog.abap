FUNCTION ZFM_OA_DATATOJSON.
*"----------------------------------------------------------------------
*"*"本地接口：
*"  IMPORTING
*"     VALUE(IV_INDEX_NO) TYPE  ZOAINDEX_NO OPTIONAL
*"  EXPORTING
*"     VALUE(EV_STR_HEAD) TYPE  STRING
*"     VALUE(EV_STR_ITEM) TYPE  STRING
*"     VALUE(EV_STR_LTXT) TYPE  STRING
*"----------------------------------------------------------------------
*{   INSERT         ERDK900217                                        1

*---------function 参数
  DATA: EXPORT_PARAMETER  TYPE TABLE OF RSEXP WITH HEADER LINE,
        IMPORT_PARAMETER  TYPE TABLE OF RSIMP WITH HEADER LINE,
        TABLES_PARAMETER  TYPE TABLE OF RSTBL WITH HEADER LINE.





*----------动态FUNCTION参数常量
  CONSTANTS:
  ABAP_FUNC_EXPORTING TYPE ABAP_FUNC_PARMBIND-KIND VALUE 10,
  ABAP_FUNC_IMPORTING TYPE ABAP_FUNC_PARMBIND-KIND VALUE 20,
  ABAP_FUNC_TABLES    TYPE ABAP_FUNC_PARMBIND-KIND VALUE 30,
  ABAP_FUNC_CHANGING  TYPE ABAP_FUNC_PARMBIND-KIND VALUE 40.

*-----动态UNCTION参数定义
  DATA: LT_PARM TYPE ABAP_FUNC_PARMBIND_TAB.
  DATA: LS_PARM TYPE LINE OF  ABAP_FUNC_PARMBIND_TAB.
*DATA: lc_struc TYPE ztsap_to_oa-lc_struc.
  DATA: IK TYPE I.


*-----定义附件和按钮显示信息
  DATA: OA01 TYPE TABLE OF TOA01 WITH HEADER LINE.
  DATA: OAS_ATT TYPE TABLE OF ZOAS_ATTK WITH HEADER LINE.
  DATA: ITEM TYPE I.
  DATA: OAS_WD TYPE TABLE OF ZOAS_WD WITH HEADER LINE.


*-----定义动态抬头参照类型
  DATA: LR_DATA TYPE REF TO DATA.



*-----定义动态行项目参照类型
  DATA: LT1_DATA TYPE REF TO DATA.
  DATA: LT2_DATA TYPE REF TO DATA.
  DATA: LT3_DATA TYPE REF TO DATA.
  DATA: LT4_DATA TYPE REF TO DATA.
  DATA: LT5_DATA TYPE REF TO DATA.
  DATA: LT6_DATA TYPE REF TO DATA.

  DATA: LS1_DATA TYPE REF TO DATA.
  DATA: LS2_DATA TYPE REF TO DATA.
  DATA: LS3_DATA TYPE REF TO DATA.
  DATA: LS4_DATA TYPE REF TO DATA.
  DATA: LS5_DATA TYPE REF TO DATA.
  DATA: LS6_DATA TYPE REF TO DATA.


*-----定义动态长文本参照类型
  DATA: TT1_DATA TYPE REF TO DATA.
  DATA: TT2_DATA TYPE REF TO DATA.
  DATA: TT3_DATA TYPE REF TO DATA.
  DATA: TT4_DATA TYPE REF TO DATA.
  DATA: TT5_DATA TYPE REF TO DATA.
  DATA: TT6_DATA TYPE REF TO DATA.

  DATA: TS1_DATA TYPE REF TO DATA.
  DATA: TS2_DATA TYPE REF TO DATA.
  DATA: TS3_DATA TYPE REF TO DATA.
  DATA: TS4_DATA TYPE REF TO DATA.
  DATA: TS5_DATA TYPE REF TO DATA.
  DATA: TS6_DATA TYPE REF TO DATA.


*-----定义附件参照类型
  DATA: ATT_DATA TYPE REF TO DATA.
  DATA: ATS_DATA TYPE REF TO DATA.



*----定义字段符号
  FIELD-SYMBOLS: <FS_TABLE> TYPE ANY TABLE .

  FIELD-SYMBOLS: <TS1_TABLE> TYPE ANY TABLE .
  FIELD-SYMBOLS: <TS2_TABLE> TYPE ANY TABLE .
  FIELD-SYMBOLS: <TS3_TABLE> TYPE ANY TABLE .
  FIELD-SYMBOLS: <TS4_TABLE> TYPE ANY TABLE .
  FIELD-SYMBOLS: <TS5_TABLE> TYPE ANY TABLE .
  FIELD-SYMBOLS: <TS6_TABLE> TYPE ANY TABLE .

  FIELD-SYMBOLS: <FS_STRU> TYPE ANY  .
  FIELD-SYMBOLS: <DYN_FIELD> TYPE ANY.
  FIELD-SYMBOLS: <DYN_FIELD1> TYPE ANY.

*--------
*----附件内表
  FIELD-SYMBOLS: <ATT_TABLE> TYPE ANY TABLE .



*-------------
  DATA: ITEM_S TYPE ZOAS_ITEM,     "项目表结构
        FR_STRUC_TY TYPE CHAR30,   "抬头表结构
        LC_TYPE  TYPE  ZOALC_TYPE,   "流程类型
        REF_NO TYPE    ZOAREF_NO,  "单据编号
        FC_NAME TYPE RS38L_FNAM.   "FUNCTION名称.



  DATA: GT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE.
  DATA: STRF TYPE STRING. "转换变量
  DATA: OA_MD5 TYPE ZOA_MD5_C.



*----WEB DYNPRO页面配置表
  DATA: OA400 TYPE TABLE OF ZOAT00040 WITH HEADER LINE.




*-------通过SAP流水号获取流程编号与单据编号

  SELECT SINGLE LC_TYPE REF_NO OA_MD5  INTO (LC_TYPE,REF_NO,OA_MD5) FROM ZOAT00020 WHERE INDEX_NO = IV_INDEX_NO.

  IF SY-SUBRC = 0.

*---获取函数名称
    SELECT SINGLE DATA_FUN INTO FC_NAME FROM ZOAT00010 WHERE LC_TYPE = LC_TYPE.

    CALL FUNCTION 'BDL_FUNCTION_INTERFACE_GET'
      EXPORTING
        FUNCNAME           = FC_NAME
      TABLES
        EXPORT_PARAMETER   = EXPORT_PARAMETER
        IMPORT_PARAMETER   = IMPORT_PARAMETER
        TABLES_PARAMETER   = TABLES_PARAMETER
      EXCEPTIONS
        FUNCTION_NOT_FOUND = 1
        INVALID_NAME       = 2
        X_ERROR            = 3
        NAMETAB_ERROR      = 4
        OTHERS             = 5.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

*---输入参数
    LOOP AT IMPORT_PARAMETER.
      LS_PARM-NAME = IMPORT_PARAMETER-PARAMETER.
      LS_PARM-KIND = ABAP_FUNC_EXPORTING..
      GET REFERENCE OF  REF_NO INTO LS_PARM-VALUE.
      INSERT LS_PARM INTO TABLE LT_PARM.
      CLEAR LS_PARM.
    ENDLOOP.


*-----输出HEAD抬头参数
    LOOP AT EXPORT_PARAMETER.
      LS_PARM-NAME = EXPORT_PARAMETER-PARAMETER.
      LS_PARM-KIND = ABAP_FUNC_IMPORTING.
      CREATE DATA LR_DATA TYPE (EXPORT_PARAMETER-TYP)."动态创建SAP抬头
      LS_PARM-VALUE = LR_DATA.
      INSERT LS_PARM INTO TABLE LT_PARM.
      CLEAR LS_PARM.
    ENDLOOP.


*---输出项目表TABLE参数

    IK = 1.
    LOOP AT TABLES_PARAMETER WHERE PARAMETER+(4) = 'ITEM'.
      IF IK = 1.
        IF TABLES_PARAMETER-DBSTRUCT IS NOT INITIAL.
        CREATE DATA LT1_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA LS1_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        ELSE.
        CREATE DATA LT1_DATA TYPE TABLE OF (TABLES_PARAMETER-TYP). "动态创建行项目表1
        CREATE DATA LS1_DATA TYPE  (TABLES_PARAMETER-TYP).         "动态创建行项目结构
        ENDIF.

        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = LT1_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.


      IF IK = 2.
       IF TABLES_PARAMETER-DBSTRUCT IS NOT INITIAL.
        CREATE DATA LT2_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA LS2_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        ELSE.
        CREATE DATA LT2_DATA TYPE TABLE OF (TABLES_PARAMETER-TYP). "动态创建行项目表1
        CREATE DATA LS2_DATA TYPE  (TABLES_PARAMETER-TYP).         "动态创建行项目结构
        ENDIF.
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = LT2_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.


      IF IK = 3.
        IF TABLES_PARAMETER-DBSTRUCT IS NOT INITIAL.
        CREATE DATA LT3_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA LS3_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        ELSE.
        CREATE DATA LT3_DATA TYPE TABLE OF (TABLES_PARAMETER-TYP). "动态创建行项目表1
        CREATE DATA LS3_DATA TYPE  (TABLES_PARAMETER-TYP).         "动态创建行项目结构
        ENDIF.
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = LT3_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.

      IF IK = 4.
      IF TABLES_PARAMETER-DBSTRUCT IS NOT INITIAL.
        CREATE DATA LT4_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA LS4_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        ELSE.
        CREATE DATA LT4_DATA TYPE TABLE OF (TABLES_PARAMETER-TYP). "动态创建行项目表1
        CREATE DATA LS4_DATA TYPE  (TABLES_PARAMETER-TYP).         "动态创建行项目结构
        ENDIF.
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = LT4_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.

      IF IK = 5.
      IF TABLES_PARAMETER-DBSTRUCT IS NOT INITIAL.
        CREATE DATA LT5_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA LS5_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        ELSE.
        CREATE DATA LT5_DATA TYPE TABLE OF (TABLES_PARAMETER-TYP). "动态创建行项目表1
        CREATE DATA LS5_DATA TYPE  (TABLES_PARAMETER-TYP).         "动态创建行项目结构
        ENDIF.

        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = LT5_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.

      IF IK = 6.
        IF TABLES_PARAMETER-DBSTRUCT IS NOT INITIAL.
        CREATE DATA LT6_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA LS6_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        ELSE.
        CREATE DATA LT6_DATA TYPE TABLE OF (TABLES_PARAMETER-TYP). "动态创建行项目表1
        CREATE DATA LS6_DATA TYPE  (TABLES_PARAMETER-TYP).         "动态创建行项目结构
        ENDIF.        "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = LT6_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.



      IK = IK + 1.
    ENDLOOP.







*---输出长文本表TABLE参数


    IK = 1.
    LOOP AT TABLES_PARAMETER WHERE PARAMETER+(4) = 'LTXT'.
      IF IK = 1.
        CREATE DATA TT1_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA TS1_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = TT1_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.


      IF IK = 2.
        CREATE DATA TT2_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表2
        CREATE DATA TS2_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = TT2_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.


      IF IK = 3.
        CREATE DATA TT3_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表3
        CREATE DATA TS3_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = TT3_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.

      IF IK = 4.
        CREATE DATA TT4_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表4
        CREATE DATA TS4_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = TT4_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.

      IF IK = 5.
        CREATE DATA TT5_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表5
        CREATE DATA TS5_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = TT5_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.

      IF IK = 6.
        CREATE DATA TT6_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表5
        CREATE DATA TS6_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = TT6_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.
      ENDIF.



      IK = IK + 1.
    ENDLOOP.





 LOOP AT TABLES_PARAMETER WHERE PARAMETER+(3) = 'ATT'.
        CREATE DATA ATT_DATA TYPE TABLE OF (TABLES_PARAMETER-DBSTRUCT). "动态创建行项目表1
        CREATE DATA ATS_DATA TYPE  (TABLES_PARAMETER-DBSTRUCT).         "动态创建行项目结构
        LS_PARM-NAME = TABLES_PARAMETER-PARAMETER.
        LS_PARM-KIND = ABAP_FUNC_TABLES.
        LS_PARM-VALUE = ATT_DATA.
        INSERT LS_PARM INTO TABLE LT_PARM.
        CLEAR LS_PARM.

ENDLOOP.



*---动态调用SAP获取抬头/项目数据FUNCTION
    CALL FUNCTION FC_NAME
      PARAMETER-TABLE LT_PARM.


    DATA: STR TYPE STRING.
    ASSIGN  LR_DATA->* TO <FS_STRU> .  "结构





*------长文本
  DATA:BEGIN OF ITAB1 OCCURS 0.
  DATA:NAME TYPE CHAR10.
  DATA:TLINE TYPE STRING.
  DATA:END OF ITAB1.

  DATA: LINE2(255) TYPE C,
        TEXT_TAB2  LIKE STANDARD TABLE OF LINE2.
  DATA TEXT1 TYPE STRING.

DATA: LTXT1 TYPE ZTLINE.

    IF TT1_DATA IS  BOUND.
    ASSIGN  TT1_DATA->* TO  <TS1_TABLE>. "长文本1
    LTXT1 = <TS1_TABLE>.
    CLEAR TEXT1 .
    CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
      TABLES
        ITF_TEXT    =  LTXT1
        TEXT_STREAM = TEXT_TAB2.

    LOOP AT TEXT_TAB2 INTO LINE2.
      CONCATENATE TEXT1 LINE2 INTO TEXT1 .
    ENDLOOP.

  Replace All Occurrences Of cl_abap_char_utilities=>horizontal_tab   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>CR_LF   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>NEWLINE   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>FORM_FEED   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>BACKSPACE    In text1 With  ''.

    ITAB1-NAME = 'LTXT1'.
    ITAB1-TLINE = TEXT1.
    APPEND ITAB1.
    CLEAR ITAB1.
    ENDIF.

    IF TT2_DATA IS  BOUND.
      ASSIGN  TT2_DATA->* TO  <TS2_TABLE>. "长文本2
      LTXT1 = <TS2_TABLE>.
     CLEAR TEXT1 .
    CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
      TABLES
        ITF_TEXT    =  LTXT1
        TEXT_STREAM = TEXT_TAB2.

    LOOP AT TEXT_TAB2 INTO LINE2.
      CONCATENATE TEXT1 LINE2 INTO TEXT1 .
    ENDLOOP.

  Replace All Occurrences Of cl_abap_char_utilities=>horizontal_tab   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>CR_LF   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>NEWLINE   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>FORM_FEED   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>BACKSPACE    In text1 With  ''.

    ITAB1-NAME = 'LTXT2'.
    ITAB1-TLINE = TEXT1.
    APPEND ITAB1.
    CLEAR ITAB1.
    ENDIF.


    IF TT3_DATA IS  BOUND.
    ASSIGN  TT3_DATA->* TO  <TS3_TABLE>. "行项目
    LTXT1 = <TS3_TABLE>.
    CLEAR TEXT1 .
    CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
      TABLES
        ITF_TEXT    =  LTXT1
        TEXT_STREAM = TEXT_TAB2.

    LOOP AT TEXT_TAB2 INTO LINE2.
      CONCATENATE TEXT1 LINE2 INTO TEXT1 .
    ENDLOOP.

  Replace All Occurrences Of cl_abap_char_utilities=>horizontal_tab   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>CR_LF   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>NEWLINE   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>FORM_FEED   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>BACKSPACE    In text1 With  ''.

    ITAB1-NAME = 'LTXT3'.
    ITAB1-TLINE = TEXT1.
    APPEND ITAB1.
    CLEAR ITAB1.
    ENDIF.

    IF TT4_DATA IS  BOUND.
    ASSIGN  TT4_DATA->* TO  <TS4_TABLE>. "行项目
    LTXT1 = <TS4_TABLE>.
    CLEAR TEXT1 .
    CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
      TABLES
        ITF_TEXT    =  LTXT1
        TEXT_STREAM = TEXT_TAB2.

    LOOP AT TEXT_TAB2 INTO LINE2.
      CONCATENATE TEXT1 LINE2 INTO TEXT1 .
    ENDLOOP.
  Replace All Occurrences Of cl_abap_char_utilities=>horizontal_tab   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>CR_LF   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>NEWLINE   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>FORM_FEED   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>BACKSPACE    In text1 With  ''.
    ITAB1-NAME = 'LTXT4'.
    ITAB1-TLINE = TEXT1.
    APPEND ITAB1.
    CLEAR ITAB1.
    ENDIF.



    IF TT5_DATA IS  BOUND.
    ASSIGN  TT5_DATA->* TO  <TS5_TABLE>. "行项目
    LTXT1 = <TS5_TABLE>.
    CLEAR TEXT1 .
    CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
      TABLES
        ITF_TEXT    =  LTXT1
        TEXT_STREAM = TEXT_TAB2.

    LOOP AT TEXT_TAB2 INTO LINE2.
      CONCATENATE TEXT1 LINE2 INTO TEXT1 .
    ENDLOOP.
  Replace All Occurrences Of cl_abap_char_utilities=>horizontal_tab   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>CR_LF   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>NEWLINE   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>FORM_FEED   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>BACKSPACE    In text1 With  ''.
    ITAB1-NAME = 'LTXT5'.
    ITAB1-TLINE = TEXT1.
    APPEND ITAB1.
    CLEAR ITAB1.
    ENDIF.



    IF TT6_DATA IS  BOUND.
    ASSIGN  TT6_DATA->* TO  <TS6_TABLE>. "行项目
    LTXT1 = <TS6_TABLE>.
    CLEAR TEXT1 .
    CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
      TABLES
        ITF_TEXT    =  LTXT1
        TEXT_STREAM = TEXT_TAB2.

    LOOP AT TEXT_TAB2 INTO LINE2.
      CONCATENATE TEXT1 LINE2 INTO TEXT1 .
    ENDLOOP.
  Replace All Occurrences Of cl_abap_char_utilities=>horizontal_tab   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>CR_LF   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>NEWLINE   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>FORM_FEED   In text1 With  ''.
  Replace All Occurrences Of cl_abap_char_utilities=>BACKSPACE    In text1 With  ''.

    ITAB1-NAME = 'LTXT6'.
    ITAB1-TLINE = TEXT1.
    APPEND ITAB1.
    CLEAR ITAB1.
    ENDIF.



   DATA: STR1 TYPE STRING.
   DATA: STR2 TYPE STRING.
   DATA: STR3 TYPE STRING.
   DATA: STRT TYPE STRING.



     EV_STR_HEAD = /UI2/CL_JSON=>SERIALIZE( DATA = <FS_STRU> COMPRESS = ABAP_FALSE PRETTY_NAME = '' ). "抬头数据



    EV_STR_LTXT = /UI2/CL_JSON=>SERIALIZE( DATA = ITAB1[] COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).    "


*--------附件查看

DATA: ATT TYPE TABLE OF ZOAS_ATTK.
DATA: ATT_S  TYPE ZOAS_ATTK..

  IF ATT_DATA IS BOUND.
    ASSIGN  ATT_DATA->* TO <ATT_TABLE>. "长文本1
   ATT = <ATT_TABLE>.

IF ATT[] IS NOT INITIAL.
SORT ATT BY BUSTYPE REF_NO ITEM.
REFRESH: OAS_ATT.
CLEAR:   OAS_ATT.



*-------标准附件传 DOCID，非标准附件获取ZT00040 数据

        DATA:
              DESCR(60) TYPE C,
              FILENAME LIKE  TOAAT-FILENAME,
              CREATOR  LIKE  TOAAT-CREATOR,
              AR_DATE  LIKE  TOA01-AR_DATE,
              CTIME    LIKE  TOAAT-CREATIME,
              AR_OBJECT LIKE TOA01-AR_OBJECT.



*-----非标准的

        DATA: IMC TYPE C.
        CLEAR IMC .






 LOOP AT ATT INTO ATT_S.
   MOVE-CORRESPONDING ATT_S TO OAS_ATT.

 IF ATT_S-ARC_DOC_ID <>  ''.  "非标得
 CLEAR: DESCR,FILENAME,CREATOR,AR_DATE,AR_OBJECT,CTIME .
 SELECT SINGLE DESCR FILENAME CREATOR CREATIME INTO (DESCR,FILENAME,CREATOR,CTIME)  FROM TOAAT WHERE ARC_DOC_ID = OAS_ATT-ARC_DOC_ID.
 SELECT SINGLE AR_DATE AR_OBJECT INTO (AR_DATE,AR_OBJECT)  FROM TOA01 WHERE ARC_DOC_ID = OAS_ATT-ARC_DOC_ID.

IF FILENAME = ''.
  OAS_ATT-ATT_NAME = '附件'.
ELSE.
OAS_ATT-ATT_NAME = FILENAME.
ENDIF.
OAS_ATT-FILETYPE = AR_OBJECT.
OAS_ATT-TEXT = DESCR.
OAS_ATT-CDATE = AR_DATE.
OAS_ATT-CTIME = CTIME.


 DATA NUM(10) TYPE C VALUE '0123456789'.
 DATA: SSU TYPE STRING.
 DATA: PERNR_FJ  TYPE PA0001-PERNR.

 SSU = CREATOR.
 CONDENSE SSU .
 IF SSU  CO NUM AND  SSU <> ''.
   PERNR_FJ = SSU+(8).
  SELECT  SINGLE ENAME INTO  OAS_ATT-ENAME FROM PA0001 WHERE PERNR =  PERNR_FJ
            AND ENDDA  >= SY-DATUM  AND BEGDA <= SY-DATUM.

 ENDIF.

            IF SY-MANDT = '130' OR SY-MANDT = '300'  OR SY-MANDT = '310'.
              CONCATENATE 'http://172.18.95.47:8080/archive?get&pVersion=0045&contRep=EA'  '&docId=' OAS_ATT-ARC_DOC_ID INTO OAS_ATT-ATT_URL.
            ELSE.
              CONCATENATE 'http://opentextpro.app.com.cn:8080/archive?get&pVersion=0045&contRep=EA'  '&docId=' OAS_ATT-ARC_DOC_ID INTO OAS_ATT-ATT_URL.
            ENDIF.
            APPEND OAS_ATT.
            CLEAR OAS_ATT.
ELSE.
 IMC = 'X'.
ENDIF.

ENDLOOP.


*------标准的

 IF  IMC = 'X'.
  SELECT *  INTO CORRESPONDING FIELDS OF TABLE OAS_ATT  FROM ZT00040
   FOR ALL ENTRIES IN ATT
 WHERE BUSTYPE = ATT-BUSTYPE AND REF_NO = ATT-REF_NO AND ITEM = ATT-ITEM AND DELFLAG <> 'X'.
  LOOP AT OAS_ATT .
            IF OAS_ATT-ATT_NAME  = ''.
            OAS_ATT-ATT_NAME = '附件'.
           ENDIF.

          IF SY-MANDT = '130' OR SY-MANDT = '300'  OR SY-MANDT = '310'.
            CONCATENATE 'http://172.18.95.47:8080/archive?get&pVersion=0045&contRep=EA'  '&docId=' OAS_ATT-ARC_DOC_ID INTO OAS_ATT-ATT_URL.
          ELSE.
            CONCATENATE 'http://opentextpro.app.com.cn:8080/archive?get&pVersion=0045&contRep=EA'  '&docId=' OAS_ATT-ARC_DOC_ID INTO OAS_ATT-ATT_URL.
          ENDIF.

            SSU = OAS_ATT-CUNAME.
            CONDENSE SSU .
            IF SSU  CO NUM AND  SSU <> ''.
              PERNR_FJ = SSU+(8).
              SELECT  SINGLE ENAME INTO  OAS_ATT-ENAME FROM PA0001 WHERE PERNR =  PERNR_FJ
              AND ENDDA  >= SY-DATUM  AND BEGDA <= SY-DATUM.
            ENDIF.

    MODIFY  OAS_ATT.
    CLEAR    OAS_ATT.
    ENDLOOP.

ENDIF.





ENDIF.
ENDIF.




*--------添加OA调用SAP WEB页面信息
      REFRESH OAS_WD.

      SELECT * INTO CORRESPONDING FIELDS OF TABLE OA400 FROM  ZOAT00040 WHERE LC_TYPE = LC_TYPE.
      IF SY-SUBRC = 0.
        LOOP AT OA400 .
          OAS_WD-ITEM = OA400-ITEM.
          OAS_WD-WD_NAME = OA400-WD_NAME.
          CONCATENATE OA400-WD_URL '?index_no='  OA_MD5+0(50)  INTO  OAS_WD-WD_URL.
          APPEND OAS_WD.
          CLEAR  OAS_WD.
        ENDLOOP.
      ENDIF.



*----行项目数据转换
  DATA: STR_I1 TYPE STRING.
  DATA: STR_I2 TYPE STRING.
  DATA: STR_I3 TYPE STRING.
  DATA: STR_I4 TYPE STRING.
  DATA: STR_I5 TYPE STRING.
  DATA: STR_I6 TYPE STRING.
  CLEAR: STR_I1,STR_I2,STR_I3,STR_I4,STR_I5,STR_I6.

*----行项目1
IF LT1_DATA IS NOT INITIAL.
ASSIGN  LT1_DATA->* TO  <FS_TABLE>. "行项目
STR_I1 = /UI2/CL_JSON=>SERIALIZE( DATA =  <FS_TABLE>  COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).     "项目数据
ENDIF.


*----行项目2
IF LT2_DATA IS NOT INITIAL.
ASSIGN  LT2_DATA->* TO  <FS_TABLE>. "行项目
STR_I2 = /UI2/CL_JSON=>SERIALIZE( DATA =  <FS_TABLE>  COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).     "项目数据
ENDIF.

*----行项目3
IF LT3_DATA IS NOT INITIAL.
ASSIGN  LT3_DATA->* TO  <FS_TABLE>. "行项目
STR_I3 = /UI2/CL_JSON=>SERIALIZE( DATA =  <FS_TABLE>  COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).     "项目数据
ENDIF.


*----行项目4
IF LT4_DATA IS NOT INITIAL.
ASSIGN  LT4_DATA->* TO  <FS_TABLE>. "行项目
STR_I4 = /UI2/CL_JSON=>SERIALIZE( DATA =  <FS_TABLE>  COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).     "项目数据
ENDIF.


*----行项目5
IF LT5_DATA IS NOT INITIAL.
ASSIGN  LT5_DATA->* TO  <FS_TABLE>. "行项目
STR_I5 = /UI2/CL_JSON=>SERIALIZE( DATA =  <FS_TABLE>  COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).     "项目数据
ENDIF.


*----行项目6
IF LT6_DATA IS NOT INITIAL.
ASSIGN  LT6_DATA->* TO  <FS_TABLE>. "行项目
STR_I6 = /UI2/CL_JSON=>SERIALIZE( DATA =  <FS_TABLE>  COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).     "项目数据
ENDIF.



*-----附件数据转换
STR2 = /UI2/CL_JSON=>SERIALIZE( DATA =  OAS_ATT[] COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).




*------WEB 页面转换

STR3 = /UI2/CL_JSON=>SERIALIZE( DATA =  OAS_WD[] COMPRESS = ABAP_FALSE PRETTY_NAME = '' ).         "WEB dynpro页面显示




IF STR_I1 = '' AND STR_I2 = ''AND STR_I3 = '' AND STR_I4 = '' AND STR_I5 = '' AND STR_I6 = ''.
 IF STR2 <> '' AND  STR2 <> '[]'.
CONCATENATE '{"ATT":' STR2  '}' INTO  EV_STR_ITEM..
ENDIF.
ENDIF.




IF STR_I1 <> '' AND STR_I2 = ''AND STR_I3 = '' AND STR_I4 = '' AND STR_I5 = '' AND STR_I6 = ''.

IF STR2 IS INITIAL AND STR3 IS INITIAL .
   CONCATENATE '{"ITEM1":'   STR_I1 '}' INTO  EV_STR_ITEM.
 ELSE.

 CONCATENATE '{"ITEM1":'  STR_I1  ',"ATT":' STR2    ',"WD":'  STR3  '}' INTO  EV_STR_ITEM..
ENDIF.

ELSEIF STR_I1 <> '' AND STR_I2 <> '' AND STR_I3 = '' AND STR_I4 = '' AND STR_I5 = '' AND STR_I6 = ''.

IF STR2 IS INITIAL AND STR3 IS INITIAL .
   CONCATENATE '{"ITEM1":'   STR_I1 ',"ITEM2":' STR_I2 '}' INTO  EV_STR_ITEM.

 ELSE.

 CONCATENATE '{"ITEM1":'  STR_I1 ',"ITEM2":' STR_I2  ',"ATT":' STR2    ',"WD":'  STR3  '}' INTO  EV_STR_ITEM..
ENDIF.

ELSEIF STR_I1 <> '' AND STR_I2 <> '' AND STR_I3 <> '' AND STR_I4 = '' AND STR_I5 = '' AND STR_I6 = ''.

IF STR2 IS INITIAL AND STR3 IS INITIAL .
   CONCATENATE '{"ITEM1":'   STR_I1 ',"ITEM2":' STR_I2 ',"ITEM3":' STR_I3 '}' INTO  EV_STR_ITEM.

 ELSE.
 CONCATENATE '{"ITEM1":'  STR_I1 ',"ITEM2":' STR_I2  ',"ITEM3":' STR_I3  ',"ATT":' STR2    ',"WD":'  STR3  '}' INTO  EV_STR_ITEM..
ENDIF.

ELSEIF STR_I1 <> '' AND STR_I2 <> '' AND STR_I3 <> '' AND STR_I4 <> '' AND STR_I5 = '' AND STR_I6 = ''.

IF STR2 IS INITIAL AND STR3 IS INITIAL .
   CONCATENATE '{"ITEM1":'   STR_I1 ',"ITEM2":' STR_I2 ',"ITEM3":' STR_I3 ',"ITEM4":' STR_I4 '}' INTO  EV_STR_ITEM.

 ELSE.
 CONCATENATE '{"ITEM1":'  STR_I1 ',"ITEM2":' STR_I2  ',"ITEM3":' STR_I3  ',"ITEM4":' STR_I4  ',"ATT":' STR2    ',"WD":'  STR3  '}' INTO  EV_STR_ITEM..
ENDIF.


ELSEIF STR_I1 <> '' AND STR_I2 <> '' AND STR_I3 <> '' AND STR_I4 <> '' AND STR_I5 <> '' AND STR_I6 = ''.

IF STR2 IS INITIAL AND STR3 IS INITIAL .
   CONCATENATE '{"ITEM1":'   STR_I1 ',"ITEM2":' STR_I2 ',"ITEM3":' STR_I3 ',"ITEM4":' STR_I4 ',"ITEM5":' STR_I5 '}' INTO  EV_STR_ITEM.

 ELSE.
 CONCATENATE '{"ITEM1":'  STR_I1 ',"ITEM2":' STR_I2  ',"ITEM3":' STR_I3  ',"ITEM4":' STR_I4   ',"ITEM5":' STR_I5   ',"ATT":' STR2    ',"WD":'  STR3  '}' INTO  EV_STR_ITEM..
ENDIF.

ELSEIF STR_I1 <> '' AND STR_I2 <> '' AND STR_I3 <> '' AND STR_I4 <> '' AND STR_I5 <> '' AND STR_I6 <> ''.
IF STR2 IS INITIAL AND STR3 IS INITIAL .
   CONCATENATE '{"ITEM1":'   STR_I1 ',"ITEM2":' STR_I2 ',"ITEM3":' STR_I3 ',"ITEM4":' STR_I4 ',"ITEM5":' STR_I5 ',"ITEM6":' STR_I6  '}' INTO  EV_STR_ITEM.

 ELSE.
 CONCATENATE '{"ITEM1":'  STR_I1 ',"ITEM2":' STR_I2  ',"ITEM3":' STR_I3  ',"ITEM4":' STR_I4   ',"ITEM5":' STR_I5 ',"ITEM6":' STR_I6  ',"ATT":' STR2    ',"WD":'  STR3  '}' INTO  EV_STR_ITEM..
ENDIF.

ENDIF.
ENDIF.


REPLACE ALL OCCURRENCES OF '0000-00-00' IN EV_STR_HEAD WITH ``.
REPLACE ALL OCCURRENCES OF '00:00:00' IN EV_STR_HEAD WITH ``.


REPLACE ALL OCCURRENCES OF '0000-00-00' IN EV_STR_item WITH ``.
REPLACE ALL OCCURRENCES OF '00:00:00' IN EV_STR_item WITH ``.






*}   INSERT
ENDFUNCTION.
